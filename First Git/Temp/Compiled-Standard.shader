// Compiled shader for WebGL

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
// Skipping shader variants that would not be included into build of current scene.

Shader "Standard" {
Properties {
 _Color ("Color", Color) = (1.000000,1.000000,1.000000,1.000000)
 _MainTex ("Albedo", 2D) = "white" { }
 _Cutoff ("Alpha Cutoff", Range(0.000000,1.000000)) = 0.500000
 _Glossiness ("Smoothness", Range(0.000000,1.000000)) = 0.500000
 _GlossMapScale ("Smoothness Scale", Range(0.000000,1.000000)) = 1.000000
[Enum(Metallic Alpha,0,Albedo Alpha,1)]  _SmoothnessTextureChannel ("Smoothness texture channel", Float) = 0.000000
[Gamma]  _Metallic ("Metallic", Range(0.000000,1.000000)) = 0.000000
 _MetallicGlossMap ("Metallic", 2D) = "white" { }
[ToggleOff]  _SpecularHighlights ("Specular Highlights", Float) = 1.000000
[ToggleOff]  _GlossyReflections ("Glossy Reflections", Float) = 1.000000
 _BumpScale ("Scale", Float) = 1.000000
 _BumpMap ("Normal Map", 2D) = "bump" { }
 _Parallax ("Height Scale", Range(0.005000,0.080000)) = 0.020000
 _ParallaxMap ("Height Map", 2D) = "black" { }
 _OcclusionStrength ("Strength", Range(0.000000,1.000000)) = 1.000000
 _OcclusionMap ("Occlusion", 2D) = "white" { }
 _EmissionColor ("Color", Color) = (0.000000,0.000000,0.000000,1.000000)
 _EmissionMap ("Emission", 2D) = "white" { }
 _DetailMask ("Detail Mask", 2D) = "white" { }
 _DetailAlbedoMap ("Detail Albedo x2", 2D) = "grey" { }
 _DetailNormalMapScale ("Scale", Float) = 1.000000
 _DetailNormalMap ("Normal Map", 2D) = "bump" { }
[Enum(UV0,0,UV1,1)]  _UVSec ("UV Set for secondary textures", Float) = 0.000000
[HideInInspector]  _Mode ("__mode", Float) = 0.000000
[HideInInspector]  _SrcBlend ("__src", Float) = 1.000000
[HideInInspector]  _DstBlend ("__dst", Float) = 0.000000
[HideInInspector]  _ZWrite ("__zw", Float) = 1.000000
}
SubShader { 
 LOD 300
 Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }


 // Stats for Vertex shader:
 //         gles: 176 avg math (163..189), 5 avg texture (4..6), 10 branch
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="FORWARDBASE" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite [_ZWrite]
  Blend [_SrcBlend] [_DstBlend]
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL 
-- Vertex shader for "gles":
// Stats: 163 math, 4 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  highp vec3 tmpvar_2;
  tmpvar_2.x = xlv_TEXCOORD2.w;
  tmpvar_2.y = xlv_TEXCOORD2_1.w;
  tmpvar_2.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float occ_13;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_13 = tmpvar_14;
  mediump float occlusion_15;
  occlusion_15 = ((1.0 - _OcclusionStrength) + (occ_13 * _OcclusionStrength));
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_16 = unity_SpecCube0_HDR;
  tmpvar_17 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_18;
  worldViewDir_18 = -(tmpvar_11);
  mediump vec3 Normal_19;
  Normal_19 = tmpvar_10;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_5;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec3 I_23;
  I_23 = -(worldViewDir_18);
  mediump vec3 tmpvar_24;
  tmpvar_24 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_25;
  tmpvar_25 = (I_23 - (2.0 * (
    dot (Normal_19, I_23)
   * Normal_19)));
  mediump vec3 originalReflUVW_26;
  mediump vec3 specular_27;
  originalReflUVW_26 = tmpvar_25;
  mediump vec3 worldRefl_28;
  worldRefl_28 = tmpvar_25;
  highp vec3 worldPos_29;
  worldPos_29 = tmpvar_2;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_30;
    mediump vec3 rbmax_31;
    mediump vec3 tmpvar_32;
    tmpvar_32 = normalize(tmpvar_25);
    highp vec3 tmpvar_33;
    tmpvar_33 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_2) / tmpvar_32);
    rbmax_31 = tmpvar_33;
    highp vec3 tmpvar_34;
    tmpvar_34 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_2) / tmpvar_32);
    rbmin_30 = tmpvar_34;
    bvec3 tmpvar_35;
    tmpvar_35 = greaterThan (tmpvar_32, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_36;
    if (tmpvar_35.x) {
      tmpvar_36 = rbmax_31.x;
    } else {
      tmpvar_36 = rbmin_30.x;
    };
    mediump float tmpvar_37;
    if (tmpvar_35.y) {
      tmpvar_37 = rbmax_31.y;
    } else {
      tmpvar_37 = rbmin_30.y;
    };
    mediump float tmpvar_38;
    if (tmpvar_35.z) {
      tmpvar_38 = rbmax_31.z;
    } else {
      tmpvar_38 = rbmin_30.z;
    };
    worldPos_29 = (tmpvar_2 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_28 = (worldPos_29 + (tmpvar_32 * min (
      min (tmpvar_36, tmpvar_37)
    , tmpvar_38)));
  };
  tmpvar_25 = worldRefl_28;
  mediump vec4 hdr_39;
  hdr_39 = tmpvar_16;
  mediump vec4 tmpvar_40;
  tmpvar_40.xyz = worldRefl_28;
  tmpvar_40.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_28, tmpvar_40.w);
  mediump vec4 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((hdr_39.x * (
    (hdr_39.w * (tmpvar_42.w - 1.0))
   + 1.0)) * tmpvar_42.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_44;
    worldRefl_44 = originalReflUVW_26;
    highp vec3 worldPos_45;
    worldPos_45 = tmpvar_2;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_46;
      mediump vec3 rbmax_47;
      mediump vec3 tmpvar_48;
      tmpvar_48 = normalize(originalReflUVW_26);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_2) / tmpvar_48);
      rbmax_47 = tmpvar_49;
      highp vec3 tmpvar_50;
      tmpvar_50 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_2) / tmpvar_48);
      rbmin_46 = tmpvar_50;
      bvec3 tmpvar_51;
      tmpvar_51 = greaterThan (tmpvar_48, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_52;
      if (tmpvar_51.x) {
        tmpvar_52 = rbmax_47.x;
      } else {
        tmpvar_52 = rbmin_46.x;
      };
      mediump float tmpvar_53;
      if (tmpvar_51.y) {
        tmpvar_53 = rbmax_47.y;
      } else {
        tmpvar_53 = rbmin_46.y;
      };
      mediump float tmpvar_54;
      if (tmpvar_51.z) {
        tmpvar_54 = rbmax_47.z;
      } else {
        tmpvar_54 = rbmin_46.z;
      };
      worldPos_45 = (tmpvar_2 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_44 = (worldPos_45 + (tmpvar_48 * min (
        min (tmpvar_52, tmpvar_53)
      , tmpvar_54)));
    };
    tmpvar_25 = worldRefl_44;
    mediump vec4 hdr_55;
    hdr_55 = tmpvar_17;
    mediump vec4 tmpvar_56;
    tmpvar_56.xyz = worldRefl_44;
    tmpvar_56.w = ((tmpvar_20 * (1.7 - 
      (0.7 * tmpvar_20)
    )) * 6.0);
    lowp vec4 tmpvar_57;
    tmpvar_57 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_44, tmpvar_56.w);
    mediump vec4 tmpvar_58;
    tmpvar_58 = tmpvar_57;
    mediump vec3 tmpvar_59;
    tmpvar_59 = ((hdr_55.x * (
      (hdr_55.w * (tmpvar_58.w - 1.0))
     + 1.0)) * tmpvar_58.xyz);
    highp vec3 tmpvar_60;
    tmpvar_60 = mix (tmpvar_59, tmpvar_43, unity_SpecCube0_BoxMin.www);
    specular_27 = tmpvar_60;
  } else {
    specular_27 = tmpvar_43;
  };
  tmpvar_24 = (specular_27 * occlusion_15);
  highp vec3 viewDir_61;
  viewDir_61 = -(tmpvar_11);
  mediump vec3 color_62;
  mediump float surfaceReduction_63;
  highp float specularTerm_64;
  mediump float diffuseTerm_65;
  mediump float nv_66;
  highp float tmpvar_67;
  highp float smoothness_68;
  smoothness_68 = tmpvar_5;
  tmpvar_67 = (1.0 - smoothness_68);
  highp vec3 tmpvar_69;
  highp vec3 inVec_70;
  inVec_70 = (_WorldSpaceLightPos0.xyz + viewDir_61);
  tmpvar_69 = (inVec_70 * inversesqrt(max (0.001, 
    dot (inVec_70, inVec_70)
  )));
  highp float tmpvar_71;
  tmpvar_71 = abs(dot (tmpvar_10, viewDir_61));
  nv_66 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_73;
  tmpvar_73 = clamp (dot (tmpvar_10, tmpvar_69), 0.0, 1.0);
  mediump float tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_69), 0.0, 1.0);
  tmpvar_74 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float NdotL_77;
  NdotL_77 = tmpvar_72;
  mediump float perceptualRoughness_78;
  perceptualRoughness_78 = tmpvar_67;
  mediump float tmpvar_79;
  tmpvar_79 = (0.5 + ((2.0 * tmpvar_74) * (tmpvar_74 * perceptualRoughness_78)));
  mediump float x_80;
  x_80 = (1.0 - NdotL_77);
  mediump float x_81;
  x_81 = (1.0 - nv_66);
  tmpvar_76 = ((1.0 + (
    (tmpvar_79 - 1.0)
   * 
    ((x_80 * x_80) * ((x_80 * x_80) * x_80))
  )) * (1.0 + (
    (tmpvar_79 - 1.0)
   * 
    ((x_81 * x_81) * ((x_81 * x_81) * x_81))
  )));
  highp float tmpvar_82;
  tmpvar_82 = (tmpvar_76 * tmpvar_72);
  diffuseTerm_65 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = max ((tmpvar_67 * tmpvar_67), 0.002);
  highp float NdotV_84;
  NdotV_84 = nv_66;
  highp float tmpvar_85;
  tmpvar_85 = (tmpvar_83 * tmpvar_83);
  highp float tmpvar_86;
  tmpvar_86 = (((
    (tmpvar_73 * tmpvar_85)
   - tmpvar_73) * tmpvar_73) + 1.0);
  highp float tmpvar_87;
  tmpvar_87 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_72 * (
        (NdotV_84 * (1.0 - tmpvar_83))
       + tmpvar_83)) + (NdotV_84 * (
        (tmpvar_72 * (1.0 - tmpvar_83))
       + tmpvar_83))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_85)
     / 
      ((tmpvar_86 * tmpvar_86) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_72));
  specularTerm_64 = tmpvar_87;
  surfaceReduction_63 = (1.0 - ((0.28 * tmpvar_83) * tmpvar_67));
  bvec3 tmpvar_88;
  tmpvar_88 = bvec3(tmpvar_8);
  bool tmpvar_89;
  tmpvar_89 = any(tmpvar_88);
  highp float tmpvar_90;
  if (tmpvar_89) {
    tmpvar_90 = 1.0;
  } else {
    tmpvar_90 = 0.0;
  };
  specularTerm_64 = (tmpvar_87 * tmpvar_90);
  mediump vec3 tmpvar_91;
  mediump float x_92;
  x_92 = (1.0 - tmpvar_74);
  tmpvar_91 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_92 * x_92)
   * 
    ((x_92 * x_92) * x_92)
  )));
  mediump float x_93;
  x_93 = (1.0 - nv_66);
  mediump vec3 tmpvar_94;
  tmpvar_94 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_93 * x_93) * (
    (x_93 * x_93)
   * x_93))));
  highp vec3 tmpvar_95;
  tmpvar_95 = (((tmpvar_7 * 
    (tmpvar_12 * diffuseTerm_65)
  ) + (
    (specularTerm_64 * tmpvar_12)
   * tmpvar_91)) + ((surfaceReduction_63 * tmpvar_24) * tmpvar_94));
  color_62 = tmpvar_95;
  mediump vec4 tmpvar_96;
  tmpvar_96.w = 1.0;
  tmpvar_96.xyz = color_62;
  c_1.w = tmpvar_96.w;
  c_1.xyz = color_62;
  mediump vec4 xlat_varoutput_97;
  xlat_varoutput_97.xyz = c_1.xyz;
  xlat_varoutput_97.w = 1.0;
  gl_FragData[0] = xlat_varoutput_97;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_9;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat13;
vec3 u_xlat18;
mediump vec3 u_xlat16_18;
mediump vec3 u_xlat16_21;
float u_xlat24;
float u_xlat25;
float u_xlat36;
float u_xlat37;
lowp float u_xlat10_37;
mediump float u_xlat16_38;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
mediump float u_xlat16_42;
mediump float u_xlat16_45;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_38);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;
    u_xlat10_37 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_39 = (-_OcclusionStrength) + 1.0;
    u_xlat16_39 = u_xlat10_37 * _OcclusionStrength + u_xlat16_39;
    u_xlat37 = (-_Glossiness) + 1.0;
    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb5){
        u_xlat16_40 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
        u_xlat16_40 = inversesqrt(u_xlat16_40);
        u_xlat16_6.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_6.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat16_6.xyz;
        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyzx).xyz;
        u_xlat16_9.x = (u_xlatb8.x) ? u_xlat5.x : u_xlat7.x;
        u_xlat16_9.y = (u_xlatb8.y) ? u_xlat5.y : u_xlat7.y;
        u_xlat16_9.z = (u_xlatb8.z) ? u_xlat5.z : u_xlat7.z;
        u_xlat16_40 = min(u_xlat16_9.y, u_xlat16_9.x);
        u_xlat16_40 = min(u_xlat16_9.z, u_xlat16_40);
        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_40) + u_xlat5.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    u_xlat16_40 = (-u_xlat37) * 0.699999988 + 1.70000005;
    u_xlat16_40 = u_xlat37 * u_xlat16_40;
    u_xlat16_40 = u_xlat16_40 * 6.0;
    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_40);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_18.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb7 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb7){
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb7 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb7){
            u_xlat16_9.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
            u_xlat16_9.x = inversesqrt(u_xlat16_9.x);
            u_xlat16_9.xyz = u_xlat16_4.xyz * u_xlat16_9.xxx;
            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat7.xyz = u_xlat7.xyz / u_xlat16_9.xyz;
            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat8.xyz = u_xlat8.xyz / u_xlat16_9.xyz;
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_9.xyzx).xyz;
            u_xlat16_11.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;
            u_xlat16_11.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;
            u_xlat16_11.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat16_45 = min(u_xlat16_11.y, u_xlat16_11.x);
            u_xlat16_45 = min(u_xlat16_11.z, u_xlat16_45);
            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat16_9.xyz * vec3(u_xlat16_45) + u_xlat7.xyz;
            u_xlat16_4.xyz = u_xlat4.xyz;
        //ENDIF
        }
        u_xlat10_4 = textureLod(unity_SpecCube1, u_xlat16_4.xyz, u_xlat16_40);
        u_xlat16_9.x = u_xlat10_4.w + -1.0;
        u_xlat16_9.x = unity_SpecCube1_HDR.w * u_xlat16_9.x + 1.0;
        u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube1_HDR.x;
        u_xlat16_9.xyz = u_xlat10_4.xyz * u_xlat16_9.xxx;
        u_xlat16_7.xyz = u_xlat16_6.xxx * u_xlat10_5.xyz + (-u_xlat16_9.xyz);
        u_xlat18.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_9.xyz;
        u_xlat16_18.xyz = u_xlat18.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = vec3(u_xlat16_39) * u_xlat16_18.xyz;
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat7.xyz = vec3(u_xlat36) * u_xlat7.xyz;
    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat12 + u_xlat12;
    u_xlat16_39 = u_xlat12 * u_xlat16_39;
    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;
    u_xlat16_42 = (-u_xlat1.x) + 1.0;
    u_xlat16_9.x = u_xlat16_42 * u_xlat16_42;
    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_9.x;
    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;
    u_xlat16_9.x = -abs(u_xlat36) + 1.0;
    u_xlat16_21.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;
    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_21.x;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_9.x + 1.0;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;
    u_xlat24 = u_xlat1.x * u_xlat16_39;
    u_xlat13 = u_xlat37 * u_xlat37;
    u_xlat13 = max(u_xlat13, 0.00200000009);
    u_xlat25 = (-u_xlat13) + 1.0;
    u_xlat7.x = abs(u_xlat36) * u_xlat25 + u_xlat13;
    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;
    u_xlat36 = abs(u_xlat36) * u_xlat25;
    u_xlat36 = u_xlat1.x * u_xlat7.x + u_xlat36;
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat25 = u_xlat13 * u_xlat13;
    u_xlat7.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);
    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat25 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat36;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat36 = u_xlat13 * u_xlat37;
    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;
    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_39!=0.0);
#else
    u_xlatb1 = u_xlat16_39!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_38 = (-u_xlat16_38) + 1.0;
    u_xlat16_38 = u_xlat16_38 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_21.xyz = vec3(u_xlat24) * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat16_39 = (-u_xlat12) + 1.0;
    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;
    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_11.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);
    u_xlat16_2.xyz = u_xlat16_9.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL LIGHTPROBE_SH _EMISSION 
-- Vertex shader for "gles":
// Stats: 177 math, 5 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_17;
  mediump vec4 ambientOrLightmapUV_19;
  ambientOrLightmapUV_19.w = 0.0;
  mediump vec3 x1_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = (normalWorld_18.xyzz * normalWorld_18.yzzx);
  x1_20.x = dot (unity_SHBr, tmpvar_21);
  x1_20.y = dot (unity_SHBg, tmpvar_21);
  x1_20.z = dot (unity_SHBb, tmpvar_21);
  ambientOrLightmapUV_19.xyz = (x1_20 + (unity_SHC.xyz * (
    (normalWorld_18.x * normalWorld_18.x)
   - 
    (normalWorld_18.y * normalWorld_18.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_19;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  highp vec3 tmpvar_2;
  tmpvar_2.x = xlv_TEXCOORD2.w;
  tmpvar_2.y = xlv_TEXCOORD2_1.w;
  tmpvar_2.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float occ_13;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_13 = tmpvar_14;
  mediump float occlusion_15;
  occlusion_15 = ((1.0 - _OcclusionStrength) + (occ_13 * _OcclusionStrength));
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_16 = unity_SpecCube0_HDR;
  tmpvar_17 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_18;
  worldViewDir_18 = -(tmpvar_11);
  mediump vec3 Normal_19;
  Normal_19 = tmpvar_10;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_5;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec3 I_23;
  I_23 = -(worldViewDir_18);
  mediump vec3 normalWorld_24;
  normalWorld_24 = tmpvar_10;
  mediump vec3 tmpvar_25;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_24;
  mediump vec3 x_28;
  x_28.x = dot (unity_SHAr, tmpvar_27);
  x_28.y = dot (unity_SHAg, tmpvar_27);
  x_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_25 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_28)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_15);
  tmpvar_26 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (I_23 - (2.0 * (
    dot (Normal_19, I_23)
   * Normal_19)));
  mediump vec3 originalReflUVW_30;
  mediump vec3 specular_31;
  originalReflUVW_30 = tmpvar_29;
  mediump vec3 worldRefl_32;
  worldRefl_32 = tmpvar_29;
  highp vec3 worldPos_33;
  worldPos_33 = tmpvar_2;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_34;
    mediump vec3 rbmax_35;
    mediump vec3 tmpvar_36;
    tmpvar_36 = normalize(tmpvar_29);
    highp vec3 tmpvar_37;
    tmpvar_37 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_2) / tmpvar_36);
    rbmax_35 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_2) / tmpvar_36);
    rbmin_34 = tmpvar_38;
    bvec3 tmpvar_39;
    tmpvar_39 = greaterThan (tmpvar_36, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_40;
    if (tmpvar_39.x) {
      tmpvar_40 = rbmax_35.x;
    } else {
      tmpvar_40 = rbmin_34.x;
    };
    mediump float tmpvar_41;
    if (tmpvar_39.y) {
      tmpvar_41 = rbmax_35.y;
    } else {
      tmpvar_41 = rbmin_34.y;
    };
    mediump float tmpvar_42;
    if (tmpvar_39.z) {
      tmpvar_42 = rbmax_35.z;
    } else {
      tmpvar_42 = rbmin_34.z;
    };
    worldPos_33 = (tmpvar_2 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_32 = (worldPos_33 + (tmpvar_36 * min (
      min (tmpvar_40, tmpvar_41)
    , tmpvar_42)));
  };
  tmpvar_29 = worldRefl_32;
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_16;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = worldRefl_32;
  tmpvar_44.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_32, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((hdr_43.x * (
    (hdr_43.w * (tmpvar_46.w - 1.0))
   + 1.0)) * tmpvar_46.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_48;
    worldRefl_48 = originalReflUVW_30;
    highp vec3 worldPos_49;
    worldPos_49 = tmpvar_2;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_50;
      mediump vec3 rbmax_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(originalReflUVW_30);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_2) / tmpvar_52);
      rbmax_51 = tmpvar_53;
      highp vec3 tmpvar_54;
      tmpvar_54 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_2) / tmpvar_52);
      rbmin_50 = tmpvar_54;
      bvec3 tmpvar_55;
      tmpvar_55 = greaterThan (tmpvar_52, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_56;
      if (tmpvar_55.x) {
        tmpvar_56 = rbmax_51.x;
      } else {
        tmpvar_56 = rbmin_50.x;
      };
      mediump float tmpvar_57;
      if (tmpvar_55.y) {
        tmpvar_57 = rbmax_51.y;
      } else {
        tmpvar_57 = rbmin_50.y;
      };
      mediump float tmpvar_58;
      if (tmpvar_55.z) {
        tmpvar_58 = rbmax_51.z;
      } else {
        tmpvar_58 = rbmin_50.z;
      };
      worldPos_49 = (tmpvar_2 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_48 = (worldPos_49 + (tmpvar_52 * min (
        min (tmpvar_56, tmpvar_57)
      , tmpvar_58)));
    };
    tmpvar_29 = worldRefl_48;
    mediump vec4 hdr_59;
    hdr_59 = tmpvar_17;
    mediump vec4 tmpvar_60;
    tmpvar_60.xyz = worldRefl_48;
    tmpvar_60.w = ((tmpvar_20 * (1.7 - 
      (0.7 * tmpvar_20)
    )) * 6.0);
    lowp vec4 tmpvar_61;
    tmpvar_61 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_48, tmpvar_60.w);
    mediump vec4 tmpvar_62;
    tmpvar_62 = tmpvar_61;
    mediump vec3 tmpvar_63;
    tmpvar_63 = ((hdr_59.x * (
      (hdr_59.w * (tmpvar_62.w - 1.0))
     + 1.0)) * tmpvar_62.xyz);
    highp vec3 tmpvar_64;
    tmpvar_64 = mix (tmpvar_63, tmpvar_47, unity_SpecCube0_BoxMin.www);
    specular_31 = tmpvar_64;
  } else {
    specular_31 = tmpvar_47;
  };
  tmpvar_26 = (specular_31 * occlusion_15);
  highp vec3 viewDir_65;
  viewDir_65 = -(tmpvar_11);
  mediump vec3 color_66;
  mediump float surfaceReduction_67;
  highp float specularTerm_68;
  mediump float diffuseTerm_69;
  mediump float nv_70;
  highp float tmpvar_71;
  highp float smoothness_72;
  smoothness_72 = tmpvar_5;
  tmpvar_71 = (1.0 - smoothness_72);
  highp vec3 tmpvar_73;
  highp vec3 inVec_74;
  inVec_74 = (_WorldSpaceLightPos0.xyz + viewDir_65);
  tmpvar_73 = (inVec_74 * inversesqrt(max (0.001, 
    dot (inVec_74, inVec_74)
  )));
  highp float tmpvar_75;
  tmpvar_75 = abs(dot (tmpvar_10, viewDir_65));
  nv_70 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_77;
  tmpvar_77 = clamp (dot (tmpvar_10, tmpvar_73), 0.0, 1.0);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_73), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  mediump float tmpvar_80;
  mediump float NdotL_81;
  NdotL_81 = tmpvar_76;
  mediump float perceptualRoughness_82;
  perceptualRoughness_82 = tmpvar_71;
  mediump float tmpvar_83;
  tmpvar_83 = (0.5 + ((2.0 * tmpvar_78) * (tmpvar_78 * perceptualRoughness_82)));
  mediump float x_84;
  x_84 = (1.0 - NdotL_81);
  mediump float x_85;
  x_85 = (1.0 - nv_70);
  tmpvar_80 = ((1.0 + (
    (tmpvar_83 - 1.0)
   * 
    ((x_84 * x_84) * ((x_84 * x_84) * x_84))
  )) * (1.0 + (
    (tmpvar_83 - 1.0)
   * 
    ((x_85 * x_85) * ((x_85 * x_85) * x_85))
  )));
  highp float tmpvar_86;
  tmpvar_86 = (tmpvar_80 * tmpvar_76);
  diffuseTerm_69 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = max ((tmpvar_71 * tmpvar_71), 0.002);
  highp float NdotV_88;
  NdotV_88 = nv_70;
  highp float tmpvar_89;
  tmpvar_89 = (tmpvar_87 * tmpvar_87);
  highp float tmpvar_90;
  tmpvar_90 = (((
    (tmpvar_77 * tmpvar_89)
   - tmpvar_77) * tmpvar_77) + 1.0);
  highp float tmpvar_91;
  tmpvar_91 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_76 * (
        (NdotV_88 * (1.0 - tmpvar_87))
       + tmpvar_87)) + (NdotV_88 * (
        (tmpvar_76 * (1.0 - tmpvar_87))
       + tmpvar_87))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_89)
     / 
      ((tmpvar_90 * tmpvar_90) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_76));
  specularTerm_68 = tmpvar_91;
  surfaceReduction_67 = (1.0 - ((0.28 * tmpvar_87) * tmpvar_71));
  bvec3 tmpvar_92;
  tmpvar_92 = bvec3(tmpvar_8);
  bool tmpvar_93;
  tmpvar_93 = any(tmpvar_92);
  highp float tmpvar_94;
  if (tmpvar_93) {
    tmpvar_94 = 1.0;
  } else {
    tmpvar_94 = 0.0;
  };
  specularTerm_68 = (tmpvar_91 * tmpvar_94);
  mediump vec3 tmpvar_95;
  mediump float x_96;
  x_96 = (1.0 - tmpvar_78);
  tmpvar_95 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_96 * x_96)
   * 
    ((x_96 * x_96) * x_96)
  )));
  mediump float x_97;
  x_97 = (1.0 - nv_70);
  mediump vec3 tmpvar_98;
  tmpvar_98 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_97 * x_97) * (
    (x_97 * x_97)
   * x_97))));
  highp vec3 tmpvar_99;
  tmpvar_99 = (((tmpvar_7 * 
    (tmpvar_25 + (tmpvar_12 * diffuseTerm_69))
  ) + (
    (specularTerm_68 * tmpvar_12)
   * tmpvar_95)) + ((surfaceReduction_67 * tmpvar_26) * tmpvar_98));
  color_66 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.w = 1.0;
  tmpvar_100.xyz = color_66;
  c_1.w = tmpvar_100.w;
  lowp vec4 tmpvar_101;
  tmpvar_101 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_66 + (tmpvar_101.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_102;
  xlat_varoutput_102.xyz = c_1.xyz;
  xlat_varoutput_102.w = 1.0;
  gl_FragData[0] = xlat_varoutput_102;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat4;
lowp float u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bvec3 u_xlatb9;
mediump vec3 u_xlat16_10;
mediump vec4 u_xlat16_11;
bvec3 u_xlatb12;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec3 u_xlat15;
mediump vec3 u_xlat16_18;
vec3 u_xlat24;
mediump vec3 u_xlat16_24;
mediump float u_xlat16_25;
float u_xlat28;
float u_xlat29;
mediump float u_xlat16_39;
float u_xlat42;
bool u_xlatb42;
float u_xlat43;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
mediump float u_xlat16_47;
mediump float u_xlat16_52;
mediump float u_xlat16_53;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_45 = (-_OcclusionStrength) + 1.0;
    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;
    u_xlat4 = (-_Glossiness) + 1.0;
    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_18.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb42){
        u_xlat16_47 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
        u_xlat16_47 = inversesqrt(u_xlat16_47);
        u_xlat16_6.xyz = vec3(u_xlat16_47) * u_xlat16_5.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat16_6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat16_6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyzx).xyz;
        u_xlat16_10.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
        u_xlat16_10.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
        u_xlat16_10.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
        u_xlat16_47 = min(u_xlat16_10.y, u_xlat16_10.x);
        u_xlat16_47 = min(u_xlat16_10.z, u_xlat16_47);
        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat16_6.xyz * vec3(u_xlat16_47) + u_xlat7.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
        u_xlat16_7.xyz = u_xlat16_5.xyz;
    //ENDIF
    }
    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;
    u_xlat16_47 = u_xlat4 * u_xlat16_47;
    u_xlat16_47 = u_xlat16_47 * 6.0;
    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_47);
    u_xlat16_10.x = u_xlat10_6.w + -1.0;
    u_xlat16_10.x = unity_SpecCube0_HDR.w * u_xlat16_10.x + 1.0;
    u_xlat16_10.x = u_xlat16_10.x * unity_SpecCube0_HDR.x;
    u_xlat16_24.xyz = u_xlat10_6.xyz * u_xlat16_10.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb42){
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb42){
            u_xlat16_11.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
            u_xlat16_11.x = inversesqrt(u_xlat16_11.x);
            u_xlat16_11.xyz = u_xlat16_5.xyz * u_xlat16_11.xxx;
            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat8.xyz = u_xlat8.xyz / u_xlat16_11.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_11.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_11.xyzx).xyz;
            u_xlat16_13.x = (u_xlatb12.x) ? u_xlat8.x : u_xlat9.x;
            u_xlat16_13.y = (u_xlatb12.y) ? u_xlat8.y : u_xlat9.y;
            u_xlat16_13.z = (u_xlatb12.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat16_53 = min(u_xlat16_13.y, u_xlat16_13.x);
            u_xlat16_53 = min(u_xlat16_13.z, u_xlat16_53);
            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat16_11.xyz * vec3(u_xlat16_53) + u_xlat8.xyz;
            u_xlat16_5.xyz = u_xlat5.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat16_5.xyz, u_xlat16_47);
        u_xlat16_11.x = u_xlat10_5.w + -1.0;
        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;
        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;
        u_xlat16_11.xyz = u_xlat10_5.xyz * u_xlat16_11.xxx;
        u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat10_6.xyz + (-u_xlat16_11.xyz);
        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_8.xyz + u_xlat16_11.xyz;
        u_xlat16_24.xyz = u_xlat24.xyz;
    //ENDIF
    }
    u_xlat16_10.xyz = vec3(u_xlat16_45) * u_xlat16_24.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat8.xyz = vec3(u_xlat42) * u_xlat8.xyz;
    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_52 = u_xlat14 + u_xlat14;
    u_xlat16_52 = u_xlat14 * u_xlat16_52;
    u_xlat16_52 = u_xlat16_52 * u_xlat4 + -0.5;
    u_xlat16_11.x = (-u_xlat1.x) + 1.0;
    u_xlat16_25 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_25;
    u_xlat16_11.x = u_xlat16_52 * u_xlat16_11.x + 1.0;
    u_xlat16_25 = -abs(u_xlat42) + 1.0;
    u_xlat16_39 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_39;
    u_xlat16_52 = u_xlat16_52 * u_xlat16_25 + 1.0;
    u_xlat16_52 = u_xlat16_52 * u_xlat16_11.x;
    u_xlat28 = u_xlat1.x * u_xlat16_52;
    u_xlat15.x = u_xlat4 * u_xlat4;
    u_xlat15.x = max(u_xlat15.x, 0.00200000009);
    u_xlat29 = (-u_xlat15.x) + 1.0;
    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;
    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;
    u_xlat42 = abs(u_xlat42) * u_xlat29;
    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat29 = u_xlat15.x * u_xlat15.x;
    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);
    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;
    u_xlat29 = u_xlat29 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat29 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat42;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat42 = u_xlat15.x * u_xlat4;
    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;
    u_xlat16_52 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_52!=0.0);
#else
    u_xlatb1 = u_xlat16_52!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_44 = (-u_xlat16_44) + 1.0;
    u_xlat16_44 = u_xlat16_44 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
    u_xlat16_11.xzw = vec3(u_xlat28) * _LightColor0.xyz;
    u_xlat16_11.xzw = u_xlat16_18.xyz * vec3(u_xlat16_45) + u_xlat16_11.xzw;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat16_45 = (-u_xlat14) + 1.0;
    u_xlat16_52 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_52 = u_xlat16_52 * u_xlat16_52;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_52;
    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_11.xzw + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_10.xyz * vec3(u_xlat42);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);
    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat10_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// Stats: 175 math, 4 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_17;
  mediump vec4 ambientOrLightmapUV_19;
  ambientOrLightmapUV_19.w = 0.0;
  mediump vec3 x1_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = (normalWorld_18.xyzz * normalWorld_18.yzzx);
  x1_20.x = dot (unity_SHBr, tmpvar_21);
  x1_20.y = dot (unity_SHBg, tmpvar_21);
  x1_20.z = dot (unity_SHBb, tmpvar_21);
  ambientOrLightmapUV_19.xyz = (x1_20 + (unity_SHC.xyz * (
    (normalWorld_18.x * normalWorld_18.x)
   - 
    (normalWorld_18.y * normalWorld_18.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_19;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  highp vec3 tmpvar_2;
  tmpvar_2.x = xlv_TEXCOORD2.w;
  tmpvar_2.y = xlv_TEXCOORD2_1.w;
  tmpvar_2.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float occ_13;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_13 = tmpvar_14;
  mediump float occlusion_15;
  occlusion_15 = ((1.0 - _OcclusionStrength) + (occ_13 * _OcclusionStrength));
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_16 = unity_SpecCube0_HDR;
  tmpvar_17 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_18;
  worldViewDir_18 = -(tmpvar_11);
  mediump vec3 Normal_19;
  Normal_19 = tmpvar_10;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_5;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec3 I_23;
  I_23 = -(worldViewDir_18);
  mediump vec3 normalWorld_24;
  normalWorld_24 = tmpvar_10;
  mediump vec3 tmpvar_25;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_24;
  mediump vec3 x_28;
  x_28.x = dot (unity_SHAr, tmpvar_27);
  x_28.y = dot (unity_SHAg, tmpvar_27);
  x_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_25 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_28)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_15);
  tmpvar_26 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (I_23 - (2.0 * (
    dot (Normal_19, I_23)
   * Normal_19)));
  mediump vec3 originalReflUVW_30;
  mediump vec3 specular_31;
  originalReflUVW_30 = tmpvar_29;
  mediump vec3 worldRefl_32;
  worldRefl_32 = tmpvar_29;
  highp vec3 worldPos_33;
  worldPos_33 = tmpvar_2;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_34;
    mediump vec3 rbmax_35;
    mediump vec3 tmpvar_36;
    tmpvar_36 = normalize(tmpvar_29);
    highp vec3 tmpvar_37;
    tmpvar_37 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_2) / tmpvar_36);
    rbmax_35 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_2) / tmpvar_36);
    rbmin_34 = tmpvar_38;
    bvec3 tmpvar_39;
    tmpvar_39 = greaterThan (tmpvar_36, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_40;
    if (tmpvar_39.x) {
      tmpvar_40 = rbmax_35.x;
    } else {
      tmpvar_40 = rbmin_34.x;
    };
    mediump float tmpvar_41;
    if (tmpvar_39.y) {
      tmpvar_41 = rbmax_35.y;
    } else {
      tmpvar_41 = rbmin_34.y;
    };
    mediump float tmpvar_42;
    if (tmpvar_39.z) {
      tmpvar_42 = rbmax_35.z;
    } else {
      tmpvar_42 = rbmin_34.z;
    };
    worldPos_33 = (tmpvar_2 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_32 = (worldPos_33 + (tmpvar_36 * min (
      min (tmpvar_40, tmpvar_41)
    , tmpvar_42)));
  };
  tmpvar_29 = worldRefl_32;
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_16;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = worldRefl_32;
  tmpvar_44.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_32, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((hdr_43.x * (
    (hdr_43.w * (tmpvar_46.w - 1.0))
   + 1.0)) * tmpvar_46.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_48;
    worldRefl_48 = originalReflUVW_30;
    highp vec3 worldPos_49;
    worldPos_49 = tmpvar_2;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_50;
      mediump vec3 rbmax_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(originalReflUVW_30);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_2) / tmpvar_52);
      rbmax_51 = tmpvar_53;
      highp vec3 tmpvar_54;
      tmpvar_54 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_2) / tmpvar_52);
      rbmin_50 = tmpvar_54;
      bvec3 tmpvar_55;
      tmpvar_55 = greaterThan (tmpvar_52, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_56;
      if (tmpvar_55.x) {
        tmpvar_56 = rbmax_51.x;
      } else {
        tmpvar_56 = rbmin_50.x;
      };
      mediump float tmpvar_57;
      if (tmpvar_55.y) {
        tmpvar_57 = rbmax_51.y;
      } else {
        tmpvar_57 = rbmin_50.y;
      };
      mediump float tmpvar_58;
      if (tmpvar_55.z) {
        tmpvar_58 = rbmax_51.z;
      } else {
        tmpvar_58 = rbmin_50.z;
      };
      worldPos_49 = (tmpvar_2 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_48 = (worldPos_49 + (tmpvar_52 * min (
        min (tmpvar_56, tmpvar_57)
      , tmpvar_58)));
    };
    tmpvar_29 = worldRefl_48;
    mediump vec4 hdr_59;
    hdr_59 = tmpvar_17;
    mediump vec4 tmpvar_60;
    tmpvar_60.xyz = worldRefl_48;
    tmpvar_60.w = ((tmpvar_20 * (1.7 - 
      (0.7 * tmpvar_20)
    )) * 6.0);
    lowp vec4 tmpvar_61;
    tmpvar_61 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_48, tmpvar_60.w);
    mediump vec4 tmpvar_62;
    tmpvar_62 = tmpvar_61;
    mediump vec3 tmpvar_63;
    tmpvar_63 = ((hdr_59.x * (
      (hdr_59.w * (tmpvar_62.w - 1.0))
     + 1.0)) * tmpvar_62.xyz);
    highp vec3 tmpvar_64;
    tmpvar_64 = mix (tmpvar_63, tmpvar_47, unity_SpecCube0_BoxMin.www);
    specular_31 = tmpvar_64;
  } else {
    specular_31 = tmpvar_47;
  };
  tmpvar_26 = (specular_31 * occlusion_15);
  highp vec3 viewDir_65;
  viewDir_65 = -(tmpvar_11);
  mediump vec3 color_66;
  mediump float surfaceReduction_67;
  highp float specularTerm_68;
  mediump float diffuseTerm_69;
  mediump float nv_70;
  highp float tmpvar_71;
  highp float smoothness_72;
  smoothness_72 = tmpvar_5;
  tmpvar_71 = (1.0 - smoothness_72);
  highp vec3 tmpvar_73;
  highp vec3 inVec_74;
  inVec_74 = (_WorldSpaceLightPos0.xyz + viewDir_65);
  tmpvar_73 = (inVec_74 * inversesqrt(max (0.001, 
    dot (inVec_74, inVec_74)
  )));
  highp float tmpvar_75;
  tmpvar_75 = abs(dot (tmpvar_10, viewDir_65));
  nv_70 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_77;
  tmpvar_77 = clamp (dot (tmpvar_10, tmpvar_73), 0.0, 1.0);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_73), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  mediump float tmpvar_80;
  mediump float NdotL_81;
  NdotL_81 = tmpvar_76;
  mediump float perceptualRoughness_82;
  perceptualRoughness_82 = tmpvar_71;
  mediump float tmpvar_83;
  tmpvar_83 = (0.5 + ((2.0 * tmpvar_78) * (tmpvar_78 * perceptualRoughness_82)));
  mediump float x_84;
  x_84 = (1.0 - NdotL_81);
  mediump float x_85;
  x_85 = (1.0 - nv_70);
  tmpvar_80 = ((1.0 + (
    (tmpvar_83 - 1.0)
   * 
    ((x_84 * x_84) * ((x_84 * x_84) * x_84))
  )) * (1.0 + (
    (tmpvar_83 - 1.0)
   * 
    ((x_85 * x_85) * ((x_85 * x_85) * x_85))
  )));
  highp float tmpvar_86;
  tmpvar_86 = (tmpvar_80 * tmpvar_76);
  diffuseTerm_69 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = max ((tmpvar_71 * tmpvar_71), 0.002);
  highp float NdotV_88;
  NdotV_88 = nv_70;
  highp float tmpvar_89;
  tmpvar_89 = (tmpvar_87 * tmpvar_87);
  highp float tmpvar_90;
  tmpvar_90 = (((
    (tmpvar_77 * tmpvar_89)
   - tmpvar_77) * tmpvar_77) + 1.0);
  highp float tmpvar_91;
  tmpvar_91 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_76 * (
        (NdotV_88 * (1.0 - tmpvar_87))
       + tmpvar_87)) + (NdotV_88 * (
        (tmpvar_76 * (1.0 - tmpvar_87))
       + tmpvar_87))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_89)
     / 
      ((tmpvar_90 * tmpvar_90) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_76));
  specularTerm_68 = tmpvar_91;
  surfaceReduction_67 = (1.0 - ((0.28 * tmpvar_87) * tmpvar_71));
  bvec3 tmpvar_92;
  tmpvar_92 = bvec3(tmpvar_8);
  bool tmpvar_93;
  tmpvar_93 = any(tmpvar_92);
  highp float tmpvar_94;
  if (tmpvar_93) {
    tmpvar_94 = 1.0;
  } else {
    tmpvar_94 = 0.0;
  };
  specularTerm_68 = (tmpvar_91 * tmpvar_94);
  mediump vec3 tmpvar_95;
  mediump float x_96;
  x_96 = (1.0 - tmpvar_78);
  tmpvar_95 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_96 * x_96)
   * 
    ((x_96 * x_96) * x_96)
  )));
  mediump float x_97;
  x_97 = (1.0 - nv_70);
  mediump vec3 tmpvar_98;
  tmpvar_98 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_97 * x_97) * (
    (x_97 * x_97)
   * x_97))));
  highp vec3 tmpvar_99;
  tmpvar_99 = (((tmpvar_7 * 
    (tmpvar_25 + (tmpvar_12 * diffuseTerm_69))
  ) + (
    (specularTerm_68 * tmpvar_12)
   * tmpvar_95)) + ((surfaceReduction_67 * tmpvar_26) * tmpvar_98));
  color_66 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.w = 1.0;
  tmpvar_100.xyz = color_66;
  c_1.w = tmpvar_100.w;
  c_1.xyz = color_66;
  mediump vec4 xlat_varoutput_101;
  xlat_varoutput_101.xyz = c_1.xyz;
  xlat_varoutput_101.w = 1.0;
  gl_FragData[0] = xlat_varoutput_101;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat4;
lowp float u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bvec3 u_xlatb9;
mediump vec3 u_xlat16_10;
mediump vec4 u_xlat16_11;
bvec3 u_xlatb12;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec3 u_xlat15;
mediump vec3 u_xlat16_18;
vec3 u_xlat24;
mediump vec3 u_xlat16_24;
mediump float u_xlat16_25;
float u_xlat28;
float u_xlat29;
mediump float u_xlat16_39;
float u_xlat42;
bool u_xlatb42;
float u_xlat43;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
mediump float u_xlat16_47;
mediump float u_xlat16_52;
mediump float u_xlat16_53;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_45 = (-_OcclusionStrength) + 1.0;
    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;
    u_xlat4 = (-_Glossiness) + 1.0;
    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_18.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb42){
        u_xlat16_47 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
        u_xlat16_47 = inversesqrt(u_xlat16_47);
        u_xlat16_6.xyz = vec3(u_xlat16_47) * u_xlat16_5.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat16_6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat16_6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyzx).xyz;
        u_xlat16_10.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
        u_xlat16_10.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
        u_xlat16_10.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
        u_xlat16_47 = min(u_xlat16_10.y, u_xlat16_10.x);
        u_xlat16_47 = min(u_xlat16_10.z, u_xlat16_47);
        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat16_6.xyz * vec3(u_xlat16_47) + u_xlat7.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
        u_xlat16_7.xyz = u_xlat16_5.xyz;
    //ENDIF
    }
    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;
    u_xlat16_47 = u_xlat4 * u_xlat16_47;
    u_xlat16_47 = u_xlat16_47 * 6.0;
    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_47);
    u_xlat16_10.x = u_xlat10_6.w + -1.0;
    u_xlat16_10.x = unity_SpecCube0_HDR.w * u_xlat16_10.x + 1.0;
    u_xlat16_10.x = u_xlat16_10.x * unity_SpecCube0_HDR.x;
    u_xlat16_24.xyz = u_xlat10_6.xyz * u_xlat16_10.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb42){
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb42){
            u_xlat16_11.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
            u_xlat16_11.x = inversesqrt(u_xlat16_11.x);
            u_xlat16_11.xyz = u_xlat16_5.xyz * u_xlat16_11.xxx;
            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat8.xyz = u_xlat8.xyz / u_xlat16_11.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_11.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_11.xyzx).xyz;
            u_xlat16_13.x = (u_xlatb12.x) ? u_xlat8.x : u_xlat9.x;
            u_xlat16_13.y = (u_xlatb12.y) ? u_xlat8.y : u_xlat9.y;
            u_xlat16_13.z = (u_xlatb12.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat16_53 = min(u_xlat16_13.y, u_xlat16_13.x);
            u_xlat16_53 = min(u_xlat16_13.z, u_xlat16_53);
            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat16_11.xyz * vec3(u_xlat16_53) + u_xlat8.xyz;
            u_xlat16_5.xyz = u_xlat5.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat16_5.xyz, u_xlat16_47);
        u_xlat16_11.x = u_xlat10_5.w + -1.0;
        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;
        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;
        u_xlat16_11.xyz = u_xlat10_5.xyz * u_xlat16_11.xxx;
        u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat10_6.xyz + (-u_xlat16_11.xyz);
        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_8.xyz + u_xlat16_11.xyz;
        u_xlat16_24.xyz = u_xlat24.xyz;
    //ENDIF
    }
    u_xlat16_10.xyz = vec3(u_xlat16_45) * u_xlat16_24.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat8.xyz = vec3(u_xlat42) * u_xlat8.xyz;
    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_52 = u_xlat14 + u_xlat14;
    u_xlat16_52 = u_xlat14 * u_xlat16_52;
    u_xlat16_52 = u_xlat16_52 * u_xlat4 + -0.5;
    u_xlat16_11.x = (-u_xlat1.x) + 1.0;
    u_xlat16_25 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_25;
    u_xlat16_11.x = u_xlat16_52 * u_xlat16_11.x + 1.0;
    u_xlat16_25 = -abs(u_xlat42) + 1.0;
    u_xlat16_39 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_39;
    u_xlat16_52 = u_xlat16_52 * u_xlat16_25 + 1.0;
    u_xlat16_52 = u_xlat16_52 * u_xlat16_11.x;
    u_xlat28 = u_xlat1.x * u_xlat16_52;
    u_xlat15.x = u_xlat4 * u_xlat4;
    u_xlat15.x = max(u_xlat15.x, 0.00200000009);
    u_xlat29 = (-u_xlat15.x) + 1.0;
    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;
    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;
    u_xlat42 = abs(u_xlat42) * u_xlat29;
    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat29 = u_xlat15.x * u_xlat15.x;
    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);
    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;
    u_xlat29 = u_xlat29 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat29 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat42;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat42 = u_xlat15.x * u_xlat4;
    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;
    u_xlat16_52 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_52!=0.0);
#else
    u_xlatb1 = u_xlat16_52!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_44 = (-u_xlat16_44) + 1.0;
    u_xlat16_44 = u_xlat16_44 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
    u_xlat16_11.xzw = vec3(u_xlat28) * _LightColor0.xyz;
    u_xlat16_11.xzw = u_xlat16_18.xyz * vec3(u_xlat16_45) + u_xlat16_11.xzw;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat16_45 = (-u_xlat14) + 1.0;
    u_xlat16_52 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_52 = u_xlat16_52 * u_xlat16_52;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_52;
    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_11.xzw + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_10.xyz * vec3(u_xlat42);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);
    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN _EMISSION 
-- Vertex shader for "gles":
// Stats: 177 math, 6 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_9.zw;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = o_17;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  mediump float tmpvar_10;
  tmpvar_10 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_8 = (tmpvar_7 * tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_3 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - tmpvar_3), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_14 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  atten_2 = tmpvar_20;
  mediump float occ_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_21 = tmpvar_22;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump float occlusion_24;
  occlusion_24 = ((1.0 - _OcclusionStrength) + (occ_21 * _OcclusionStrength));
  highp vec4 tmpvar_25;
  highp vec4 tmpvar_26;
  tmpvar_25 = unity_SpecCube0_HDR;
  tmpvar_26 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_27;
  worldViewDir_27 = -(tmpvar_12);
  mediump vec3 Normal_28;
  Normal_28 = tmpvar_11;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  tmpvar_29 = tmpvar_30;
  mediump vec3 I_32;
  I_32 = -(worldViewDir_27);
  mediump vec3 tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_33 = (tmpvar_13 * atten_23);
  tmpvar_34 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_35;
  tmpvar_35 = (I_32 - (2.0 * (
    dot (Normal_28, I_32)
   * Normal_28)));
  mediump vec3 originalReflUVW_36;
  mediump vec3 specular_37;
  originalReflUVW_36 = tmpvar_35;
  mediump vec3 worldRefl_38;
  worldRefl_38 = tmpvar_35;
  highp vec3 worldPos_39;
  worldPos_39 = tmpvar_3;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_40;
    mediump vec3 rbmax_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = normalize(tmpvar_35);
    highp vec3 tmpvar_43;
    tmpvar_43 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_3) / tmpvar_42);
    rbmax_41 = tmpvar_43;
    highp vec3 tmpvar_44;
    tmpvar_44 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_3) / tmpvar_42);
    rbmin_40 = tmpvar_44;
    bvec3 tmpvar_45;
    tmpvar_45 = greaterThan (tmpvar_42, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_46;
    if (tmpvar_45.x) {
      tmpvar_46 = rbmax_41.x;
    } else {
      tmpvar_46 = rbmin_40.x;
    };
    mediump float tmpvar_47;
    if (tmpvar_45.y) {
      tmpvar_47 = rbmax_41.y;
    } else {
      tmpvar_47 = rbmin_40.y;
    };
    mediump float tmpvar_48;
    if (tmpvar_45.z) {
      tmpvar_48 = rbmax_41.z;
    } else {
      tmpvar_48 = rbmin_40.z;
    };
    worldPos_39 = (tmpvar_3 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_38 = (worldPos_39 + (tmpvar_42 * min (
      min (tmpvar_46, tmpvar_47)
    , tmpvar_48)));
  };
  tmpvar_35 = worldRefl_38;
  mediump vec4 hdr_49;
  hdr_49 = tmpvar_25;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = worldRefl_38;
  tmpvar_50.w = ((tmpvar_29 * (1.7 - 
    (0.7 * tmpvar_29)
  )) * 6.0);
  lowp vec4 tmpvar_51;
  tmpvar_51 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_38, tmpvar_50.w);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec3 tmpvar_53;
  tmpvar_53 = ((hdr_49.x * (
    (hdr_49.w * (tmpvar_52.w - 1.0))
   + 1.0)) * tmpvar_52.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_54;
    worldRefl_54 = originalReflUVW_36;
    highp vec3 worldPos_55;
    worldPos_55 = tmpvar_3;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_56;
      mediump vec3 rbmax_57;
      mediump vec3 tmpvar_58;
      tmpvar_58 = normalize(originalReflUVW_36);
      highp vec3 tmpvar_59;
      tmpvar_59 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_3) / tmpvar_58);
      rbmax_57 = tmpvar_59;
      highp vec3 tmpvar_60;
      tmpvar_60 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_3) / tmpvar_58);
      rbmin_56 = tmpvar_60;
      bvec3 tmpvar_61;
      tmpvar_61 = greaterThan (tmpvar_58, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_62;
      if (tmpvar_61.x) {
        tmpvar_62 = rbmax_57.x;
      } else {
        tmpvar_62 = rbmin_56.x;
      };
      mediump float tmpvar_63;
      if (tmpvar_61.y) {
        tmpvar_63 = rbmax_57.y;
      } else {
        tmpvar_63 = rbmin_56.y;
      };
      mediump float tmpvar_64;
      if (tmpvar_61.z) {
        tmpvar_64 = rbmax_57.z;
      } else {
        tmpvar_64 = rbmin_56.z;
      };
      worldPos_55 = (tmpvar_3 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_54 = (worldPos_55 + (tmpvar_58 * min (
        min (tmpvar_62, tmpvar_63)
      , tmpvar_64)));
    };
    tmpvar_35 = worldRefl_54;
    mediump vec4 hdr_65;
    hdr_65 = tmpvar_26;
    mediump vec4 tmpvar_66;
    tmpvar_66.xyz = worldRefl_54;
    tmpvar_66.w = ((tmpvar_29 * (1.7 - 
      (0.7 * tmpvar_29)
    )) * 6.0);
    lowp vec4 tmpvar_67;
    tmpvar_67 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_54, tmpvar_66.w);
    mediump vec4 tmpvar_68;
    tmpvar_68 = tmpvar_67;
    mediump vec3 tmpvar_69;
    tmpvar_69 = ((hdr_65.x * (
      (hdr_65.w * (tmpvar_68.w - 1.0))
     + 1.0)) * tmpvar_68.xyz);
    highp vec3 tmpvar_70;
    tmpvar_70 = mix (tmpvar_69, tmpvar_53, unity_SpecCube0_BoxMin.www);
    specular_37 = tmpvar_70;
  } else {
    specular_37 = tmpvar_53;
  };
  tmpvar_34 = (specular_37 * occlusion_24);
  highp vec3 viewDir_71;
  viewDir_71 = -(tmpvar_12);
  mediump vec3 color_72;
  mediump float surfaceReduction_73;
  highp float specularTerm_74;
  mediump float diffuseTerm_75;
  mediump float nv_76;
  highp float tmpvar_77;
  highp float smoothness_78;
  smoothness_78 = tmpvar_6;
  tmpvar_77 = (1.0 - smoothness_78);
  highp vec3 tmpvar_79;
  highp vec3 inVec_80;
  inVec_80 = (_WorldSpaceLightPos0.xyz + viewDir_71);
  tmpvar_79 = (inVec_80 * inversesqrt(max (0.001, 
    dot (inVec_80, inVec_80)
  )));
  highp float tmpvar_81;
  tmpvar_81 = abs(dot (tmpvar_11, viewDir_71));
  nv_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (tmpvar_11, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_11, tmpvar_79), 0.0, 1.0);
  mediump float tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_79), 0.0, 1.0);
  tmpvar_84 = tmpvar_85;
  mediump float tmpvar_86;
  mediump float NdotL_87;
  NdotL_87 = tmpvar_82;
  mediump float perceptualRoughness_88;
  perceptualRoughness_88 = tmpvar_77;
  mediump float tmpvar_89;
  tmpvar_89 = (0.5 + ((2.0 * tmpvar_84) * (tmpvar_84 * perceptualRoughness_88)));
  mediump float x_90;
  x_90 = (1.0 - NdotL_87);
  mediump float x_91;
  x_91 = (1.0 - nv_76);
  tmpvar_86 = ((1.0 + (
    (tmpvar_89 - 1.0)
   * 
    ((x_90 * x_90) * ((x_90 * x_90) * x_90))
  )) * (1.0 + (
    (tmpvar_89 - 1.0)
   * 
    ((x_91 * x_91) * ((x_91 * x_91) * x_91))
  )));
  highp float tmpvar_92;
  tmpvar_92 = (tmpvar_86 * tmpvar_82);
  diffuseTerm_75 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = max ((tmpvar_77 * tmpvar_77), 0.002);
  highp float NdotV_94;
  NdotV_94 = nv_76;
  highp float tmpvar_95;
  tmpvar_95 = (tmpvar_93 * tmpvar_93);
  highp float tmpvar_96;
  tmpvar_96 = (((
    (tmpvar_83 * tmpvar_95)
   - tmpvar_83) * tmpvar_83) + 1.0);
  highp float tmpvar_97;
  tmpvar_97 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_82 * (
        (NdotV_94 * (1.0 - tmpvar_93))
       + tmpvar_93)) + (NdotV_94 * (
        (tmpvar_82 * (1.0 - tmpvar_93))
       + tmpvar_93))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_95)
     / 
      ((tmpvar_96 * tmpvar_96) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_82));
  specularTerm_74 = tmpvar_97;
  surfaceReduction_73 = (1.0 - ((0.28 * tmpvar_93) * tmpvar_77));
  bvec3 tmpvar_98;
  tmpvar_98 = bvec3(tmpvar_9);
  bool tmpvar_99;
  tmpvar_99 = any(tmpvar_98);
  highp float tmpvar_100;
  if (tmpvar_99) {
    tmpvar_100 = 1.0;
  } else {
    tmpvar_100 = 0.0;
  };
  specularTerm_74 = (tmpvar_97 * tmpvar_100);
  mediump vec3 tmpvar_101;
  mediump float x_102;
  x_102 = (1.0 - tmpvar_84);
  tmpvar_101 = (tmpvar_9 + ((1.0 - tmpvar_9) * (
    (x_102 * x_102)
   * 
    ((x_102 * x_102) * x_102)
  )));
  mediump float x_103;
  x_103 = (1.0 - nv_76);
  mediump vec3 tmpvar_104;
  tmpvar_104 = mix (tmpvar_9, vec3(clamp ((mg_5.y + 
    (1.0 - tmpvar_10)
  ), 0.0, 1.0)), vec3(((x_103 * x_103) * (
    (x_103 * x_103)
   * x_103))));
  highp vec3 tmpvar_105;
  tmpvar_105 = (((tmpvar_8 * 
    (tmpvar_33 * diffuseTerm_75)
  ) + (
    (specularTerm_74 * tmpvar_33)
   * tmpvar_101)) + ((surfaceReduction_73 * tmpvar_34) * tmpvar_104));
  color_72 = tmpvar_105;
  mediump vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = color_72;
  c_1.w = tmpvar_106.w;
  lowp vec4 tmpvar_107;
  tmpvar_107 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_72 + (tmpvar_107.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_108;
  xlat_varoutput_108.xyz = c_1.xyz;
  xlat_varoutput_108.w = 1.0;
  gl_FragData[0] = xlat_varoutput_108;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bvec3 u_xlatb9;
mediump vec3 u_xlat16_10;
bvec3 u_xlatb11;
mediump vec3 u_xlat16_12;
float u_xlat13;
float u_xlat14;
vec3 u_xlat19;
mediump vec3 u_xlat16_19;
float u_xlat26;
float u_xlat27;
float u_xlat39;
float u_xlat40;
lowp float u_xlat10_40;
mediump float u_xlat16_41;
mediump float u_xlat16_42;
mediump float u_xlat16_45;
mediump float u_xlat16_46;
mediump float u_xlat16_47;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = (-u_xlat40) + u_xlat4.x;
    u_xlat40 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat40;
    u_xlat40 = u_xlat40 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat40 = min(max(u_xlat40, 0.0), 1.0);
#else
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4.x = texture(_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat16_42 = u_xlat40 + u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_42 = min(max(u_xlat16_42, 0.0), 1.0);
#else
    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);
#endif
    u_xlat10_40 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;
    u_xlat16_6.x = u_xlat10_40 * _OcclusionStrength + u_xlat16_6.x;
    u_xlat40 = (-_Glossiness) + 1.0;
    u_xlat16_19.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;
    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat1.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb4){
        u_xlat16_42 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);
        u_xlat16_42 = inversesqrt(u_xlat16_42);
        u_xlat16_8.xyz = vec3(u_xlat16_42) * u_xlat16_19.xyz;
        u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat4.xyz = u_xlat4.xyz / u_xlat16_8.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_8.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyzx).xyz;
        u_xlat16_10.x = (u_xlatb9.x) ? u_xlat4.x : u_xlat5.x;
        u_xlat16_10.y = (u_xlatb9.y) ? u_xlat4.y : u_xlat5.y;
        u_xlat16_10.z = (u_xlatb9.z) ? u_xlat4.z : u_xlat5.z;
        u_xlat16_42 = min(u_xlat16_10.y, u_xlat16_10.x);
        u_xlat16_42 = min(u_xlat16_10.z, u_xlat16_42);
        u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat4.xyz = u_xlat16_8.xyz * vec3(u_xlat16_42) + u_xlat4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_4.xyz = u_xlat16_19.xyz;
    //ENDIF
    }
    u_xlat16_42 = (-u_xlat40) * 0.699999988 + 1.70000005;
    u_xlat16_42 = u_xlat40 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * 6.0;
    u_xlat10_4 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_42);
    u_xlat16_46 = u_xlat10_4.w + -1.0;
    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;
    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_46);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb5 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb5 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb5){
            u_xlat16_47 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);
            u_xlat16_47 = inversesqrt(u_xlat16_47);
            u_xlat16_10.xyz = u_xlat16_19.xyz * vec3(u_xlat16_47);
            u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat5.xyz = u_xlat5.xyz / u_xlat16_10.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_10.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_10.xyzx).xyz;
            u_xlat16_12.x = (u_xlatb11.x) ? u_xlat5.x : u_xlat9.x;
            u_xlat16_12.y = (u_xlatb11.y) ? u_xlat5.y : u_xlat9.y;
            u_xlat16_12.z = (u_xlatb11.z) ? u_xlat5.z : u_xlat9.z;
            u_xlat16_47 = min(u_xlat16_12.y, u_xlat16_12.x);
            u_xlat16_47 = min(u_xlat16_12.z, u_xlat16_47);
            u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat19.xyz = u_xlat16_10.xyz * vec3(u_xlat16_47) + u_xlat5.xyz;
            u_xlat16_19.xyz = u_xlat19.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat16_19.xyz, u_xlat16_42);
        u_xlat16_42 = u_xlat10_5.w + -1.0;
        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;
        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;
        u_xlat16_19.xyz = u_xlat10_5.xyz * vec3(u_xlat16_42);
        u_xlat16_5.xyz = vec3(u_xlat16_46) * u_xlat10_4.xyz + (-u_xlat16_19.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_19.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;
    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;
    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_42 = u_xlat13 + u_xlat13;
    u_xlat16_42 = u_xlat13 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;
    u_xlat16_45 = (-u_xlat1.x) + 1.0;
    u_xlat16_46 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_46;
    u_xlat16_45 = u_xlat16_42 * u_xlat16_45 + 1.0;
    u_xlat16_46 = -abs(u_xlat39) + 1.0;
    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_46 + 1.0;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_45;
    u_xlat26 = u_xlat1.x * u_xlat16_42;
    u_xlat14 = u_xlat40 * u_xlat40;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat27 = (-u_xlat14) + 1.0;
    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;
    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;
    u_xlat39 = abs(u_xlat39) * u_xlat27;
    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat27 = u_xlat14 * u_xlat14;
    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);
    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;
    u_xlat27 = u_xlat27 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat27 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat39;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat39 = u_xlat14 * u_xlat40;
    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;
    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_42!=0.0);
#else
    u_xlatb1 = u_xlat16_42!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_41 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_41 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_42 = (-u_xlat13) + 1.0;
    u_xlat16_45 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_45;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat39);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);
    u_xlat16_2.xyz = vec3(u_xlat16_46) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat10_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// Stats: 175 math, 5 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_9.zw;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = o_17;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  mediump float tmpvar_10;
  tmpvar_10 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_8 = (tmpvar_7 * tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_3 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - tmpvar_3), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_14 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  atten_2 = tmpvar_20;
  mediump float occ_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_21 = tmpvar_22;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump float occlusion_24;
  occlusion_24 = ((1.0 - _OcclusionStrength) + (occ_21 * _OcclusionStrength));
  highp vec4 tmpvar_25;
  highp vec4 tmpvar_26;
  tmpvar_25 = unity_SpecCube0_HDR;
  tmpvar_26 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_27;
  worldViewDir_27 = -(tmpvar_12);
  mediump vec3 Normal_28;
  Normal_28 = tmpvar_11;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  tmpvar_29 = tmpvar_30;
  mediump vec3 I_32;
  I_32 = -(worldViewDir_27);
  mediump vec3 tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_33 = (tmpvar_13 * atten_23);
  tmpvar_34 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_35;
  tmpvar_35 = (I_32 - (2.0 * (
    dot (Normal_28, I_32)
   * Normal_28)));
  mediump vec3 originalReflUVW_36;
  mediump vec3 specular_37;
  originalReflUVW_36 = tmpvar_35;
  mediump vec3 worldRefl_38;
  worldRefl_38 = tmpvar_35;
  highp vec3 worldPos_39;
  worldPos_39 = tmpvar_3;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_40;
    mediump vec3 rbmax_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = normalize(tmpvar_35);
    highp vec3 tmpvar_43;
    tmpvar_43 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_3) / tmpvar_42);
    rbmax_41 = tmpvar_43;
    highp vec3 tmpvar_44;
    tmpvar_44 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_3) / tmpvar_42);
    rbmin_40 = tmpvar_44;
    bvec3 tmpvar_45;
    tmpvar_45 = greaterThan (tmpvar_42, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_46;
    if (tmpvar_45.x) {
      tmpvar_46 = rbmax_41.x;
    } else {
      tmpvar_46 = rbmin_40.x;
    };
    mediump float tmpvar_47;
    if (tmpvar_45.y) {
      tmpvar_47 = rbmax_41.y;
    } else {
      tmpvar_47 = rbmin_40.y;
    };
    mediump float tmpvar_48;
    if (tmpvar_45.z) {
      tmpvar_48 = rbmax_41.z;
    } else {
      tmpvar_48 = rbmin_40.z;
    };
    worldPos_39 = (tmpvar_3 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_38 = (worldPos_39 + (tmpvar_42 * min (
      min (tmpvar_46, tmpvar_47)
    , tmpvar_48)));
  };
  tmpvar_35 = worldRefl_38;
  mediump vec4 hdr_49;
  hdr_49 = tmpvar_25;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = worldRefl_38;
  tmpvar_50.w = ((tmpvar_29 * (1.7 - 
    (0.7 * tmpvar_29)
  )) * 6.0);
  lowp vec4 tmpvar_51;
  tmpvar_51 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_38, tmpvar_50.w);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec3 tmpvar_53;
  tmpvar_53 = ((hdr_49.x * (
    (hdr_49.w * (tmpvar_52.w - 1.0))
   + 1.0)) * tmpvar_52.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_54;
    worldRefl_54 = originalReflUVW_36;
    highp vec3 worldPos_55;
    worldPos_55 = tmpvar_3;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_56;
      mediump vec3 rbmax_57;
      mediump vec3 tmpvar_58;
      tmpvar_58 = normalize(originalReflUVW_36);
      highp vec3 tmpvar_59;
      tmpvar_59 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_3) / tmpvar_58);
      rbmax_57 = tmpvar_59;
      highp vec3 tmpvar_60;
      tmpvar_60 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_3) / tmpvar_58);
      rbmin_56 = tmpvar_60;
      bvec3 tmpvar_61;
      tmpvar_61 = greaterThan (tmpvar_58, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_62;
      if (tmpvar_61.x) {
        tmpvar_62 = rbmax_57.x;
      } else {
        tmpvar_62 = rbmin_56.x;
      };
      mediump float tmpvar_63;
      if (tmpvar_61.y) {
        tmpvar_63 = rbmax_57.y;
      } else {
        tmpvar_63 = rbmin_56.y;
      };
      mediump float tmpvar_64;
      if (tmpvar_61.z) {
        tmpvar_64 = rbmax_57.z;
      } else {
        tmpvar_64 = rbmin_56.z;
      };
      worldPos_55 = (tmpvar_3 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_54 = (worldPos_55 + (tmpvar_58 * min (
        min (tmpvar_62, tmpvar_63)
      , tmpvar_64)));
    };
    tmpvar_35 = worldRefl_54;
    mediump vec4 hdr_65;
    hdr_65 = tmpvar_26;
    mediump vec4 tmpvar_66;
    tmpvar_66.xyz = worldRefl_54;
    tmpvar_66.w = ((tmpvar_29 * (1.7 - 
      (0.7 * tmpvar_29)
    )) * 6.0);
    lowp vec4 tmpvar_67;
    tmpvar_67 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_54, tmpvar_66.w);
    mediump vec4 tmpvar_68;
    tmpvar_68 = tmpvar_67;
    mediump vec3 tmpvar_69;
    tmpvar_69 = ((hdr_65.x * (
      (hdr_65.w * (tmpvar_68.w - 1.0))
     + 1.0)) * tmpvar_68.xyz);
    highp vec3 tmpvar_70;
    tmpvar_70 = mix (tmpvar_69, tmpvar_53, unity_SpecCube0_BoxMin.www);
    specular_37 = tmpvar_70;
  } else {
    specular_37 = tmpvar_53;
  };
  tmpvar_34 = (specular_37 * occlusion_24);
  highp vec3 viewDir_71;
  viewDir_71 = -(tmpvar_12);
  mediump vec3 color_72;
  mediump float surfaceReduction_73;
  highp float specularTerm_74;
  mediump float diffuseTerm_75;
  mediump float nv_76;
  highp float tmpvar_77;
  highp float smoothness_78;
  smoothness_78 = tmpvar_6;
  tmpvar_77 = (1.0 - smoothness_78);
  highp vec3 tmpvar_79;
  highp vec3 inVec_80;
  inVec_80 = (_WorldSpaceLightPos0.xyz + viewDir_71);
  tmpvar_79 = (inVec_80 * inversesqrt(max (0.001, 
    dot (inVec_80, inVec_80)
  )));
  highp float tmpvar_81;
  tmpvar_81 = abs(dot (tmpvar_11, viewDir_71));
  nv_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (tmpvar_11, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_11, tmpvar_79), 0.0, 1.0);
  mediump float tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_79), 0.0, 1.0);
  tmpvar_84 = tmpvar_85;
  mediump float tmpvar_86;
  mediump float NdotL_87;
  NdotL_87 = tmpvar_82;
  mediump float perceptualRoughness_88;
  perceptualRoughness_88 = tmpvar_77;
  mediump float tmpvar_89;
  tmpvar_89 = (0.5 + ((2.0 * tmpvar_84) * (tmpvar_84 * perceptualRoughness_88)));
  mediump float x_90;
  x_90 = (1.0 - NdotL_87);
  mediump float x_91;
  x_91 = (1.0 - nv_76);
  tmpvar_86 = ((1.0 + (
    (tmpvar_89 - 1.0)
   * 
    ((x_90 * x_90) * ((x_90 * x_90) * x_90))
  )) * (1.0 + (
    (tmpvar_89 - 1.0)
   * 
    ((x_91 * x_91) * ((x_91 * x_91) * x_91))
  )));
  highp float tmpvar_92;
  tmpvar_92 = (tmpvar_86 * tmpvar_82);
  diffuseTerm_75 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = max ((tmpvar_77 * tmpvar_77), 0.002);
  highp float NdotV_94;
  NdotV_94 = nv_76;
  highp float tmpvar_95;
  tmpvar_95 = (tmpvar_93 * tmpvar_93);
  highp float tmpvar_96;
  tmpvar_96 = (((
    (tmpvar_83 * tmpvar_95)
   - tmpvar_83) * tmpvar_83) + 1.0);
  highp float tmpvar_97;
  tmpvar_97 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_82 * (
        (NdotV_94 * (1.0 - tmpvar_93))
       + tmpvar_93)) + (NdotV_94 * (
        (tmpvar_82 * (1.0 - tmpvar_93))
       + tmpvar_93))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_95)
     / 
      ((tmpvar_96 * tmpvar_96) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_82));
  specularTerm_74 = tmpvar_97;
  surfaceReduction_73 = (1.0 - ((0.28 * tmpvar_93) * tmpvar_77));
  bvec3 tmpvar_98;
  tmpvar_98 = bvec3(tmpvar_9);
  bool tmpvar_99;
  tmpvar_99 = any(tmpvar_98);
  highp float tmpvar_100;
  if (tmpvar_99) {
    tmpvar_100 = 1.0;
  } else {
    tmpvar_100 = 0.0;
  };
  specularTerm_74 = (tmpvar_97 * tmpvar_100);
  mediump vec3 tmpvar_101;
  mediump float x_102;
  x_102 = (1.0 - tmpvar_84);
  tmpvar_101 = (tmpvar_9 + ((1.0 - tmpvar_9) * (
    (x_102 * x_102)
   * 
    ((x_102 * x_102) * x_102)
  )));
  mediump float x_103;
  x_103 = (1.0 - nv_76);
  mediump vec3 tmpvar_104;
  tmpvar_104 = mix (tmpvar_9, vec3(clamp ((mg_5.y + 
    (1.0 - tmpvar_10)
  ), 0.0, 1.0)), vec3(((x_103 * x_103) * (
    (x_103 * x_103)
   * x_103))));
  highp vec3 tmpvar_105;
  tmpvar_105 = (((tmpvar_8 * 
    (tmpvar_33 * diffuseTerm_75)
  ) + (
    (specularTerm_74 * tmpvar_33)
   * tmpvar_101)) + ((surfaceReduction_73 * tmpvar_34) * tmpvar_104));
  color_72 = tmpvar_105;
  mediump vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = color_72;
  c_1.w = tmpvar_106.w;
  c_1.xyz = color_72;
  mediump vec4 xlat_varoutput_107;
  xlat_varoutput_107.xyz = c_1.xyz;
  xlat_varoutput_107.w = 1.0;
  gl_FragData[0] = xlat_varoutput_107;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bvec3 u_xlatb9;
mediump vec3 u_xlat16_10;
bvec3 u_xlatb11;
mediump vec3 u_xlat16_12;
float u_xlat13;
float u_xlat14;
vec3 u_xlat19;
mediump vec3 u_xlat16_19;
float u_xlat26;
float u_xlat27;
float u_xlat39;
float u_xlat40;
lowp float u_xlat10_40;
mediump float u_xlat16_41;
mediump float u_xlat16_42;
mediump float u_xlat16_45;
mediump float u_xlat16_46;
mediump float u_xlat16_47;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = (-u_xlat40) + u_xlat4.x;
    u_xlat40 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat40;
    u_xlat40 = u_xlat40 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat40 = min(max(u_xlat40, 0.0), 1.0);
#else
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4.x = texture(_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat16_42 = u_xlat40 + u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_42 = min(max(u_xlat16_42, 0.0), 1.0);
#else
    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);
#endif
    u_xlat10_40 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;
    u_xlat16_6.x = u_xlat10_40 * _OcclusionStrength + u_xlat16_6.x;
    u_xlat40 = (-_Glossiness) + 1.0;
    u_xlat16_19.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;
    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat1.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb4){
        u_xlat16_42 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);
        u_xlat16_42 = inversesqrt(u_xlat16_42);
        u_xlat16_8.xyz = vec3(u_xlat16_42) * u_xlat16_19.xyz;
        u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat4.xyz = u_xlat4.xyz / u_xlat16_8.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_8.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyzx).xyz;
        u_xlat16_10.x = (u_xlatb9.x) ? u_xlat4.x : u_xlat5.x;
        u_xlat16_10.y = (u_xlatb9.y) ? u_xlat4.y : u_xlat5.y;
        u_xlat16_10.z = (u_xlatb9.z) ? u_xlat4.z : u_xlat5.z;
        u_xlat16_42 = min(u_xlat16_10.y, u_xlat16_10.x);
        u_xlat16_42 = min(u_xlat16_10.z, u_xlat16_42);
        u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat4.xyz = u_xlat16_8.xyz * vec3(u_xlat16_42) + u_xlat4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_4.xyz = u_xlat16_19.xyz;
    //ENDIF
    }
    u_xlat16_42 = (-u_xlat40) * 0.699999988 + 1.70000005;
    u_xlat16_42 = u_xlat40 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * 6.0;
    u_xlat10_4 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_42);
    u_xlat16_46 = u_xlat10_4.w + -1.0;
    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;
    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_46);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb5 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb5 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb5){
            u_xlat16_47 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);
            u_xlat16_47 = inversesqrt(u_xlat16_47);
            u_xlat16_10.xyz = u_xlat16_19.xyz * vec3(u_xlat16_47);
            u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat5.xyz = u_xlat5.xyz / u_xlat16_10.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_10.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_10.xyzx).xyz;
            u_xlat16_12.x = (u_xlatb11.x) ? u_xlat5.x : u_xlat9.x;
            u_xlat16_12.y = (u_xlatb11.y) ? u_xlat5.y : u_xlat9.y;
            u_xlat16_12.z = (u_xlatb11.z) ? u_xlat5.z : u_xlat9.z;
            u_xlat16_47 = min(u_xlat16_12.y, u_xlat16_12.x);
            u_xlat16_47 = min(u_xlat16_12.z, u_xlat16_47);
            u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat19.xyz = u_xlat16_10.xyz * vec3(u_xlat16_47) + u_xlat5.xyz;
            u_xlat16_19.xyz = u_xlat19.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat16_19.xyz, u_xlat16_42);
        u_xlat16_42 = u_xlat10_5.w + -1.0;
        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;
        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;
        u_xlat16_19.xyz = u_xlat10_5.xyz * vec3(u_xlat16_42);
        u_xlat16_5.xyz = vec3(u_xlat16_46) * u_xlat10_4.xyz + (-u_xlat16_19.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_19.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;
    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;
    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_42 = u_xlat13 + u_xlat13;
    u_xlat16_42 = u_xlat13 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;
    u_xlat16_45 = (-u_xlat1.x) + 1.0;
    u_xlat16_46 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_46;
    u_xlat16_45 = u_xlat16_42 * u_xlat16_45 + 1.0;
    u_xlat16_46 = -abs(u_xlat39) + 1.0;
    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_46 + 1.0;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_45;
    u_xlat26 = u_xlat1.x * u_xlat16_42;
    u_xlat14 = u_xlat40 * u_xlat40;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat27 = (-u_xlat14) + 1.0;
    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;
    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;
    u_xlat39 = abs(u_xlat39) * u_xlat27;
    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat27 = u_xlat14 * u_xlat14;
    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);
    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;
    u_xlat27 = u_xlat27 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat27 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat39;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat39 = u_xlat14 * u_xlat40;
    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;
    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_42!=0.0);
#else
    u_xlatb1 = u_xlat16_42!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_41 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_41 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_42 = (-u_xlat13) + 1.0;
    u_xlat16_45 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_45;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat39);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);
    u_xlat16_2.xyz = vec3(u_xlat16_46) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN LIGHTPROBE_SH _EMISSION 
-- Vertex shader for "gles":
// Stats: 189 math, 6 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_9.zw;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_17;
  mediump vec4 ambientOrLightmapUV_22;
  ambientOrLightmapUV_22.w = 0.0;
  mediump vec3 x1_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normalWorld_21.xyzz * normalWorld_21.yzzx);
  x1_23.x = dot (unity_SHBr, tmpvar_24);
  x1_23.y = dot (unity_SHBg, tmpvar_24);
  x1_23.z = dot (unity_SHBb, tmpvar_24);
  ambientOrLightmapUV_22.xyz = (x1_23 + (unity_SHC.xyz * (
    (normalWorld_21.x * normalWorld_21.x)
   - 
    (normalWorld_21.y * normalWorld_21.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_22;
  xlv_TEXCOORD6 = o_18;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  mediump float tmpvar_10;
  tmpvar_10 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_8 = (tmpvar_7 * tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_3 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - tmpvar_3), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_14 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  atten_2 = tmpvar_20;
  mediump float occ_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_21 = tmpvar_22;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump float occlusion_24;
  occlusion_24 = ((1.0 - _OcclusionStrength) + (occ_21 * _OcclusionStrength));
  highp vec4 tmpvar_25;
  highp vec4 tmpvar_26;
  tmpvar_25 = unity_SpecCube0_HDR;
  tmpvar_26 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_27;
  worldViewDir_27 = -(tmpvar_12);
  mediump vec3 Normal_28;
  Normal_28 = tmpvar_11;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  tmpvar_29 = tmpvar_30;
  mediump vec3 I_32;
  I_32 = -(worldViewDir_27);
  mediump vec3 normalWorld_33;
  normalWorld_33 = tmpvar_11;
  mediump vec3 tmpvar_34;
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = normalWorld_33;
  mediump vec3 x_38;
  x_38.x = dot (unity_SHAr, tmpvar_37);
  x_38.y = dot (unity_SHAg, tmpvar_37);
  x_38.z = dot (unity_SHAb, tmpvar_37);
  tmpvar_34 = (tmpvar_13 * atten_23);
  tmpvar_35 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_38)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_24);
  tmpvar_36 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (I_32 - (2.0 * (
    dot (Normal_28, I_32)
   * Normal_28)));
  mediump vec3 originalReflUVW_40;
  mediump vec3 specular_41;
  originalReflUVW_40 = tmpvar_39;
  mediump vec3 worldRefl_42;
  worldRefl_42 = tmpvar_39;
  highp vec3 worldPos_43;
  worldPos_43 = tmpvar_3;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_44;
    mediump vec3 rbmax_45;
    mediump vec3 tmpvar_46;
    tmpvar_46 = normalize(tmpvar_39);
    highp vec3 tmpvar_47;
    tmpvar_47 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_3) / tmpvar_46);
    rbmax_45 = tmpvar_47;
    highp vec3 tmpvar_48;
    tmpvar_48 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_3) / tmpvar_46);
    rbmin_44 = tmpvar_48;
    bvec3 tmpvar_49;
    tmpvar_49 = greaterThan (tmpvar_46, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_50;
    if (tmpvar_49.x) {
      tmpvar_50 = rbmax_45.x;
    } else {
      tmpvar_50 = rbmin_44.x;
    };
    mediump float tmpvar_51;
    if (tmpvar_49.y) {
      tmpvar_51 = rbmax_45.y;
    } else {
      tmpvar_51 = rbmin_44.y;
    };
    mediump float tmpvar_52;
    if (tmpvar_49.z) {
      tmpvar_52 = rbmax_45.z;
    } else {
      tmpvar_52 = rbmin_44.z;
    };
    worldPos_43 = (tmpvar_3 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_42 = (worldPos_43 + (tmpvar_46 * min (
      min (tmpvar_50, tmpvar_51)
    , tmpvar_52)));
  };
  tmpvar_39 = worldRefl_42;
  mediump vec4 hdr_53;
  hdr_53 = tmpvar_25;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = worldRefl_42;
  tmpvar_54.w = ((tmpvar_29 * (1.7 - 
    (0.7 * tmpvar_29)
  )) * 6.0);
  lowp vec4 tmpvar_55;
  tmpvar_55 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_42, tmpvar_54.w);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec3 tmpvar_57;
  tmpvar_57 = ((hdr_53.x * (
    (hdr_53.w * (tmpvar_56.w - 1.0))
   + 1.0)) * tmpvar_56.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_58;
    worldRefl_58 = originalReflUVW_40;
    highp vec3 worldPos_59;
    worldPos_59 = tmpvar_3;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_60;
      mediump vec3 rbmax_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(originalReflUVW_40);
      highp vec3 tmpvar_63;
      tmpvar_63 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_3) / tmpvar_62);
      rbmax_61 = tmpvar_63;
      highp vec3 tmpvar_64;
      tmpvar_64 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_3) / tmpvar_62);
      rbmin_60 = tmpvar_64;
      bvec3 tmpvar_65;
      tmpvar_65 = greaterThan (tmpvar_62, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_66;
      if (tmpvar_65.x) {
        tmpvar_66 = rbmax_61.x;
      } else {
        tmpvar_66 = rbmin_60.x;
      };
      mediump float tmpvar_67;
      if (tmpvar_65.y) {
        tmpvar_67 = rbmax_61.y;
      } else {
        tmpvar_67 = rbmin_60.y;
      };
      mediump float tmpvar_68;
      if (tmpvar_65.z) {
        tmpvar_68 = rbmax_61.z;
      } else {
        tmpvar_68 = rbmin_60.z;
      };
      worldPos_59 = (tmpvar_3 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_58 = (worldPos_59 + (tmpvar_62 * min (
        min (tmpvar_66, tmpvar_67)
      , tmpvar_68)));
    };
    tmpvar_39 = worldRefl_58;
    mediump vec4 hdr_69;
    hdr_69 = tmpvar_26;
    mediump vec4 tmpvar_70;
    tmpvar_70.xyz = worldRefl_58;
    tmpvar_70.w = ((tmpvar_29 * (1.7 - 
      (0.7 * tmpvar_29)
    )) * 6.0);
    lowp vec4 tmpvar_71;
    tmpvar_71 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_58, tmpvar_70.w);
    mediump vec4 tmpvar_72;
    tmpvar_72 = tmpvar_71;
    mediump vec3 tmpvar_73;
    tmpvar_73 = ((hdr_69.x * (
      (hdr_69.w * (tmpvar_72.w - 1.0))
     + 1.0)) * tmpvar_72.xyz);
    highp vec3 tmpvar_74;
    tmpvar_74 = mix (tmpvar_73, tmpvar_57, unity_SpecCube0_BoxMin.www);
    specular_41 = tmpvar_74;
  } else {
    specular_41 = tmpvar_57;
  };
  tmpvar_36 = (specular_41 * occlusion_24);
  highp vec3 viewDir_75;
  viewDir_75 = -(tmpvar_12);
  mediump vec3 color_76;
  mediump float surfaceReduction_77;
  highp float specularTerm_78;
  mediump float diffuseTerm_79;
  mediump float nv_80;
  highp float tmpvar_81;
  highp float smoothness_82;
  smoothness_82 = tmpvar_6;
  tmpvar_81 = (1.0 - smoothness_82);
  highp vec3 tmpvar_83;
  highp vec3 inVec_84;
  inVec_84 = (_WorldSpaceLightPos0.xyz + viewDir_75);
  tmpvar_83 = (inVec_84 * inversesqrt(max (0.001, 
    dot (inVec_84, inVec_84)
  )));
  highp float tmpvar_85;
  tmpvar_85 = abs(dot (tmpvar_11, viewDir_75));
  nv_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (tmpvar_11, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_87;
  tmpvar_87 = clamp (dot (tmpvar_11, tmpvar_83), 0.0, 1.0);
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_83), 0.0, 1.0);
  tmpvar_88 = tmpvar_89;
  mediump float tmpvar_90;
  mediump float NdotL_91;
  NdotL_91 = tmpvar_86;
  mediump float perceptualRoughness_92;
  perceptualRoughness_92 = tmpvar_81;
  mediump float tmpvar_93;
  tmpvar_93 = (0.5 + ((2.0 * tmpvar_88) * (tmpvar_88 * perceptualRoughness_92)));
  mediump float x_94;
  x_94 = (1.0 - NdotL_91);
  mediump float x_95;
  x_95 = (1.0 - nv_80);
  tmpvar_90 = ((1.0 + (
    (tmpvar_93 - 1.0)
   * 
    ((x_94 * x_94) * ((x_94 * x_94) * x_94))
  )) * (1.0 + (
    (tmpvar_93 - 1.0)
   * 
    ((x_95 * x_95) * ((x_95 * x_95) * x_95))
  )));
  highp float tmpvar_96;
  tmpvar_96 = (tmpvar_90 * tmpvar_86);
  diffuseTerm_79 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = max ((tmpvar_81 * tmpvar_81), 0.002);
  highp float NdotV_98;
  NdotV_98 = nv_80;
  highp float tmpvar_99;
  tmpvar_99 = (tmpvar_97 * tmpvar_97);
  highp float tmpvar_100;
  tmpvar_100 = (((
    (tmpvar_87 * tmpvar_99)
   - tmpvar_87) * tmpvar_87) + 1.0);
  highp float tmpvar_101;
  tmpvar_101 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_86 * (
        (NdotV_98 * (1.0 - tmpvar_97))
       + tmpvar_97)) + (NdotV_98 * (
        (tmpvar_86 * (1.0 - tmpvar_97))
       + tmpvar_97))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_99)
     / 
      ((tmpvar_100 * tmpvar_100) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_86));
  specularTerm_78 = tmpvar_101;
  surfaceReduction_77 = (1.0 - ((0.28 * tmpvar_97) * tmpvar_81));
  bvec3 tmpvar_102;
  tmpvar_102 = bvec3(tmpvar_9);
  bool tmpvar_103;
  tmpvar_103 = any(tmpvar_102);
  highp float tmpvar_104;
  if (tmpvar_103) {
    tmpvar_104 = 1.0;
  } else {
    tmpvar_104 = 0.0;
  };
  specularTerm_78 = (tmpvar_101 * tmpvar_104);
  mediump vec3 tmpvar_105;
  mediump float x_106;
  x_106 = (1.0 - tmpvar_88);
  tmpvar_105 = (tmpvar_9 + ((1.0 - tmpvar_9) * (
    (x_106 * x_106)
   * 
    ((x_106 * x_106) * x_106)
  )));
  mediump float x_107;
  x_107 = (1.0 - nv_80);
  mediump vec3 tmpvar_108;
  tmpvar_108 = mix (tmpvar_9, vec3(clamp ((mg_5.y + 
    (1.0 - tmpvar_10)
  ), 0.0, 1.0)), vec3(((x_107 * x_107) * (
    (x_107 * x_107)
   * x_107))));
  highp vec3 tmpvar_109;
  tmpvar_109 = (((tmpvar_8 * 
    (tmpvar_35 + (tmpvar_34 * diffuseTerm_79))
  ) + (
    (specularTerm_78 * tmpvar_34)
   * tmpvar_105)) + ((surfaceReduction_77 * tmpvar_36) * tmpvar_108));
  color_76 = tmpvar_109;
  mediump vec4 tmpvar_110;
  tmpvar_110.w = 1.0;
  tmpvar_110.xyz = color_76;
  c_1.w = tmpvar_110.w;
  lowp vec4 tmpvar_111;
  tmpvar_111 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_76 + (tmpvar_111.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_112;
  xlat_varoutput_112.xyz = c_1.xyz;
  xlat_varoutput_112.w = 1.0;
  gl_FragData[0] = xlat_varoutput_112;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bool u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
float u_xlat16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat16_2 = u_xlat1.y * u_xlat1.y;
    u_xlat16_2 = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp float u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
lowp vec4 u_xlat10_9;
vec3 u_xlat10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_11;
bvec3 u_xlatb12;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec3 u_xlat15;
vec3 u_xlat18;
mediump vec3 u_xlat16_18;
lowp float u_xlat10_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
mediump vec3 u_xlat16_22;
float u_xlat28;
float u_xlat29;
float u_xlat42;
bool u_xlatb42;
float u_xlat43;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
mediump float u_xlat16_49;
mediump float u_xlat16_50;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat18.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat18.x = dot(u_xlat18.xyz, u_xlat18.xyz);
    u_xlat18.x = sqrt(u_xlat18.x);
    u_xlat18.x = (-u_xlat4.x) + u_xlat18.x;
    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat18.x + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_18 = texture(_ShadowMapTexture, u_xlat18.xy).x;
    u_xlat16_45 = u_xlat4.x + u_xlat10_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_45 = min(max(u_xlat16_45, 0.0), 1.0);
#else
    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);
#endif
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;
    u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;
    u_xlat4.x = (-_Glossiness) + 1.0;
    u_xlat16_20.x = dot(u_xlat15.xyz, u_xlat0.xyz);
    u_xlat16_20.x = u_xlat16_20.x + u_xlat16_20.x;
    u_xlat16_20.xyz = u_xlat0.xyz * (-u_xlat16_20.xxx) + u_xlat15.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_45) * _LightColor0.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_18.xyz = log2(u_xlat16_8.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb42){
        u_xlat16_45 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
        u_xlat16_45 = inversesqrt(u_xlat16_45);
        u_xlat16_8.xyz = vec3(u_xlat16_45) * u_xlat16_20.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_8.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat16_8.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyzx).xyz;
        u_xlat16_11.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat9.x;
        u_xlat16_11.y = (u_xlatb10.y) ? u_xlat5.y : u_xlat9.y;
        u_xlat16_11.z = (u_xlatb10.z) ? u_xlat5.z : u_xlat9.z;
        u_xlat16_45 = min(u_xlat16_11.y, u_xlat16_11.x);
        u_xlat16_45 = min(u_xlat16_11.z, u_xlat16_45);
        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat5.xyz = u_xlat16_8.xyz * vec3(u_xlat16_45) + u_xlat5.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat16_20.xyz;
    //ENDIF
    }
    u_xlat16_45 = (-u_xlat4.x) * 0.699999988 + 1.70000005;
    u_xlat16_45 = u_xlat16_45 * u_xlat4.x;
    u_xlat16_45 = u_xlat16_45 * 6.0;
    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_45);
    u_xlat16_49 = u_xlat10_5.w + -1.0;
    u_xlat16_49 = unity_SpecCube0_HDR.w * u_xlat16_49 + 1.0;
    u_xlat16_49 = u_xlat16_49 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(u_xlat16_49);
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb42){
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb42){
            u_xlat16_50 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
            u_xlat16_50 = inversesqrt(u_xlat16_50);
            u_xlat16_11.xyz = u_xlat16_20.xyz * vec3(u_xlat16_50);
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_11.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat16_11.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_11.xyzx).xyz;
            u_xlat16_13.x = (u_xlatb12.x) ? u_xlat9.x : u_xlat10.x;
            u_xlat16_13.y = (u_xlatb12.y) ? u_xlat9.y : u_xlat10.y;
            u_xlat16_13.z = (u_xlatb12.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat16_50 = min(u_xlat16_13.y, u_xlat16_13.x);
            u_xlat16_50 = min(u_xlat16_13.z, u_xlat16_50);
            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat20.xyz = u_xlat16_11.xyz * vec3(u_xlat16_50) + u_xlat9.xyz;
            u_xlat16_20.xyz = u_xlat20.xyz;
        //ENDIF
        }
        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat16_20.xyz, u_xlat16_45);
        u_xlat16_45 = u_xlat10_9.w + -1.0;
        u_xlat16_45 = unity_SpecCube1_HDR.w * u_xlat16_45 + 1.0;
        u_xlat16_45 = u_xlat16_45 * unity_SpecCube1_HDR.x;
        u_xlat16_20.xyz = u_xlat10_9.xyz * vec3(u_xlat16_45);
        u_xlat16_9.xyz = vec3(u_xlat16_49) * u_xlat10_5.xyz + (-u_xlat16_20.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_9.xyz + u_xlat16_20.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_20.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat9.xyz = vec3(u_xlat42) * u_xlat9.xyz;
    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_45 = u_xlat14 + u_xlat14;
    u_xlat16_45 = u_xlat14 * u_xlat16_45;
    u_xlat16_45 = u_xlat16_45 * u_xlat4.x + -0.5;
    u_xlat16_49 = (-u_xlat1.x) + 1.0;
    u_xlat16_8.x = u_xlat16_49 * u_xlat16_49;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_8.x;
    u_xlat16_49 = u_xlat16_45 * u_xlat16_49 + 1.0;
    u_xlat16_8.x = -abs(u_xlat42) + 1.0;
    u_xlat16_22.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_22.x;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_8.x + 1.0;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_49;
    u_xlat28 = u_xlat1.x * u_xlat16_45;
    u_xlat15.x = u_xlat4.x * u_xlat4.x;
    u_xlat15.x = max(u_xlat15.x, 0.00200000009);
    u_xlat29 = (-u_xlat15.x) + 1.0;
    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;
    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;
    u_xlat42 = abs(u_xlat42) * u_xlat29;
    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat29 = u_xlat15.x * u_xlat15.x;
    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);
    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;
    u_xlat29 = u_xlat29 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat29 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat42;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat42 = u_xlat15.x * u_xlat4.x;
    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;
    u_xlat16_45 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_45!=0.0);
#else
    u_xlatb1 = u_xlat16_45!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_44 = (-u_xlat16_44) + 1.0;
    u_xlat16_44 = u_xlat16_44 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
    u_xlat16_22.xyz = vec3(u_xlat28) * u_xlat16_7.xyz;
    u_xlat16_22.xyz = u_xlat16_18.xyz * u_xlat16_6.xxx + u_xlat16_22.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_45 = (-u_xlat14) + 1.0;
    u_xlat16_6.x = u_xlat16_45 * u_xlat16_45;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_6.x;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_22.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_20.xyz * vec3(u_xlat42);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);
    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat10_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// Stats: 187 math, 5 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_9.zw;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_17;
  mediump vec4 ambientOrLightmapUV_22;
  ambientOrLightmapUV_22.w = 0.0;
  mediump vec3 x1_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normalWorld_21.xyzz * normalWorld_21.yzzx);
  x1_23.x = dot (unity_SHBr, tmpvar_24);
  x1_23.y = dot (unity_SHBg, tmpvar_24);
  x1_23.z = dot (unity_SHBb, tmpvar_24);
  ambientOrLightmapUV_22.xyz = (x1_23 + (unity_SHC.xyz * (
    (normalWorld_21.x * normalWorld_21.x)
   - 
    (normalWorld_21.y * normalWorld_21.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_22;
  xlv_TEXCOORD6 = o_18;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  mediump float tmpvar_10;
  tmpvar_10 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_8 = (tmpvar_7 * tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_3 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - tmpvar_3), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_14 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  atten_2 = tmpvar_20;
  mediump float occ_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_21 = tmpvar_22;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump float occlusion_24;
  occlusion_24 = ((1.0 - _OcclusionStrength) + (occ_21 * _OcclusionStrength));
  highp vec4 tmpvar_25;
  highp vec4 tmpvar_26;
  tmpvar_25 = unity_SpecCube0_HDR;
  tmpvar_26 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_27;
  worldViewDir_27 = -(tmpvar_12);
  mediump vec3 Normal_28;
  Normal_28 = tmpvar_11;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  tmpvar_29 = tmpvar_30;
  mediump vec3 I_32;
  I_32 = -(worldViewDir_27);
  mediump vec3 normalWorld_33;
  normalWorld_33 = tmpvar_11;
  mediump vec3 tmpvar_34;
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = normalWorld_33;
  mediump vec3 x_38;
  x_38.x = dot (unity_SHAr, tmpvar_37);
  x_38.y = dot (unity_SHAg, tmpvar_37);
  x_38.z = dot (unity_SHAb, tmpvar_37);
  tmpvar_34 = (tmpvar_13 * atten_23);
  tmpvar_35 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_38)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_24);
  tmpvar_36 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (I_32 - (2.0 * (
    dot (Normal_28, I_32)
   * Normal_28)));
  mediump vec3 originalReflUVW_40;
  mediump vec3 specular_41;
  originalReflUVW_40 = tmpvar_39;
  mediump vec3 worldRefl_42;
  worldRefl_42 = tmpvar_39;
  highp vec3 worldPos_43;
  worldPos_43 = tmpvar_3;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_44;
    mediump vec3 rbmax_45;
    mediump vec3 tmpvar_46;
    tmpvar_46 = normalize(tmpvar_39);
    highp vec3 tmpvar_47;
    tmpvar_47 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_3) / tmpvar_46);
    rbmax_45 = tmpvar_47;
    highp vec3 tmpvar_48;
    tmpvar_48 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_3) / tmpvar_46);
    rbmin_44 = tmpvar_48;
    bvec3 tmpvar_49;
    tmpvar_49 = greaterThan (tmpvar_46, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_50;
    if (tmpvar_49.x) {
      tmpvar_50 = rbmax_45.x;
    } else {
      tmpvar_50 = rbmin_44.x;
    };
    mediump float tmpvar_51;
    if (tmpvar_49.y) {
      tmpvar_51 = rbmax_45.y;
    } else {
      tmpvar_51 = rbmin_44.y;
    };
    mediump float tmpvar_52;
    if (tmpvar_49.z) {
      tmpvar_52 = rbmax_45.z;
    } else {
      tmpvar_52 = rbmin_44.z;
    };
    worldPos_43 = (tmpvar_3 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_42 = (worldPos_43 + (tmpvar_46 * min (
      min (tmpvar_50, tmpvar_51)
    , tmpvar_52)));
  };
  tmpvar_39 = worldRefl_42;
  mediump vec4 hdr_53;
  hdr_53 = tmpvar_25;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = worldRefl_42;
  tmpvar_54.w = ((tmpvar_29 * (1.7 - 
    (0.7 * tmpvar_29)
  )) * 6.0);
  lowp vec4 tmpvar_55;
  tmpvar_55 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_42, tmpvar_54.w);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec3 tmpvar_57;
  tmpvar_57 = ((hdr_53.x * (
    (hdr_53.w * (tmpvar_56.w - 1.0))
   + 1.0)) * tmpvar_56.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_58;
    worldRefl_58 = originalReflUVW_40;
    highp vec3 worldPos_59;
    worldPos_59 = tmpvar_3;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_60;
      mediump vec3 rbmax_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(originalReflUVW_40);
      highp vec3 tmpvar_63;
      tmpvar_63 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_3) / tmpvar_62);
      rbmax_61 = tmpvar_63;
      highp vec3 tmpvar_64;
      tmpvar_64 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_3) / tmpvar_62);
      rbmin_60 = tmpvar_64;
      bvec3 tmpvar_65;
      tmpvar_65 = greaterThan (tmpvar_62, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_66;
      if (tmpvar_65.x) {
        tmpvar_66 = rbmax_61.x;
      } else {
        tmpvar_66 = rbmin_60.x;
      };
      mediump float tmpvar_67;
      if (tmpvar_65.y) {
        tmpvar_67 = rbmax_61.y;
      } else {
        tmpvar_67 = rbmin_60.y;
      };
      mediump float tmpvar_68;
      if (tmpvar_65.z) {
        tmpvar_68 = rbmax_61.z;
      } else {
        tmpvar_68 = rbmin_60.z;
      };
      worldPos_59 = (tmpvar_3 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_58 = (worldPos_59 + (tmpvar_62 * min (
        min (tmpvar_66, tmpvar_67)
      , tmpvar_68)));
    };
    tmpvar_39 = worldRefl_58;
    mediump vec4 hdr_69;
    hdr_69 = tmpvar_26;
    mediump vec4 tmpvar_70;
    tmpvar_70.xyz = worldRefl_58;
    tmpvar_70.w = ((tmpvar_29 * (1.7 - 
      (0.7 * tmpvar_29)
    )) * 6.0);
    lowp vec4 tmpvar_71;
    tmpvar_71 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_58, tmpvar_70.w);
    mediump vec4 tmpvar_72;
    tmpvar_72 = tmpvar_71;
    mediump vec3 tmpvar_73;
    tmpvar_73 = ((hdr_69.x * (
      (hdr_69.w * (tmpvar_72.w - 1.0))
     + 1.0)) * tmpvar_72.xyz);
    highp vec3 tmpvar_74;
    tmpvar_74 = mix (tmpvar_73, tmpvar_57, unity_SpecCube0_BoxMin.www);
    specular_41 = tmpvar_74;
  } else {
    specular_41 = tmpvar_57;
  };
  tmpvar_36 = (specular_41 * occlusion_24);
  highp vec3 viewDir_75;
  viewDir_75 = -(tmpvar_12);
  mediump vec3 color_76;
  mediump float surfaceReduction_77;
  highp float specularTerm_78;
  mediump float diffuseTerm_79;
  mediump float nv_80;
  highp float tmpvar_81;
  highp float smoothness_82;
  smoothness_82 = tmpvar_6;
  tmpvar_81 = (1.0 - smoothness_82);
  highp vec3 tmpvar_83;
  highp vec3 inVec_84;
  inVec_84 = (_WorldSpaceLightPos0.xyz + viewDir_75);
  tmpvar_83 = (inVec_84 * inversesqrt(max (0.001, 
    dot (inVec_84, inVec_84)
  )));
  highp float tmpvar_85;
  tmpvar_85 = abs(dot (tmpvar_11, viewDir_75));
  nv_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (tmpvar_11, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_87;
  tmpvar_87 = clamp (dot (tmpvar_11, tmpvar_83), 0.0, 1.0);
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_83), 0.0, 1.0);
  tmpvar_88 = tmpvar_89;
  mediump float tmpvar_90;
  mediump float NdotL_91;
  NdotL_91 = tmpvar_86;
  mediump float perceptualRoughness_92;
  perceptualRoughness_92 = tmpvar_81;
  mediump float tmpvar_93;
  tmpvar_93 = (0.5 + ((2.0 * tmpvar_88) * (tmpvar_88 * perceptualRoughness_92)));
  mediump float x_94;
  x_94 = (1.0 - NdotL_91);
  mediump float x_95;
  x_95 = (1.0 - nv_80);
  tmpvar_90 = ((1.0 + (
    (tmpvar_93 - 1.0)
   * 
    ((x_94 * x_94) * ((x_94 * x_94) * x_94))
  )) * (1.0 + (
    (tmpvar_93 - 1.0)
   * 
    ((x_95 * x_95) * ((x_95 * x_95) * x_95))
  )));
  highp float tmpvar_96;
  tmpvar_96 = (tmpvar_90 * tmpvar_86);
  diffuseTerm_79 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = max ((tmpvar_81 * tmpvar_81), 0.002);
  highp float NdotV_98;
  NdotV_98 = nv_80;
  highp float tmpvar_99;
  tmpvar_99 = (tmpvar_97 * tmpvar_97);
  highp float tmpvar_100;
  tmpvar_100 = (((
    (tmpvar_87 * tmpvar_99)
   - tmpvar_87) * tmpvar_87) + 1.0);
  highp float tmpvar_101;
  tmpvar_101 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_86 * (
        (NdotV_98 * (1.0 - tmpvar_97))
       + tmpvar_97)) + (NdotV_98 * (
        (tmpvar_86 * (1.0 - tmpvar_97))
       + tmpvar_97))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_99)
     / 
      ((tmpvar_100 * tmpvar_100) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_86));
  specularTerm_78 = tmpvar_101;
  surfaceReduction_77 = (1.0 - ((0.28 * tmpvar_97) * tmpvar_81));
  bvec3 tmpvar_102;
  tmpvar_102 = bvec3(tmpvar_9);
  bool tmpvar_103;
  tmpvar_103 = any(tmpvar_102);
  highp float tmpvar_104;
  if (tmpvar_103) {
    tmpvar_104 = 1.0;
  } else {
    tmpvar_104 = 0.0;
  };
  specularTerm_78 = (tmpvar_101 * tmpvar_104);
  mediump vec3 tmpvar_105;
  mediump float x_106;
  x_106 = (1.0 - tmpvar_88);
  tmpvar_105 = (tmpvar_9 + ((1.0 - tmpvar_9) * (
    (x_106 * x_106)
   * 
    ((x_106 * x_106) * x_106)
  )));
  mediump float x_107;
  x_107 = (1.0 - nv_80);
  mediump vec3 tmpvar_108;
  tmpvar_108 = mix (tmpvar_9, vec3(clamp ((mg_5.y + 
    (1.0 - tmpvar_10)
  ), 0.0, 1.0)), vec3(((x_107 * x_107) * (
    (x_107 * x_107)
   * x_107))));
  highp vec3 tmpvar_109;
  tmpvar_109 = (((tmpvar_8 * 
    (tmpvar_35 + (tmpvar_34 * diffuseTerm_79))
  ) + (
    (specularTerm_78 * tmpvar_34)
   * tmpvar_105)) + ((surfaceReduction_77 * tmpvar_36) * tmpvar_108));
  color_76 = tmpvar_109;
  mediump vec4 tmpvar_110;
  tmpvar_110.w = 1.0;
  tmpvar_110.xyz = color_76;
  c_1.w = tmpvar_110.w;
  c_1.xyz = color_76;
  mediump vec4 xlat_varoutput_111;
  xlat_varoutput_111.xyz = c_1.xyz;
  xlat_varoutput_111.w = 1.0;
  gl_FragData[0] = xlat_varoutput_111;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bool u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
float u_xlat16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat16_2 = u_xlat1.y * u_xlat1.y;
    u_xlat16_2 = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp float u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
lowp vec4 u_xlat10_9;
vec3 u_xlat10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_11;
bvec3 u_xlatb12;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec3 u_xlat15;
vec3 u_xlat18;
mediump vec3 u_xlat16_18;
lowp float u_xlat10_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
mediump vec3 u_xlat16_22;
float u_xlat28;
float u_xlat29;
float u_xlat42;
bool u_xlatb42;
float u_xlat43;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
mediump float u_xlat16_49;
mediump float u_xlat16_50;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat18.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat18.x = dot(u_xlat18.xyz, u_xlat18.xyz);
    u_xlat18.x = sqrt(u_xlat18.x);
    u_xlat18.x = (-u_xlat4.x) + u_xlat18.x;
    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat18.x + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_18 = texture(_ShadowMapTexture, u_xlat18.xy).x;
    u_xlat16_45 = u_xlat4.x + u_xlat10_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_45 = min(max(u_xlat16_45, 0.0), 1.0);
#else
    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);
#endif
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;
    u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;
    u_xlat4.x = (-_Glossiness) + 1.0;
    u_xlat16_20.x = dot(u_xlat15.xyz, u_xlat0.xyz);
    u_xlat16_20.x = u_xlat16_20.x + u_xlat16_20.x;
    u_xlat16_20.xyz = u_xlat0.xyz * (-u_xlat16_20.xxx) + u_xlat15.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_45) * _LightColor0.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_18.xyz = log2(u_xlat16_8.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb42){
        u_xlat16_45 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
        u_xlat16_45 = inversesqrt(u_xlat16_45);
        u_xlat16_8.xyz = vec3(u_xlat16_45) * u_xlat16_20.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_8.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat16_8.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyzx).xyz;
        u_xlat16_11.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat9.x;
        u_xlat16_11.y = (u_xlatb10.y) ? u_xlat5.y : u_xlat9.y;
        u_xlat16_11.z = (u_xlatb10.z) ? u_xlat5.z : u_xlat9.z;
        u_xlat16_45 = min(u_xlat16_11.y, u_xlat16_11.x);
        u_xlat16_45 = min(u_xlat16_11.z, u_xlat16_45);
        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat5.xyz = u_xlat16_8.xyz * vec3(u_xlat16_45) + u_xlat5.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat16_20.xyz;
    //ENDIF
    }
    u_xlat16_45 = (-u_xlat4.x) * 0.699999988 + 1.70000005;
    u_xlat16_45 = u_xlat16_45 * u_xlat4.x;
    u_xlat16_45 = u_xlat16_45 * 6.0;
    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_45);
    u_xlat16_49 = u_xlat10_5.w + -1.0;
    u_xlat16_49 = unity_SpecCube0_HDR.w * u_xlat16_49 + 1.0;
    u_xlat16_49 = u_xlat16_49 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(u_xlat16_49);
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb42){
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb42){
            u_xlat16_50 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
            u_xlat16_50 = inversesqrt(u_xlat16_50);
            u_xlat16_11.xyz = u_xlat16_20.xyz * vec3(u_xlat16_50);
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_11.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat16_11.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_11.xyzx).xyz;
            u_xlat16_13.x = (u_xlatb12.x) ? u_xlat9.x : u_xlat10.x;
            u_xlat16_13.y = (u_xlatb12.y) ? u_xlat9.y : u_xlat10.y;
            u_xlat16_13.z = (u_xlatb12.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat16_50 = min(u_xlat16_13.y, u_xlat16_13.x);
            u_xlat16_50 = min(u_xlat16_13.z, u_xlat16_50);
            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat20.xyz = u_xlat16_11.xyz * vec3(u_xlat16_50) + u_xlat9.xyz;
            u_xlat16_20.xyz = u_xlat20.xyz;
        //ENDIF
        }
        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat16_20.xyz, u_xlat16_45);
        u_xlat16_45 = u_xlat10_9.w + -1.0;
        u_xlat16_45 = unity_SpecCube1_HDR.w * u_xlat16_45 + 1.0;
        u_xlat16_45 = u_xlat16_45 * unity_SpecCube1_HDR.x;
        u_xlat16_20.xyz = u_xlat10_9.xyz * vec3(u_xlat16_45);
        u_xlat16_9.xyz = vec3(u_xlat16_49) * u_xlat10_5.xyz + (-u_xlat16_20.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_9.xyz + u_xlat16_20.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_20.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat9.xyz = vec3(u_xlat42) * u_xlat9.xyz;
    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_45 = u_xlat14 + u_xlat14;
    u_xlat16_45 = u_xlat14 * u_xlat16_45;
    u_xlat16_45 = u_xlat16_45 * u_xlat4.x + -0.5;
    u_xlat16_49 = (-u_xlat1.x) + 1.0;
    u_xlat16_8.x = u_xlat16_49 * u_xlat16_49;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_8.x;
    u_xlat16_49 = u_xlat16_45 * u_xlat16_49 + 1.0;
    u_xlat16_8.x = -abs(u_xlat42) + 1.0;
    u_xlat16_22.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_22.x;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_8.x + 1.0;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_49;
    u_xlat28 = u_xlat1.x * u_xlat16_45;
    u_xlat15.x = u_xlat4.x * u_xlat4.x;
    u_xlat15.x = max(u_xlat15.x, 0.00200000009);
    u_xlat29 = (-u_xlat15.x) + 1.0;
    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;
    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;
    u_xlat42 = abs(u_xlat42) * u_xlat29;
    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat29 = u_xlat15.x * u_xlat15.x;
    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);
    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;
    u_xlat29 = u_xlat29 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat29 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat42;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat42 = u_xlat15.x * u_xlat4.x;
    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;
    u_xlat16_45 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_45!=0.0);
#else
    u_xlatb1 = u_xlat16_45!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_44 = (-u_xlat16_44) + 1.0;
    u_xlat16_44 = u_xlat16_44 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
    u_xlat16_22.xyz = vec3(u_xlat28) * u_xlat16_7.xyz;
    u_xlat16_22.xyz = u_xlat16_18.xyz * u_xlat16_6.xxx + u_xlat16_22.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_45 = (-u_xlat14) + 1.0;
    u_xlat16_6.x = u_xlat16_45 * u_xlat16_45;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_6.x;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_22.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_20.xyz * vec3(u_xlat42);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);
    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL _EMISSION 
-- Vertex shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL _EMISSION VERTEXLIGHT_ON 
-- Vertex shader for "gles":
// Stats: 165 math, 5 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  highp vec3 tmpvar_2;
  tmpvar_2.x = xlv_TEXCOORD2.w;
  tmpvar_2.y = xlv_TEXCOORD2_1.w;
  tmpvar_2.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float occ_13;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_13 = tmpvar_14;
  mediump float occlusion_15;
  occlusion_15 = ((1.0 - _OcclusionStrength) + (occ_13 * _OcclusionStrength));
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_16 = unity_SpecCube0_HDR;
  tmpvar_17 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_18;
  worldViewDir_18 = -(tmpvar_11);
  mediump vec3 Normal_19;
  Normal_19 = tmpvar_10;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_5;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec3 I_23;
  I_23 = -(worldViewDir_18);
  mediump vec3 tmpvar_24;
  tmpvar_24 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_25;
  tmpvar_25 = (I_23 - (2.0 * (
    dot (Normal_19, I_23)
   * Normal_19)));
  mediump vec3 originalReflUVW_26;
  mediump vec3 specular_27;
  originalReflUVW_26 = tmpvar_25;
  mediump vec3 worldRefl_28;
  worldRefl_28 = tmpvar_25;
  highp vec3 worldPos_29;
  worldPos_29 = tmpvar_2;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_30;
    mediump vec3 rbmax_31;
    mediump vec3 tmpvar_32;
    tmpvar_32 = normalize(tmpvar_25);
    highp vec3 tmpvar_33;
    tmpvar_33 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_2) / tmpvar_32);
    rbmax_31 = tmpvar_33;
    highp vec3 tmpvar_34;
    tmpvar_34 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_2) / tmpvar_32);
    rbmin_30 = tmpvar_34;
    bvec3 tmpvar_35;
    tmpvar_35 = greaterThan (tmpvar_32, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_36;
    if (tmpvar_35.x) {
      tmpvar_36 = rbmax_31.x;
    } else {
      tmpvar_36 = rbmin_30.x;
    };
    mediump float tmpvar_37;
    if (tmpvar_35.y) {
      tmpvar_37 = rbmax_31.y;
    } else {
      tmpvar_37 = rbmin_30.y;
    };
    mediump float tmpvar_38;
    if (tmpvar_35.z) {
      tmpvar_38 = rbmax_31.z;
    } else {
      tmpvar_38 = rbmin_30.z;
    };
    worldPos_29 = (tmpvar_2 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_28 = (worldPos_29 + (tmpvar_32 * min (
      min (tmpvar_36, tmpvar_37)
    , tmpvar_38)));
  };
  tmpvar_25 = worldRefl_28;
  mediump vec4 hdr_39;
  hdr_39 = tmpvar_16;
  mediump vec4 tmpvar_40;
  tmpvar_40.xyz = worldRefl_28;
  tmpvar_40.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_28, tmpvar_40.w);
  mediump vec4 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((hdr_39.x * (
    (hdr_39.w * (tmpvar_42.w - 1.0))
   + 1.0)) * tmpvar_42.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_44;
    worldRefl_44 = originalReflUVW_26;
    highp vec3 worldPos_45;
    worldPos_45 = tmpvar_2;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_46;
      mediump vec3 rbmax_47;
      mediump vec3 tmpvar_48;
      tmpvar_48 = normalize(originalReflUVW_26);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_2) / tmpvar_48);
      rbmax_47 = tmpvar_49;
      highp vec3 tmpvar_50;
      tmpvar_50 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_2) / tmpvar_48);
      rbmin_46 = tmpvar_50;
      bvec3 tmpvar_51;
      tmpvar_51 = greaterThan (tmpvar_48, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_52;
      if (tmpvar_51.x) {
        tmpvar_52 = rbmax_47.x;
      } else {
        tmpvar_52 = rbmin_46.x;
      };
      mediump float tmpvar_53;
      if (tmpvar_51.y) {
        tmpvar_53 = rbmax_47.y;
      } else {
        tmpvar_53 = rbmin_46.y;
      };
      mediump float tmpvar_54;
      if (tmpvar_51.z) {
        tmpvar_54 = rbmax_47.z;
      } else {
        tmpvar_54 = rbmin_46.z;
      };
      worldPos_45 = (tmpvar_2 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_44 = (worldPos_45 + (tmpvar_48 * min (
        min (tmpvar_52, tmpvar_53)
      , tmpvar_54)));
    };
    tmpvar_25 = worldRefl_44;
    mediump vec4 hdr_55;
    hdr_55 = tmpvar_17;
    mediump vec4 tmpvar_56;
    tmpvar_56.xyz = worldRefl_44;
    tmpvar_56.w = ((tmpvar_20 * (1.7 - 
      (0.7 * tmpvar_20)
    )) * 6.0);
    lowp vec4 tmpvar_57;
    tmpvar_57 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_44, tmpvar_56.w);
    mediump vec4 tmpvar_58;
    tmpvar_58 = tmpvar_57;
    mediump vec3 tmpvar_59;
    tmpvar_59 = ((hdr_55.x * (
      (hdr_55.w * (tmpvar_58.w - 1.0))
     + 1.0)) * tmpvar_58.xyz);
    highp vec3 tmpvar_60;
    tmpvar_60 = mix (tmpvar_59, tmpvar_43, unity_SpecCube0_BoxMin.www);
    specular_27 = tmpvar_60;
  } else {
    specular_27 = tmpvar_43;
  };
  tmpvar_24 = (specular_27 * occlusion_15);
  highp vec3 viewDir_61;
  viewDir_61 = -(tmpvar_11);
  mediump vec3 color_62;
  mediump float surfaceReduction_63;
  highp float specularTerm_64;
  mediump float diffuseTerm_65;
  mediump float nv_66;
  highp float tmpvar_67;
  highp float smoothness_68;
  smoothness_68 = tmpvar_5;
  tmpvar_67 = (1.0 - smoothness_68);
  highp vec3 tmpvar_69;
  highp vec3 inVec_70;
  inVec_70 = (_WorldSpaceLightPos0.xyz + viewDir_61);
  tmpvar_69 = (inVec_70 * inversesqrt(max (0.001, 
    dot (inVec_70, inVec_70)
  )));
  highp float tmpvar_71;
  tmpvar_71 = abs(dot (tmpvar_10, viewDir_61));
  nv_66 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_73;
  tmpvar_73 = clamp (dot (tmpvar_10, tmpvar_69), 0.0, 1.0);
  mediump float tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_69), 0.0, 1.0);
  tmpvar_74 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float NdotL_77;
  NdotL_77 = tmpvar_72;
  mediump float perceptualRoughness_78;
  perceptualRoughness_78 = tmpvar_67;
  mediump float tmpvar_79;
  tmpvar_79 = (0.5 + ((2.0 * tmpvar_74) * (tmpvar_74 * perceptualRoughness_78)));
  mediump float x_80;
  x_80 = (1.0 - NdotL_77);
  mediump float x_81;
  x_81 = (1.0 - nv_66);
  tmpvar_76 = ((1.0 + (
    (tmpvar_79 - 1.0)
   * 
    ((x_80 * x_80) * ((x_80 * x_80) * x_80))
  )) * (1.0 + (
    (tmpvar_79 - 1.0)
   * 
    ((x_81 * x_81) * ((x_81 * x_81) * x_81))
  )));
  highp float tmpvar_82;
  tmpvar_82 = (tmpvar_76 * tmpvar_72);
  diffuseTerm_65 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = max ((tmpvar_67 * tmpvar_67), 0.002);
  highp float NdotV_84;
  NdotV_84 = nv_66;
  highp float tmpvar_85;
  tmpvar_85 = (tmpvar_83 * tmpvar_83);
  highp float tmpvar_86;
  tmpvar_86 = (((
    (tmpvar_73 * tmpvar_85)
   - tmpvar_73) * tmpvar_73) + 1.0);
  highp float tmpvar_87;
  tmpvar_87 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_72 * (
        (NdotV_84 * (1.0 - tmpvar_83))
       + tmpvar_83)) + (NdotV_84 * (
        (tmpvar_72 * (1.0 - tmpvar_83))
       + tmpvar_83))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_85)
     / 
      ((tmpvar_86 * tmpvar_86) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_72));
  specularTerm_64 = tmpvar_87;
  surfaceReduction_63 = (1.0 - ((0.28 * tmpvar_83) * tmpvar_67));
  bvec3 tmpvar_88;
  tmpvar_88 = bvec3(tmpvar_8);
  bool tmpvar_89;
  tmpvar_89 = any(tmpvar_88);
  highp float tmpvar_90;
  if (tmpvar_89) {
    tmpvar_90 = 1.0;
  } else {
    tmpvar_90 = 0.0;
  };
  specularTerm_64 = (tmpvar_87 * tmpvar_90);
  mediump vec3 tmpvar_91;
  mediump float x_92;
  x_92 = (1.0 - tmpvar_74);
  tmpvar_91 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_92 * x_92)
   * 
    ((x_92 * x_92) * x_92)
  )));
  mediump float x_93;
  x_93 = (1.0 - nv_66);
  mediump vec3 tmpvar_94;
  tmpvar_94 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_93 * x_93) * (
    (x_93 * x_93)
   * x_93))));
  highp vec3 tmpvar_95;
  tmpvar_95 = (((tmpvar_7 * 
    (tmpvar_12 * diffuseTerm_65)
  ) + (
    (specularTerm_64 * tmpvar_12)
   * tmpvar_91)) + ((surfaceReduction_63 * tmpvar_24) * tmpvar_94));
  color_62 = tmpvar_95;
  mediump vec4 tmpvar_96;
  tmpvar_96.w = 1.0;
  tmpvar_96.xyz = color_62;
  c_1.w = tmpvar_96.w;
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_62 + (tmpvar_97.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_98;
  xlat_varoutput_98.xyz = c_1.xyz;
  xlat_varoutput_98.w = 1.0;
  gl_FragData[0] = xlat_varoutput_98;
}


#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_9;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat13;
vec3 u_xlat18;
mediump vec3 u_xlat16_18;
mediump vec3 u_xlat16_21;
float u_xlat24;
float u_xlat25;
float u_xlat36;
float u_xlat37;
lowp float u_xlat10_37;
mediump float u_xlat16_38;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
mediump float u_xlat16_42;
mediump float u_xlat16_45;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_38);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;
    u_xlat10_37 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_39 = (-_OcclusionStrength) + 1.0;
    u_xlat16_39 = u_xlat10_37 * _OcclusionStrength + u_xlat16_39;
    u_xlat37 = (-_Glossiness) + 1.0;
    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb5){
        u_xlat16_40 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
        u_xlat16_40 = inversesqrt(u_xlat16_40);
        u_xlat16_6.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_6.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat16_6.xyz;
        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyzx).xyz;
        u_xlat16_9.x = (u_xlatb8.x) ? u_xlat5.x : u_xlat7.x;
        u_xlat16_9.y = (u_xlatb8.y) ? u_xlat5.y : u_xlat7.y;
        u_xlat16_9.z = (u_xlatb8.z) ? u_xlat5.z : u_xlat7.z;
        u_xlat16_40 = min(u_xlat16_9.y, u_xlat16_9.x);
        u_xlat16_40 = min(u_xlat16_9.z, u_xlat16_40);
        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_40) + u_xlat5.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    u_xlat16_40 = (-u_xlat37) * 0.699999988 + 1.70000005;
    u_xlat16_40 = u_xlat37 * u_xlat16_40;
    u_xlat16_40 = u_xlat16_40 * 6.0;
    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_40);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_18.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb7 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb7){
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb7 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb7){
            u_xlat16_9.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
            u_xlat16_9.x = inversesqrt(u_xlat16_9.x);
            u_xlat16_9.xyz = u_xlat16_4.xyz * u_xlat16_9.xxx;
            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat7.xyz = u_xlat7.xyz / u_xlat16_9.xyz;
            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat8.xyz = u_xlat8.xyz / u_xlat16_9.xyz;
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_9.xyzx).xyz;
            u_xlat16_11.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;
            u_xlat16_11.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;
            u_xlat16_11.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat16_45 = min(u_xlat16_11.y, u_xlat16_11.x);
            u_xlat16_45 = min(u_xlat16_11.z, u_xlat16_45);
            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat16_9.xyz * vec3(u_xlat16_45) + u_xlat7.xyz;
            u_xlat16_4.xyz = u_xlat4.xyz;
        //ENDIF
        }
        u_xlat10_4 = textureLod(unity_SpecCube1, u_xlat16_4.xyz, u_xlat16_40);
        u_xlat16_9.x = u_xlat10_4.w + -1.0;
        u_xlat16_9.x = unity_SpecCube1_HDR.w * u_xlat16_9.x + 1.0;
        u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube1_HDR.x;
        u_xlat16_9.xyz = u_xlat10_4.xyz * u_xlat16_9.xxx;
        u_xlat16_7.xyz = u_xlat16_6.xxx * u_xlat10_5.xyz + (-u_xlat16_9.xyz);
        u_xlat18.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_9.xyz;
        u_xlat16_18.xyz = u_xlat18.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = vec3(u_xlat16_39) * u_xlat16_18.xyz;
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat7.xyz = vec3(u_xlat36) * u_xlat7.xyz;
    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat12 + u_xlat12;
    u_xlat16_39 = u_xlat12 * u_xlat16_39;
    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;
    u_xlat16_42 = (-u_xlat1.x) + 1.0;
    u_xlat16_9.x = u_xlat16_42 * u_xlat16_42;
    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_9.x;
    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;
    u_xlat16_9.x = -abs(u_xlat36) + 1.0;
    u_xlat16_21.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;
    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_21.x;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_9.x + 1.0;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;
    u_xlat24 = u_xlat1.x * u_xlat16_39;
    u_xlat13 = u_xlat37 * u_xlat37;
    u_xlat13 = max(u_xlat13, 0.00200000009);
    u_xlat25 = (-u_xlat13) + 1.0;
    u_xlat7.x = abs(u_xlat36) * u_xlat25 + u_xlat13;
    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;
    u_xlat36 = abs(u_xlat36) * u_xlat25;
    u_xlat36 = u_xlat1.x * u_xlat7.x + u_xlat36;
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat25 = u_xlat13 * u_xlat13;
    u_xlat7.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);
    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat25 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat36;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat36 = u_xlat13 * u_xlat37;
    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;
    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_39!=0.0);
#else
    u_xlatb1 = u_xlat16_39!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_38 = (-u_xlat16_38) + 1.0;
    u_xlat16_38 = u_xlat16_38 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_21.xyz = vec3(u_xlat24) * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat16_39 = (-u_xlat12) + 1.0;
    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;
    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_11.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);
    u_xlat16_2.xyz = u_xlat16_9.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat10_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles":
// Stats: 163 math, 4 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  highp vec3 tmpvar_2;
  tmpvar_2.x = xlv_TEXCOORD2.w;
  tmpvar_2.y = xlv_TEXCOORD2_1.w;
  tmpvar_2.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float occ_13;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_13 = tmpvar_14;
  mediump float occlusion_15;
  occlusion_15 = ((1.0 - _OcclusionStrength) + (occ_13 * _OcclusionStrength));
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_16 = unity_SpecCube0_HDR;
  tmpvar_17 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_18;
  worldViewDir_18 = -(tmpvar_11);
  mediump vec3 Normal_19;
  Normal_19 = tmpvar_10;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_5;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec3 I_23;
  I_23 = -(worldViewDir_18);
  mediump vec3 tmpvar_24;
  tmpvar_24 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_25;
  tmpvar_25 = (I_23 - (2.0 * (
    dot (Normal_19, I_23)
   * Normal_19)));
  mediump vec3 originalReflUVW_26;
  mediump vec3 specular_27;
  originalReflUVW_26 = tmpvar_25;
  mediump vec3 worldRefl_28;
  worldRefl_28 = tmpvar_25;
  highp vec3 worldPos_29;
  worldPos_29 = tmpvar_2;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_30;
    mediump vec3 rbmax_31;
    mediump vec3 tmpvar_32;
    tmpvar_32 = normalize(tmpvar_25);
    highp vec3 tmpvar_33;
    tmpvar_33 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_2) / tmpvar_32);
    rbmax_31 = tmpvar_33;
    highp vec3 tmpvar_34;
    tmpvar_34 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_2) / tmpvar_32);
    rbmin_30 = tmpvar_34;
    bvec3 tmpvar_35;
    tmpvar_35 = greaterThan (tmpvar_32, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_36;
    if (tmpvar_35.x) {
      tmpvar_36 = rbmax_31.x;
    } else {
      tmpvar_36 = rbmin_30.x;
    };
    mediump float tmpvar_37;
    if (tmpvar_35.y) {
      tmpvar_37 = rbmax_31.y;
    } else {
      tmpvar_37 = rbmin_30.y;
    };
    mediump float tmpvar_38;
    if (tmpvar_35.z) {
      tmpvar_38 = rbmax_31.z;
    } else {
      tmpvar_38 = rbmin_30.z;
    };
    worldPos_29 = (tmpvar_2 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_28 = (worldPos_29 + (tmpvar_32 * min (
      min (tmpvar_36, tmpvar_37)
    , tmpvar_38)));
  };
  tmpvar_25 = worldRefl_28;
  mediump vec4 hdr_39;
  hdr_39 = tmpvar_16;
  mediump vec4 tmpvar_40;
  tmpvar_40.xyz = worldRefl_28;
  tmpvar_40.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_28, tmpvar_40.w);
  mediump vec4 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((hdr_39.x * (
    (hdr_39.w * (tmpvar_42.w - 1.0))
   + 1.0)) * tmpvar_42.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_44;
    worldRefl_44 = originalReflUVW_26;
    highp vec3 worldPos_45;
    worldPos_45 = tmpvar_2;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_46;
      mediump vec3 rbmax_47;
      mediump vec3 tmpvar_48;
      tmpvar_48 = normalize(originalReflUVW_26);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_2) / tmpvar_48);
      rbmax_47 = tmpvar_49;
      highp vec3 tmpvar_50;
      tmpvar_50 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_2) / tmpvar_48);
      rbmin_46 = tmpvar_50;
      bvec3 tmpvar_51;
      tmpvar_51 = greaterThan (tmpvar_48, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_52;
      if (tmpvar_51.x) {
        tmpvar_52 = rbmax_47.x;
      } else {
        tmpvar_52 = rbmin_46.x;
      };
      mediump float tmpvar_53;
      if (tmpvar_51.y) {
        tmpvar_53 = rbmax_47.y;
      } else {
        tmpvar_53 = rbmin_46.y;
      };
      mediump float tmpvar_54;
      if (tmpvar_51.z) {
        tmpvar_54 = rbmax_47.z;
      } else {
        tmpvar_54 = rbmin_46.z;
      };
      worldPos_45 = (tmpvar_2 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_44 = (worldPos_45 + (tmpvar_48 * min (
        min (tmpvar_52, tmpvar_53)
      , tmpvar_54)));
    };
    tmpvar_25 = worldRefl_44;
    mediump vec4 hdr_55;
    hdr_55 = tmpvar_17;
    mediump vec4 tmpvar_56;
    tmpvar_56.xyz = worldRefl_44;
    tmpvar_56.w = ((tmpvar_20 * (1.7 - 
      (0.7 * tmpvar_20)
    )) * 6.0);
    lowp vec4 tmpvar_57;
    tmpvar_57 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_44, tmpvar_56.w);
    mediump vec4 tmpvar_58;
    tmpvar_58 = tmpvar_57;
    mediump vec3 tmpvar_59;
    tmpvar_59 = ((hdr_55.x * (
      (hdr_55.w * (tmpvar_58.w - 1.0))
     + 1.0)) * tmpvar_58.xyz);
    highp vec3 tmpvar_60;
    tmpvar_60 = mix (tmpvar_59, tmpvar_43, unity_SpecCube0_BoxMin.www);
    specular_27 = tmpvar_60;
  } else {
    specular_27 = tmpvar_43;
  };
  tmpvar_24 = (specular_27 * occlusion_15);
  highp vec3 viewDir_61;
  viewDir_61 = -(tmpvar_11);
  mediump vec3 color_62;
  mediump float surfaceReduction_63;
  highp float specularTerm_64;
  mediump float diffuseTerm_65;
  mediump float nv_66;
  highp float tmpvar_67;
  highp float smoothness_68;
  smoothness_68 = tmpvar_5;
  tmpvar_67 = (1.0 - smoothness_68);
  highp vec3 tmpvar_69;
  highp vec3 inVec_70;
  inVec_70 = (_WorldSpaceLightPos0.xyz + viewDir_61);
  tmpvar_69 = (inVec_70 * inversesqrt(max (0.001, 
    dot (inVec_70, inVec_70)
  )));
  highp float tmpvar_71;
  tmpvar_71 = abs(dot (tmpvar_10, viewDir_61));
  nv_66 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_73;
  tmpvar_73 = clamp (dot (tmpvar_10, tmpvar_69), 0.0, 1.0);
  mediump float tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_69), 0.0, 1.0);
  tmpvar_74 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float NdotL_77;
  NdotL_77 = tmpvar_72;
  mediump float perceptualRoughness_78;
  perceptualRoughness_78 = tmpvar_67;
  mediump float tmpvar_79;
  tmpvar_79 = (0.5 + ((2.0 * tmpvar_74) * (tmpvar_74 * perceptualRoughness_78)));
  mediump float x_80;
  x_80 = (1.0 - NdotL_77);
  mediump float x_81;
  x_81 = (1.0 - nv_66);
  tmpvar_76 = ((1.0 + (
    (tmpvar_79 - 1.0)
   * 
    ((x_80 * x_80) * ((x_80 * x_80) * x_80))
  )) * (1.0 + (
    (tmpvar_79 - 1.0)
   * 
    ((x_81 * x_81) * ((x_81 * x_81) * x_81))
  )));
  highp float tmpvar_82;
  tmpvar_82 = (tmpvar_76 * tmpvar_72);
  diffuseTerm_65 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = max ((tmpvar_67 * tmpvar_67), 0.002);
  highp float NdotV_84;
  NdotV_84 = nv_66;
  highp float tmpvar_85;
  tmpvar_85 = (tmpvar_83 * tmpvar_83);
  highp float tmpvar_86;
  tmpvar_86 = (((
    (tmpvar_73 * tmpvar_85)
   - tmpvar_73) * tmpvar_73) + 1.0);
  highp float tmpvar_87;
  tmpvar_87 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_72 * (
        (NdotV_84 * (1.0 - tmpvar_83))
       + tmpvar_83)) + (NdotV_84 * (
        (tmpvar_72 * (1.0 - tmpvar_83))
       + tmpvar_83))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_85)
     / 
      ((tmpvar_86 * tmpvar_86) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_72));
  specularTerm_64 = tmpvar_87;
  surfaceReduction_63 = (1.0 - ((0.28 * tmpvar_83) * tmpvar_67));
  bvec3 tmpvar_88;
  tmpvar_88 = bvec3(tmpvar_8);
  bool tmpvar_89;
  tmpvar_89 = any(tmpvar_88);
  highp float tmpvar_90;
  if (tmpvar_89) {
    tmpvar_90 = 1.0;
  } else {
    tmpvar_90 = 0.0;
  };
  specularTerm_64 = (tmpvar_87 * tmpvar_90);
  mediump vec3 tmpvar_91;
  mediump float x_92;
  x_92 = (1.0 - tmpvar_74);
  tmpvar_91 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_92 * x_92)
   * 
    ((x_92 * x_92) * x_92)
  )));
  mediump float x_93;
  x_93 = (1.0 - nv_66);
  mediump vec3 tmpvar_94;
  tmpvar_94 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_93 * x_93) * (
    (x_93 * x_93)
   * x_93))));
  highp vec3 tmpvar_95;
  tmpvar_95 = (((tmpvar_7 * 
    (tmpvar_12 * diffuseTerm_65)
  ) + (
    (specularTerm_64 * tmpvar_12)
   * tmpvar_91)) + ((surfaceReduction_63 * tmpvar_24) * tmpvar_94));
  color_62 = tmpvar_95;
  mediump vec4 tmpvar_96;
  tmpvar_96.w = 1.0;
  tmpvar_96.xyz = color_62;
  c_1.w = tmpvar_96.w;
  c_1.xyz = color_62;
  mediump vec4 xlat_varoutput_97;
  xlat_varoutput_97.xyz = c_1.xyz;
  xlat_varoutput_97.w = 1.0;
  gl_FragData[0] = xlat_varoutput_97;
}


#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_9;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat13;
vec3 u_xlat18;
mediump vec3 u_xlat16_18;
mediump vec3 u_xlat16_21;
float u_xlat24;
float u_xlat25;
float u_xlat36;
float u_xlat37;
lowp float u_xlat10_37;
mediump float u_xlat16_38;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
mediump float u_xlat16_42;
mediump float u_xlat16_45;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_38);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;
    u_xlat10_37 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_39 = (-_OcclusionStrength) + 1.0;
    u_xlat16_39 = u_xlat10_37 * _OcclusionStrength + u_xlat16_39;
    u_xlat37 = (-_Glossiness) + 1.0;
    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb5){
        u_xlat16_40 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
        u_xlat16_40 = inversesqrt(u_xlat16_40);
        u_xlat16_6.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_6.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat16_6.xyz;
        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyzx).xyz;
        u_xlat16_9.x = (u_xlatb8.x) ? u_xlat5.x : u_xlat7.x;
        u_xlat16_9.y = (u_xlatb8.y) ? u_xlat5.y : u_xlat7.y;
        u_xlat16_9.z = (u_xlatb8.z) ? u_xlat5.z : u_xlat7.z;
        u_xlat16_40 = min(u_xlat16_9.y, u_xlat16_9.x);
        u_xlat16_40 = min(u_xlat16_9.z, u_xlat16_40);
        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_40) + u_xlat5.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    u_xlat16_40 = (-u_xlat37) * 0.699999988 + 1.70000005;
    u_xlat16_40 = u_xlat37 * u_xlat16_40;
    u_xlat16_40 = u_xlat16_40 * 6.0;
    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_40);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_18.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb7 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb7){
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb7 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb7){
            u_xlat16_9.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
            u_xlat16_9.x = inversesqrt(u_xlat16_9.x);
            u_xlat16_9.xyz = u_xlat16_4.xyz * u_xlat16_9.xxx;
            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat7.xyz = u_xlat7.xyz / u_xlat16_9.xyz;
            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat8.xyz = u_xlat8.xyz / u_xlat16_9.xyz;
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_9.xyzx).xyz;
            u_xlat16_11.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;
            u_xlat16_11.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;
            u_xlat16_11.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat16_45 = min(u_xlat16_11.y, u_xlat16_11.x);
            u_xlat16_45 = min(u_xlat16_11.z, u_xlat16_45);
            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat16_9.xyz * vec3(u_xlat16_45) + u_xlat7.xyz;
            u_xlat16_4.xyz = u_xlat4.xyz;
        //ENDIF
        }
        u_xlat10_4 = textureLod(unity_SpecCube1, u_xlat16_4.xyz, u_xlat16_40);
        u_xlat16_9.x = u_xlat10_4.w + -1.0;
        u_xlat16_9.x = unity_SpecCube1_HDR.w * u_xlat16_9.x + 1.0;
        u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube1_HDR.x;
        u_xlat16_9.xyz = u_xlat10_4.xyz * u_xlat16_9.xxx;
        u_xlat16_7.xyz = u_xlat16_6.xxx * u_xlat10_5.xyz + (-u_xlat16_9.xyz);
        u_xlat18.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_9.xyz;
        u_xlat16_18.xyz = u_xlat18.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = vec3(u_xlat16_39) * u_xlat16_18.xyz;
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat7.xyz = vec3(u_xlat36) * u_xlat7.xyz;
    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat12 + u_xlat12;
    u_xlat16_39 = u_xlat12 * u_xlat16_39;
    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;
    u_xlat16_42 = (-u_xlat1.x) + 1.0;
    u_xlat16_9.x = u_xlat16_42 * u_xlat16_42;
    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_9.x;
    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;
    u_xlat16_9.x = -abs(u_xlat36) + 1.0;
    u_xlat16_21.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;
    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_21.x;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_9.x + 1.0;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;
    u_xlat24 = u_xlat1.x * u_xlat16_39;
    u_xlat13 = u_xlat37 * u_xlat37;
    u_xlat13 = max(u_xlat13, 0.00200000009);
    u_xlat25 = (-u_xlat13) + 1.0;
    u_xlat7.x = abs(u_xlat36) * u_xlat25 + u_xlat13;
    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;
    u_xlat36 = abs(u_xlat36) * u_xlat25;
    u_xlat36 = u_xlat1.x * u_xlat7.x + u_xlat36;
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat25 = u_xlat13 * u_xlat13;
    u_xlat7.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);
    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat25 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat36;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat36 = u_xlat13 * u_xlat37;
    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;
    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_39!=0.0);
#else
    u_xlatb1 = u_xlat16_39!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_38 = (-u_xlat16_38) + 1.0;
    u_xlat16_38 = u_xlat16_38 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_21.xyz = vec3(u_xlat24) * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat16_39 = (-u_xlat12) + 1.0;
    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;
    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_11.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);
    u_xlat16_2.xyz = u_xlat16_9.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL LIGHTPROBE_SH _EMISSION VERTEXLIGHT_ON 
-- Vertex shader for "gles":
// Stats: 177 math, 5 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_17;
  mediump vec4 ambientOrLightmapUV_19;
  ambientOrLightmapUV_19.w = 0.0;
  highp vec3 lightColor0_20;
  lightColor0_20 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_21;
  lightColor1_21 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_22;
  lightColor2_22 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_23;
  lightColor3_23 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_24;
  lightAttenSq_24 = unity_4LightAtten0;
  highp vec3 normal_25;
  normal_25 = normalWorld_18;
  highp vec3 col_26;
  highp vec4 ndotl_27;
  highp vec4 lengthSq_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosX0 - tmpvar_8.x);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosY0 - tmpvar_8.y);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_28 = (tmpvar_29 * tmpvar_29);
  lengthSq_28 = (lengthSq_28 + (tmpvar_30 * tmpvar_30));
  lengthSq_28 = (lengthSq_28 + (tmpvar_31 * tmpvar_31));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (lengthSq_28, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_28 = tmpvar_32;
  ndotl_27 = (tmpvar_29 * normal_25.x);
  ndotl_27 = (ndotl_27 + (tmpvar_30 * normal_25.y));
  ndotl_27 = (ndotl_27 + (tmpvar_31 * normal_25.z));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_27 * inversesqrt(tmpvar_32)));
  ndotl_27 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (tmpvar_33 * (1.0/((1.0 + 
    (tmpvar_32 * lightAttenSq_24)
  ))));
  col_26 = (lightColor0_20 * tmpvar_34.x);
  col_26 = (col_26 + (lightColor1_21 * tmpvar_34.y));
  col_26 = (col_26 + (lightColor2_22 * tmpvar_34.z));
  col_26 = (col_26 + (lightColor3_23 * tmpvar_34.w));
  ambientOrLightmapUV_19.xyz = col_26;
  mediump vec3 x1_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = (normalWorld_18.xyzz * normalWorld_18.yzzx);
  x1_35.x = dot (unity_SHBr, tmpvar_36);
  x1_35.y = dot (unity_SHBg, tmpvar_36);
  x1_35.z = dot (unity_SHBb, tmpvar_36);
  ambientOrLightmapUV_19.xyz = ((ambientOrLightmapUV_19.xyz * (
    (ambientOrLightmapUV_19.xyz * ((ambientOrLightmapUV_19.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_35 + (unity_SHC.xyz * 
    ((normalWorld_18.x * normalWorld_18.x) - (normalWorld_18.y * normalWorld_18.y))
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_19;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  highp vec3 tmpvar_2;
  tmpvar_2.x = xlv_TEXCOORD2.w;
  tmpvar_2.y = xlv_TEXCOORD2_1.w;
  tmpvar_2.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float occ_13;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_13 = tmpvar_14;
  mediump float occlusion_15;
  occlusion_15 = ((1.0 - _OcclusionStrength) + (occ_13 * _OcclusionStrength));
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_16 = unity_SpecCube0_HDR;
  tmpvar_17 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_18;
  worldViewDir_18 = -(tmpvar_11);
  mediump vec3 Normal_19;
  Normal_19 = tmpvar_10;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_5;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec3 I_23;
  I_23 = -(worldViewDir_18);
  mediump vec3 normalWorld_24;
  normalWorld_24 = tmpvar_10;
  mediump vec3 tmpvar_25;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_24;
  mediump vec3 x_28;
  x_28.x = dot (unity_SHAr, tmpvar_27);
  x_28.y = dot (unity_SHAg, tmpvar_27);
  x_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_25 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_28)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_15);
  tmpvar_26 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (I_23 - (2.0 * (
    dot (Normal_19, I_23)
   * Normal_19)));
  mediump vec3 originalReflUVW_30;
  mediump vec3 specular_31;
  originalReflUVW_30 = tmpvar_29;
  mediump vec3 worldRefl_32;
  worldRefl_32 = tmpvar_29;
  highp vec3 worldPos_33;
  worldPos_33 = tmpvar_2;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_34;
    mediump vec3 rbmax_35;
    mediump vec3 tmpvar_36;
    tmpvar_36 = normalize(tmpvar_29);
    highp vec3 tmpvar_37;
    tmpvar_37 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_2) / tmpvar_36);
    rbmax_35 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_2) / tmpvar_36);
    rbmin_34 = tmpvar_38;
    bvec3 tmpvar_39;
    tmpvar_39 = greaterThan (tmpvar_36, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_40;
    if (tmpvar_39.x) {
      tmpvar_40 = rbmax_35.x;
    } else {
      tmpvar_40 = rbmin_34.x;
    };
    mediump float tmpvar_41;
    if (tmpvar_39.y) {
      tmpvar_41 = rbmax_35.y;
    } else {
      tmpvar_41 = rbmin_34.y;
    };
    mediump float tmpvar_42;
    if (tmpvar_39.z) {
      tmpvar_42 = rbmax_35.z;
    } else {
      tmpvar_42 = rbmin_34.z;
    };
    worldPos_33 = (tmpvar_2 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_32 = (worldPos_33 + (tmpvar_36 * min (
      min (tmpvar_40, tmpvar_41)
    , tmpvar_42)));
  };
  tmpvar_29 = worldRefl_32;
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_16;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = worldRefl_32;
  tmpvar_44.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_32, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((hdr_43.x * (
    (hdr_43.w * (tmpvar_46.w - 1.0))
   + 1.0)) * tmpvar_46.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_48;
    worldRefl_48 = originalReflUVW_30;
    highp vec3 worldPos_49;
    worldPos_49 = tmpvar_2;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_50;
      mediump vec3 rbmax_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(originalReflUVW_30);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_2) / tmpvar_52);
      rbmax_51 = tmpvar_53;
      highp vec3 tmpvar_54;
      tmpvar_54 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_2) / tmpvar_52);
      rbmin_50 = tmpvar_54;
      bvec3 tmpvar_55;
      tmpvar_55 = greaterThan (tmpvar_52, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_56;
      if (tmpvar_55.x) {
        tmpvar_56 = rbmax_51.x;
      } else {
        tmpvar_56 = rbmin_50.x;
      };
      mediump float tmpvar_57;
      if (tmpvar_55.y) {
        tmpvar_57 = rbmax_51.y;
      } else {
        tmpvar_57 = rbmin_50.y;
      };
      mediump float tmpvar_58;
      if (tmpvar_55.z) {
        tmpvar_58 = rbmax_51.z;
      } else {
        tmpvar_58 = rbmin_50.z;
      };
      worldPos_49 = (tmpvar_2 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_48 = (worldPos_49 + (tmpvar_52 * min (
        min (tmpvar_56, tmpvar_57)
      , tmpvar_58)));
    };
    tmpvar_29 = worldRefl_48;
    mediump vec4 hdr_59;
    hdr_59 = tmpvar_17;
    mediump vec4 tmpvar_60;
    tmpvar_60.xyz = worldRefl_48;
    tmpvar_60.w = ((tmpvar_20 * (1.7 - 
      (0.7 * tmpvar_20)
    )) * 6.0);
    lowp vec4 tmpvar_61;
    tmpvar_61 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_48, tmpvar_60.w);
    mediump vec4 tmpvar_62;
    tmpvar_62 = tmpvar_61;
    mediump vec3 tmpvar_63;
    tmpvar_63 = ((hdr_59.x * (
      (hdr_59.w * (tmpvar_62.w - 1.0))
     + 1.0)) * tmpvar_62.xyz);
    highp vec3 tmpvar_64;
    tmpvar_64 = mix (tmpvar_63, tmpvar_47, unity_SpecCube0_BoxMin.www);
    specular_31 = tmpvar_64;
  } else {
    specular_31 = tmpvar_47;
  };
  tmpvar_26 = (specular_31 * occlusion_15);
  highp vec3 viewDir_65;
  viewDir_65 = -(tmpvar_11);
  mediump vec3 color_66;
  mediump float surfaceReduction_67;
  highp float specularTerm_68;
  mediump float diffuseTerm_69;
  mediump float nv_70;
  highp float tmpvar_71;
  highp float smoothness_72;
  smoothness_72 = tmpvar_5;
  tmpvar_71 = (1.0 - smoothness_72);
  highp vec3 tmpvar_73;
  highp vec3 inVec_74;
  inVec_74 = (_WorldSpaceLightPos0.xyz + viewDir_65);
  tmpvar_73 = (inVec_74 * inversesqrt(max (0.001, 
    dot (inVec_74, inVec_74)
  )));
  highp float tmpvar_75;
  tmpvar_75 = abs(dot (tmpvar_10, viewDir_65));
  nv_70 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_77;
  tmpvar_77 = clamp (dot (tmpvar_10, tmpvar_73), 0.0, 1.0);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_73), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  mediump float tmpvar_80;
  mediump float NdotL_81;
  NdotL_81 = tmpvar_76;
  mediump float perceptualRoughness_82;
  perceptualRoughness_82 = tmpvar_71;
  mediump float tmpvar_83;
  tmpvar_83 = (0.5 + ((2.0 * tmpvar_78) * (tmpvar_78 * perceptualRoughness_82)));
  mediump float x_84;
  x_84 = (1.0 - NdotL_81);
  mediump float x_85;
  x_85 = (1.0 - nv_70);
  tmpvar_80 = ((1.0 + (
    (tmpvar_83 - 1.0)
   * 
    ((x_84 * x_84) * ((x_84 * x_84) * x_84))
  )) * (1.0 + (
    (tmpvar_83 - 1.0)
   * 
    ((x_85 * x_85) * ((x_85 * x_85) * x_85))
  )));
  highp float tmpvar_86;
  tmpvar_86 = (tmpvar_80 * tmpvar_76);
  diffuseTerm_69 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = max ((tmpvar_71 * tmpvar_71), 0.002);
  highp float NdotV_88;
  NdotV_88 = nv_70;
  highp float tmpvar_89;
  tmpvar_89 = (tmpvar_87 * tmpvar_87);
  highp float tmpvar_90;
  tmpvar_90 = (((
    (tmpvar_77 * tmpvar_89)
   - tmpvar_77) * tmpvar_77) + 1.0);
  highp float tmpvar_91;
  tmpvar_91 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_76 * (
        (NdotV_88 * (1.0 - tmpvar_87))
       + tmpvar_87)) + (NdotV_88 * (
        (tmpvar_76 * (1.0 - tmpvar_87))
       + tmpvar_87))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_89)
     / 
      ((tmpvar_90 * tmpvar_90) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_76));
  specularTerm_68 = tmpvar_91;
  surfaceReduction_67 = (1.0 - ((0.28 * tmpvar_87) * tmpvar_71));
  bvec3 tmpvar_92;
  tmpvar_92 = bvec3(tmpvar_8);
  bool tmpvar_93;
  tmpvar_93 = any(tmpvar_92);
  highp float tmpvar_94;
  if (tmpvar_93) {
    tmpvar_94 = 1.0;
  } else {
    tmpvar_94 = 0.0;
  };
  specularTerm_68 = (tmpvar_91 * tmpvar_94);
  mediump vec3 tmpvar_95;
  mediump float x_96;
  x_96 = (1.0 - tmpvar_78);
  tmpvar_95 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_96 * x_96)
   * 
    ((x_96 * x_96) * x_96)
  )));
  mediump float x_97;
  x_97 = (1.0 - nv_70);
  mediump vec3 tmpvar_98;
  tmpvar_98 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_97 * x_97) * (
    (x_97 * x_97)
   * x_97))));
  highp vec3 tmpvar_99;
  tmpvar_99 = (((tmpvar_7 * 
    (tmpvar_25 + (tmpvar_12 * diffuseTerm_69))
  ) + (
    (specularTerm_68 * tmpvar_12)
   * tmpvar_95)) + ((surfaceReduction_67 * tmpvar_26) * tmpvar_98));
  color_66 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.w = 1.0;
  tmpvar_100.xyz = color_66;
  c_1.w = tmpvar_100.w;
  lowp vec4 tmpvar_101;
  tmpvar_101 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_66 + (tmpvar_101.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_102;
  xlat_varoutput_102.xyz = c_1.xyz;
  xlat_varoutput_102.w = 1.0;
  gl_FragData[0] = xlat_varoutput_102;
}


#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD4.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat2 * u_xlat0;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat4;
lowp float u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bvec3 u_xlatb9;
mediump vec3 u_xlat16_10;
mediump vec4 u_xlat16_11;
bvec3 u_xlatb12;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec3 u_xlat15;
mediump vec3 u_xlat16_18;
vec3 u_xlat24;
mediump vec3 u_xlat16_24;
mediump float u_xlat16_25;
float u_xlat28;
float u_xlat29;
mediump float u_xlat16_39;
float u_xlat42;
bool u_xlatb42;
float u_xlat43;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
mediump float u_xlat16_47;
mediump float u_xlat16_52;
mediump float u_xlat16_53;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_45 = (-_OcclusionStrength) + 1.0;
    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;
    u_xlat4 = (-_Glossiness) + 1.0;
    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_18.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb42){
        u_xlat16_47 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
        u_xlat16_47 = inversesqrt(u_xlat16_47);
        u_xlat16_6.xyz = vec3(u_xlat16_47) * u_xlat16_5.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat16_6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat16_6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyzx).xyz;
        u_xlat16_10.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
        u_xlat16_10.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
        u_xlat16_10.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
        u_xlat16_47 = min(u_xlat16_10.y, u_xlat16_10.x);
        u_xlat16_47 = min(u_xlat16_10.z, u_xlat16_47);
        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat16_6.xyz * vec3(u_xlat16_47) + u_xlat7.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
        u_xlat16_7.xyz = u_xlat16_5.xyz;
    //ENDIF
    }
    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;
    u_xlat16_47 = u_xlat4 * u_xlat16_47;
    u_xlat16_47 = u_xlat16_47 * 6.0;
    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_47);
    u_xlat16_10.x = u_xlat10_6.w + -1.0;
    u_xlat16_10.x = unity_SpecCube0_HDR.w * u_xlat16_10.x + 1.0;
    u_xlat16_10.x = u_xlat16_10.x * unity_SpecCube0_HDR.x;
    u_xlat16_24.xyz = u_xlat10_6.xyz * u_xlat16_10.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb42){
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb42){
            u_xlat16_11.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
            u_xlat16_11.x = inversesqrt(u_xlat16_11.x);
            u_xlat16_11.xyz = u_xlat16_5.xyz * u_xlat16_11.xxx;
            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat8.xyz = u_xlat8.xyz / u_xlat16_11.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_11.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_11.xyzx).xyz;
            u_xlat16_13.x = (u_xlatb12.x) ? u_xlat8.x : u_xlat9.x;
            u_xlat16_13.y = (u_xlatb12.y) ? u_xlat8.y : u_xlat9.y;
            u_xlat16_13.z = (u_xlatb12.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat16_53 = min(u_xlat16_13.y, u_xlat16_13.x);
            u_xlat16_53 = min(u_xlat16_13.z, u_xlat16_53);
            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat16_11.xyz * vec3(u_xlat16_53) + u_xlat8.xyz;
            u_xlat16_5.xyz = u_xlat5.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat16_5.xyz, u_xlat16_47);
        u_xlat16_11.x = u_xlat10_5.w + -1.0;
        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;
        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;
        u_xlat16_11.xyz = u_xlat10_5.xyz * u_xlat16_11.xxx;
        u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat10_6.xyz + (-u_xlat16_11.xyz);
        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_8.xyz + u_xlat16_11.xyz;
        u_xlat16_24.xyz = u_xlat24.xyz;
    //ENDIF
    }
    u_xlat16_10.xyz = vec3(u_xlat16_45) * u_xlat16_24.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat8.xyz = vec3(u_xlat42) * u_xlat8.xyz;
    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_52 = u_xlat14 + u_xlat14;
    u_xlat16_52 = u_xlat14 * u_xlat16_52;
    u_xlat16_52 = u_xlat16_52 * u_xlat4 + -0.5;
    u_xlat16_11.x = (-u_xlat1.x) + 1.0;
    u_xlat16_25 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_25;
    u_xlat16_11.x = u_xlat16_52 * u_xlat16_11.x + 1.0;
    u_xlat16_25 = -abs(u_xlat42) + 1.0;
    u_xlat16_39 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_39;
    u_xlat16_52 = u_xlat16_52 * u_xlat16_25 + 1.0;
    u_xlat16_52 = u_xlat16_52 * u_xlat16_11.x;
    u_xlat28 = u_xlat1.x * u_xlat16_52;
    u_xlat15.x = u_xlat4 * u_xlat4;
    u_xlat15.x = max(u_xlat15.x, 0.00200000009);
    u_xlat29 = (-u_xlat15.x) + 1.0;
    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;
    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;
    u_xlat42 = abs(u_xlat42) * u_xlat29;
    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat29 = u_xlat15.x * u_xlat15.x;
    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);
    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;
    u_xlat29 = u_xlat29 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat29 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat42;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat42 = u_xlat15.x * u_xlat4;
    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;
    u_xlat16_52 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_52!=0.0);
#else
    u_xlatb1 = u_xlat16_52!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_44 = (-u_xlat16_44) + 1.0;
    u_xlat16_44 = u_xlat16_44 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
    u_xlat16_11.xzw = vec3(u_xlat28) * _LightColor0.xyz;
    u_xlat16_11.xzw = u_xlat16_18.xyz * vec3(u_xlat16_45) + u_xlat16_11.xzw;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat16_45 = (-u_xlat14) + 1.0;
    u_xlat16_52 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_52 = u_xlat16_52 * u_xlat16_52;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_52;
    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_11.xzw + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_10.xyz * vec3(u_xlat42);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);
    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat10_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles":
// Stats: 175 math, 4 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_17;
  mediump vec4 ambientOrLightmapUV_19;
  ambientOrLightmapUV_19.w = 0.0;
  highp vec3 lightColor0_20;
  lightColor0_20 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_21;
  lightColor1_21 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_22;
  lightColor2_22 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_23;
  lightColor3_23 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_24;
  lightAttenSq_24 = unity_4LightAtten0;
  highp vec3 normal_25;
  normal_25 = normalWorld_18;
  highp vec3 col_26;
  highp vec4 ndotl_27;
  highp vec4 lengthSq_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosX0 - tmpvar_8.x);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosY0 - tmpvar_8.y);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_28 = (tmpvar_29 * tmpvar_29);
  lengthSq_28 = (lengthSq_28 + (tmpvar_30 * tmpvar_30));
  lengthSq_28 = (lengthSq_28 + (tmpvar_31 * tmpvar_31));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (lengthSq_28, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_28 = tmpvar_32;
  ndotl_27 = (tmpvar_29 * normal_25.x);
  ndotl_27 = (ndotl_27 + (tmpvar_30 * normal_25.y));
  ndotl_27 = (ndotl_27 + (tmpvar_31 * normal_25.z));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_27 * inversesqrt(tmpvar_32)));
  ndotl_27 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (tmpvar_33 * (1.0/((1.0 + 
    (tmpvar_32 * lightAttenSq_24)
  ))));
  col_26 = (lightColor0_20 * tmpvar_34.x);
  col_26 = (col_26 + (lightColor1_21 * tmpvar_34.y));
  col_26 = (col_26 + (lightColor2_22 * tmpvar_34.z));
  col_26 = (col_26 + (lightColor3_23 * tmpvar_34.w));
  ambientOrLightmapUV_19.xyz = col_26;
  mediump vec3 x1_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = (normalWorld_18.xyzz * normalWorld_18.yzzx);
  x1_35.x = dot (unity_SHBr, tmpvar_36);
  x1_35.y = dot (unity_SHBg, tmpvar_36);
  x1_35.z = dot (unity_SHBb, tmpvar_36);
  ambientOrLightmapUV_19.xyz = ((ambientOrLightmapUV_19.xyz * (
    (ambientOrLightmapUV_19.xyz * ((ambientOrLightmapUV_19.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_35 + (unity_SHC.xyz * 
    ((normalWorld_18.x * normalWorld_18.x) - (normalWorld_18.y * normalWorld_18.y))
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_19;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  highp vec3 tmpvar_2;
  tmpvar_2.x = xlv_TEXCOORD2.w;
  tmpvar_2.y = xlv_TEXCOORD2_1.w;
  tmpvar_2.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float occ_13;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_13 = tmpvar_14;
  mediump float occlusion_15;
  occlusion_15 = ((1.0 - _OcclusionStrength) + (occ_13 * _OcclusionStrength));
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_16 = unity_SpecCube0_HDR;
  tmpvar_17 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_18;
  worldViewDir_18 = -(tmpvar_11);
  mediump vec3 Normal_19;
  Normal_19 = tmpvar_10;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_5;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec3 I_23;
  I_23 = -(worldViewDir_18);
  mediump vec3 normalWorld_24;
  normalWorld_24 = tmpvar_10;
  mediump vec3 tmpvar_25;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_24;
  mediump vec3 x_28;
  x_28.x = dot (unity_SHAr, tmpvar_27);
  x_28.y = dot (unity_SHAg, tmpvar_27);
  x_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_25 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_28)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_15);
  tmpvar_26 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (I_23 - (2.0 * (
    dot (Normal_19, I_23)
   * Normal_19)));
  mediump vec3 originalReflUVW_30;
  mediump vec3 specular_31;
  originalReflUVW_30 = tmpvar_29;
  mediump vec3 worldRefl_32;
  worldRefl_32 = tmpvar_29;
  highp vec3 worldPos_33;
  worldPos_33 = tmpvar_2;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_34;
    mediump vec3 rbmax_35;
    mediump vec3 tmpvar_36;
    tmpvar_36 = normalize(tmpvar_29);
    highp vec3 tmpvar_37;
    tmpvar_37 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_2) / tmpvar_36);
    rbmax_35 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_2) / tmpvar_36);
    rbmin_34 = tmpvar_38;
    bvec3 tmpvar_39;
    tmpvar_39 = greaterThan (tmpvar_36, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_40;
    if (tmpvar_39.x) {
      tmpvar_40 = rbmax_35.x;
    } else {
      tmpvar_40 = rbmin_34.x;
    };
    mediump float tmpvar_41;
    if (tmpvar_39.y) {
      tmpvar_41 = rbmax_35.y;
    } else {
      tmpvar_41 = rbmin_34.y;
    };
    mediump float tmpvar_42;
    if (tmpvar_39.z) {
      tmpvar_42 = rbmax_35.z;
    } else {
      tmpvar_42 = rbmin_34.z;
    };
    worldPos_33 = (tmpvar_2 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_32 = (worldPos_33 + (tmpvar_36 * min (
      min (tmpvar_40, tmpvar_41)
    , tmpvar_42)));
  };
  tmpvar_29 = worldRefl_32;
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_16;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = worldRefl_32;
  tmpvar_44.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_32, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((hdr_43.x * (
    (hdr_43.w * (tmpvar_46.w - 1.0))
   + 1.0)) * tmpvar_46.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_48;
    worldRefl_48 = originalReflUVW_30;
    highp vec3 worldPos_49;
    worldPos_49 = tmpvar_2;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_50;
      mediump vec3 rbmax_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(originalReflUVW_30);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_2) / tmpvar_52);
      rbmax_51 = tmpvar_53;
      highp vec3 tmpvar_54;
      tmpvar_54 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_2) / tmpvar_52);
      rbmin_50 = tmpvar_54;
      bvec3 tmpvar_55;
      tmpvar_55 = greaterThan (tmpvar_52, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_56;
      if (tmpvar_55.x) {
        tmpvar_56 = rbmax_51.x;
      } else {
        tmpvar_56 = rbmin_50.x;
      };
      mediump float tmpvar_57;
      if (tmpvar_55.y) {
        tmpvar_57 = rbmax_51.y;
      } else {
        tmpvar_57 = rbmin_50.y;
      };
      mediump float tmpvar_58;
      if (tmpvar_55.z) {
        tmpvar_58 = rbmax_51.z;
      } else {
        tmpvar_58 = rbmin_50.z;
      };
      worldPos_49 = (tmpvar_2 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_48 = (worldPos_49 + (tmpvar_52 * min (
        min (tmpvar_56, tmpvar_57)
      , tmpvar_58)));
    };
    tmpvar_29 = worldRefl_48;
    mediump vec4 hdr_59;
    hdr_59 = tmpvar_17;
    mediump vec4 tmpvar_60;
    tmpvar_60.xyz = worldRefl_48;
    tmpvar_60.w = ((tmpvar_20 * (1.7 - 
      (0.7 * tmpvar_20)
    )) * 6.0);
    lowp vec4 tmpvar_61;
    tmpvar_61 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_48, tmpvar_60.w);
    mediump vec4 tmpvar_62;
    tmpvar_62 = tmpvar_61;
    mediump vec3 tmpvar_63;
    tmpvar_63 = ((hdr_59.x * (
      (hdr_59.w * (tmpvar_62.w - 1.0))
     + 1.0)) * tmpvar_62.xyz);
    highp vec3 tmpvar_64;
    tmpvar_64 = mix (tmpvar_63, tmpvar_47, unity_SpecCube0_BoxMin.www);
    specular_31 = tmpvar_64;
  } else {
    specular_31 = tmpvar_47;
  };
  tmpvar_26 = (specular_31 * occlusion_15);
  highp vec3 viewDir_65;
  viewDir_65 = -(tmpvar_11);
  mediump vec3 color_66;
  mediump float surfaceReduction_67;
  highp float specularTerm_68;
  mediump float diffuseTerm_69;
  mediump float nv_70;
  highp float tmpvar_71;
  highp float smoothness_72;
  smoothness_72 = tmpvar_5;
  tmpvar_71 = (1.0 - smoothness_72);
  highp vec3 tmpvar_73;
  highp vec3 inVec_74;
  inVec_74 = (_WorldSpaceLightPos0.xyz + viewDir_65);
  tmpvar_73 = (inVec_74 * inversesqrt(max (0.001, 
    dot (inVec_74, inVec_74)
  )));
  highp float tmpvar_75;
  tmpvar_75 = abs(dot (tmpvar_10, viewDir_65));
  nv_70 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_77;
  tmpvar_77 = clamp (dot (tmpvar_10, tmpvar_73), 0.0, 1.0);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_73), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  mediump float tmpvar_80;
  mediump float NdotL_81;
  NdotL_81 = tmpvar_76;
  mediump float perceptualRoughness_82;
  perceptualRoughness_82 = tmpvar_71;
  mediump float tmpvar_83;
  tmpvar_83 = (0.5 + ((2.0 * tmpvar_78) * (tmpvar_78 * perceptualRoughness_82)));
  mediump float x_84;
  x_84 = (1.0 - NdotL_81);
  mediump float x_85;
  x_85 = (1.0 - nv_70);
  tmpvar_80 = ((1.0 + (
    (tmpvar_83 - 1.0)
   * 
    ((x_84 * x_84) * ((x_84 * x_84) * x_84))
  )) * (1.0 + (
    (tmpvar_83 - 1.0)
   * 
    ((x_85 * x_85) * ((x_85 * x_85) * x_85))
  )));
  highp float tmpvar_86;
  tmpvar_86 = (tmpvar_80 * tmpvar_76);
  diffuseTerm_69 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = max ((tmpvar_71 * tmpvar_71), 0.002);
  highp float NdotV_88;
  NdotV_88 = nv_70;
  highp float tmpvar_89;
  tmpvar_89 = (tmpvar_87 * tmpvar_87);
  highp float tmpvar_90;
  tmpvar_90 = (((
    (tmpvar_77 * tmpvar_89)
   - tmpvar_77) * tmpvar_77) + 1.0);
  highp float tmpvar_91;
  tmpvar_91 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_76 * (
        (NdotV_88 * (1.0 - tmpvar_87))
       + tmpvar_87)) + (NdotV_88 * (
        (tmpvar_76 * (1.0 - tmpvar_87))
       + tmpvar_87))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_89)
     / 
      ((tmpvar_90 * tmpvar_90) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_76));
  specularTerm_68 = tmpvar_91;
  surfaceReduction_67 = (1.0 - ((0.28 * tmpvar_87) * tmpvar_71));
  bvec3 tmpvar_92;
  tmpvar_92 = bvec3(tmpvar_8);
  bool tmpvar_93;
  tmpvar_93 = any(tmpvar_92);
  highp float tmpvar_94;
  if (tmpvar_93) {
    tmpvar_94 = 1.0;
  } else {
    tmpvar_94 = 0.0;
  };
  specularTerm_68 = (tmpvar_91 * tmpvar_94);
  mediump vec3 tmpvar_95;
  mediump float x_96;
  x_96 = (1.0 - tmpvar_78);
  tmpvar_95 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_96 * x_96)
   * 
    ((x_96 * x_96) * x_96)
  )));
  mediump float x_97;
  x_97 = (1.0 - nv_70);
  mediump vec3 tmpvar_98;
  tmpvar_98 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_97 * x_97) * (
    (x_97 * x_97)
   * x_97))));
  highp vec3 tmpvar_99;
  tmpvar_99 = (((tmpvar_7 * 
    (tmpvar_25 + (tmpvar_12 * diffuseTerm_69))
  ) + (
    (specularTerm_68 * tmpvar_12)
   * tmpvar_95)) + ((surfaceReduction_67 * tmpvar_26) * tmpvar_98));
  color_66 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.w = 1.0;
  tmpvar_100.xyz = color_66;
  c_1.w = tmpvar_100.w;
  c_1.xyz = color_66;
  mediump vec4 xlat_varoutput_101;
  xlat_varoutput_101.xyz = c_1.xyz;
  xlat_varoutput_101.w = 1.0;
  gl_FragData[0] = xlat_varoutput_101;
}


#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD4.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat2 * u_xlat0;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat4;
lowp float u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bvec3 u_xlatb9;
mediump vec3 u_xlat16_10;
mediump vec4 u_xlat16_11;
bvec3 u_xlatb12;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec3 u_xlat15;
mediump vec3 u_xlat16_18;
vec3 u_xlat24;
mediump vec3 u_xlat16_24;
mediump float u_xlat16_25;
float u_xlat28;
float u_xlat29;
mediump float u_xlat16_39;
float u_xlat42;
bool u_xlatb42;
float u_xlat43;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
mediump float u_xlat16_47;
mediump float u_xlat16_52;
mediump float u_xlat16_53;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_45 = (-_OcclusionStrength) + 1.0;
    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;
    u_xlat4 = (-_Glossiness) + 1.0;
    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_18.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb42){
        u_xlat16_47 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
        u_xlat16_47 = inversesqrt(u_xlat16_47);
        u_xlat16_6.xyz = vec3(u_xlat16_47) * u_xlat16_5.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat16_6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat16_6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyzx).xyz;
        u_xlat16_10.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
        u_xlat16_10.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
        u_xlat16_10.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
        u_xlat16_47 = min(u_xlat16_10.y, u_xlat16_10.x);
        u_xlat16_47 = min(u_xlat16_10.z, u_xlat16_47);
        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat16_6.xyz * vec3(u_xlat16_47) + u_xlat7.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
        u_xlat16_7.xyz = u_xlat16_5.xyz;
    //ENDIF
    }
    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;
    u_xlat16_47 = u_xlat4 * u_xlat16_47;
    u_xlat16_47 = u_xlat16_47 * 6.0;
    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_47);
    u_xlat16_10.x = u_xlat10_6.w + -1.0;
    u_xlat16_10.x = unity_SpecCube0_HDR.w * u_xlat16_10.x + 1.0;
    u_xlat16_10.x = u_xlat16_10.x * unity_SpecCube0_HDR.x;
    u_xlat16_24.xyz = u_xlat10_6.xyz * u_xlat16_10.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb42){
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb42){
            u_xlat16_11.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
            u_xlat16_11.x = inversesqrt(u_xlat16_11.x);
            u_xlat16_11.xyz = u_xlat16_5.xyz * u_xlat16_11.xxx;
            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat8.xyz = u_xlat8.xyz / u_xlat16_11.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_11.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_11.xyzx).xyz;
            u_xlat16_13.x = (u_xlatb12.x) ? u_xlat8.x : u_xlat9.x;
            u_xlat16_13.y = (u_xlatb12.y) ? u_xlat8.y : u_xlat9.y;
            u_xlat16_13.z = (u_xlatb12.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat16_53 = min(u_xlat16_13.y, u_xlat16_13.x);
            u_xlat16_53 = min(u_xlat16_13.z, u_xlat16_53);
            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat16_11.xyz * vec3(u_xlat16_53) + u_xlat8.xyz;
            u_xlat16_5.xyz = u_xlat5.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat16_5.xyz, u_xlat16_47);
        u_xlat16_11.x = u_xlat10_5.w + -1.0;
        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;
        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;
        u_xlat16_11.xyz = u_xlat10_5.xyz * u_xlat16_11.xxx;
        u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat10_6.xyz + (-u_xlat16_11.xyz);
        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_8.xyz + u_xlat16_11.xyz;
        u_xlat16_24.xyz = u_xlat24.xyz;
    //ENDIF
    }
    u_xlat16_10.xyz = vec3(u_xlat16_45) * u_xlat16_24.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat8.xyz = vec3(u_xlat42) * u_xlat8.xyz;
    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_52 = u_xlat14 + u_xlat14;
    u_xlat16_52 = u_xlat14 * u_xlat16_52;
    u_xlat16_52 = u_xlat16_52 * u_xlat4 + -0.5;
    u_xlat16_11.x = (-u_xlat1.x) + 1.0;
    u_xlat16_25 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_25;
    u_xlat16_11.x = u_xlat16_52 * u_xlat16_11.x + 1.0;
    u_xlat16_25 = -abs(u_xlat42) + 1.0;
    u_xlat16_39 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_39;
    u_xlat16_52 = u_xlat16_52 * u_xlat16_25 + 1.0;
    u_xlat16_52 = u_xlat16_52 * u_xlat16_11.x;
    u_xlat28 = u_xlat1.x * u_xlat16_52;
    u_xlat15.x = u_xlat4 * u_xlat4;
    u_xlat15.x = max(u_xlat15.x, 0.00200000009);
    u_xlat29 = (-u_xlat15.x) + 1.0;
    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;
    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;
    u_xlat42 = abs(u_xlat42) * u_xlat29;
    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat29 = u_xlat15.x * u_xlat15.x;
    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);
    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;
    u_xlat29 = u_xlat29 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat29 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat42;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat42 = u_xlat15.x * u_xlat4;
    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;
    u_xlat16_52 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_52!=0.0);
#else
    u_xlatb1 = u_xlat16_52!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_44 = (-u_xlat16_44) + 1.0;
    u_xlat16_44 = u_xlat16_44 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
    u_xlat16_11.xzw = vec3(u_xlat28) * _LightColor0.xyz;
    u_xlat16_11.xzw = u_xlat16_18.xyz * vec3(u_xlat16_45) + u_xlat16_11.xzw;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat16_45 = (-u_xlat14) + 1.0;
    u_xlat16_52 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_52 = u_xlat16_52 * u_xlat16_52;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_52;
    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_11.xzw + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_10.xyz * vec3(u_xlat42);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);
    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN _EMISSION VERTEXLIGHT_ON 
-- Vertex shader for "gles":
// Stats: 177 math, 6 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_9.zw;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = o_17;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  mediump float tmpvar_10;
  tmpvar_10 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_8 = (tmpvar_7 * tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_3 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - tmpvar_3), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_14 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  atten_2 = tmpvar_20;
  mediump float occ_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_21 = tmpvar_22;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump float occlusion_24;
  occlusion_24 = ((1.0 - _OcclusionStrength) + (occ_21 * _OcclusionStrength));
  highp vec4 tmpvar_25;
  highp vec4 tmpvar_26;
  tmpvar_25 = unity_SpecCube0_HDR;
  tmpvar_26 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_27;
  worldViewDir_27 = -(tmpvar_12);
  mediump vec3 Normal_28;
  Normal_28 = tmpvar_11;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  tmpvar_29 = tmpvar_30;
  mediump vec3 I_32;
  I_32 = -(worldViewDir_27);
  mediump vec3 tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_33 = (tmpvar_13 * atten_23);
  tmpvar_34 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_35;
  tmpvar_35 = (I_32 - (2.0 * (
    dot (Normal_28, I_32)
   * Normal_28)));
  mediump vec3 originalReflUVW_36;
  mediump vec3 specular_37;
  originalReflUVW_36 = tmpvar_35;
  mediump vec3 worldRefl_38;
  worldRefl_38 = tmpvar_35;
  highp vec3 worldPos_39;
  worldPos_39 = tmpvar_3;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_40;
    mediump vec3 rbmax_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = normalize(tmpvar_35);
    highp vec3 tmpvar_43;
    tmpvar_43 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_3) / tmpvar_42);
    rbmax_41 = tmpvar_43;
    highp vec3 tmpvar_44;
    tmpvar_44 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_3) / tmpvar_42);
    rbmin_40 = tmpvar_44;
    bvec3 tmpvar_45;
    tmpvar_45 = greaterThan (tmpvar_42, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_46;
    if (tmpvar_45.x) {
      tmpvar_46 = rbmax_41.x;
    } else {
      tmpvar_46 = rbmin_40.x;
    };
    mediump float tmpvar_47;
    if (tmpvar_45.y) {
      tmpvar_47 = rbmax_41.y;
    } else {
      tmpvar_47 = rbmin_40.y;
    };
    mediump float tmpvar_48;
    if (tmpvar_45.z) {
      tmpvar_48 = rbmax_41.z;
    } else {
      tmpvar_48 = rbmin_40.z;
    };
    worldPos_39 = (tmpvar_3 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_38 = (worldPos_39 + (tmpvar_42 * min (
      min (tmpvar_46, tmpvar_47)
    , tmpvar_48)));
  };
  tmpvar_35 = worldRefl_38;
  mediump vec4 hdr_49;
  hdr_49 = tmpvar_25;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = worldRefl_38;
  tmpvar_50.w = ((tmpvar_29 * (1.7 - 
    (0.7 * tmpvar_29)
  )) * 6.0);
  lowp vec4 tmpvar_51;
  tmpvar_51 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_38, tmpvar_50.w);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec3 tmpvar_53;
  tmpvar_53 = ((hdr_49.x * (
    (hdr_49.w * (tmpvar_52.w - 1.0))
   + 1.0)) * tmpvar_52.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_54;
    worldRefl_54 = originalReflUVW_36;
    highp vec3 worldPos_55;
    worldPos_55 = tmpvar_3;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_56;
      mediump vec3 rbmax_57;
      mediump vec3 tmpvar_58;
      tmpvar_58 = normalize(originalReflUVW_36);
      highp vec3 tmpvar_59;
      tmpvar_59 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_3) / tmpvar_58);
      rbmax_57 = tmpvar_59;
      highp vec3 tmpvar_60;
      tmpvar_60 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_3) / tmpvar_58);
      rbmin_56 = tmpvar_60;
      bvec3 tmpvar_61;
      tmpvar_61 = greaterThan (tmpvar_58, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_62;
      if (tmpvar_61.x) {
        tmpvar_62 = rbmax_57.x;
      } else {
        tmpvar_62 = rbmin_56.x;
      };
      mediump float tmpvar_63;
      if (tmpvar_61.y) {
        tmpvar_63 = rbmax_57.y;
      } else {
        tmpvar_63 = rbmin_56.y;
      };
      mediump float tmpvar_64;
      if (tmpvar_61.z) {
        tmpvar_64 = rbmax_57.z;
      } else {
        tmpvar_64 = rbmin_56.z;
      };
      worldPos_55 = (tmpvar_3 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_54 = (worldPos_55 + (tmpvar_58 * min (
        min (tmpvar_62, tmpvar_63)
      , tmpvar_64)));
    };
    tmpvar_35 = worldRefl_54;
    mediump vec4 hdr_65;
    hdr_65 = tmpvar_26;
    mediump vec4 tmpvar_66;
    tmpvar_66.xyz = worldRefl_54;
    tmpvar_66.w = ((tmpvar_29 * (1.7 - 
      (0.7 * tmpvar_29)
    )) * 6.0);
    lowp vec4 tmpvar_67;
    tmpvar_67 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_54, tmpvar_66.w);
    mediump vec4 tmpvar_68;
    tmpvar_68 = tmpvar_67;
    mediump vec3 tmpvar_69;
    tmpvar_69 = ((hdr_65.x * (
      (hdr_65.w * (tmpvar_68.w - 1.0))
     + 1.0)) * tmpvar_68.xyz);
    highp vec3 tmpvar_70;
    tmpvar_70 = mix (tmpvar_69, tmpvar_53, unity_SpecCube0_BoxMin.www);
    specular_37 = tmpvar_70;
  } else {
    specular_37 = tmpvar_53;
  };
  tmpvar_34 = (specular_37 * occlusion_24);
  highp vec3 viewDir_71;
  viewDir_71 = -(tmpvar_12);
  mediump vec3 color_72;
  mediump float surfaceReduction_73;
  highp float specularTerm_74;
  mediump float diffuseTerm_75;
  mediump float nv_76;
  highp float tmpvar_77;
  highp float smoothness_78;
  smoothness_78 = tmpvar_6;
  tmpvar_77 = (1.0 - smoothness_78);
  highp vec3 tmpvar_79;
  highp vec3 inVec_80;
  inVec_80 = (_WorldSpaceLightPos0.xyz + viewDir_71);
  tmpvar_79 = (inVec_80 * inversesqrt(max (0.001, 
    dot (inVec_80, inVec_80)
  )));
  highp float tmpvar_81;
  tmpvar_81 = abs(dot (tmpvar_11, viewDir_71));
  nv_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (tmpvar_11, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_11, tmpvar_79), 0.0, 1.0);
  mediump float tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_79), 0.0, 1.0);
  tmpvar_84 = tmpvar_85;
  mediump float tmpvar_86;
  mediump float NdotL_87;
  NdotL_87 = tmpvar_82;
  mediump float perceptualRoughness_88;
  perceptualRoughness_88 = tmpvar_77;
  mediump float tmpvar_89;
  tmpvar_89 = (0.5 + ((2.0 * tmpvar_84) * (tmpvar_84 * perceptualRoughness_88)));
  mediump float x_90;
  x_90 = (1.0 - NdotL_87);
  mediump float x_91;
  x_91 = (1.0 - nv_76);
  tmpvar_86 = ((1.0 + (
    (tmpvar_89 - 1.0)
   * 
    ((x_90 * x_90) * ((x_90 * x_90) * x_90))
  )) * (1.0 + (
    (tmpvar_89 - 1.0)
   * 
    ((x_91 * x_91) * ((x_91 * x_91) * x_91))
  )));
  highp float tmpvar_92;
  tmpvar_92 = (tmpvar_86 * tmpvar_82);
  diffuseTerm_75 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = max ((tmpvar_77 * tmpvar_77), 0.002);
  highp float NdotV_94;
  NdotV_94 = nv_76;
  highp float tmpvar_95;
  tmpvar_95 = (tmpvar_93 * tmpvar_93);
  highp float tmpvar_96;
  tmpvar_96 = (((
    (tmpvar_83 * tmpvar_95)
   - tmpvar_83) * tmpvar_83) + 1.0);
  highp float tmpvar_97;
  tmpvar_97 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_82 * (
        (NdotV_94 * (1.0 - tmpvar_93))
       + tmpvar_93)) + (NdotV_94 * (
        (tmpvar_82 * (1.0 - tmpvar_93))
       + tmpvar_93))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_95)
     / 
      ((tmpvar_96 * tmpvar_96) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_82));
  specularTerm_74 = tmpvar_97;
  surfaceReduction_73 = (1.0 - ((0.28 * tmpvar_93) * tmpvar_77));
  bvec3 tmpvar_98;
  tmpvar_98 = bvec3(tmpvar_9);
  bool tmpvar_99;
  tmpvar_99 = any(tmpvar_98);
  highp float tmpvar_100;
  if (tmpvar_99) {
    tmpvar_100 = 1.0;
  } else {
    tmpvar_100 = 0.0;
  };
  specularTerm_74 = (tmpvar_97 * tmpvar_100);
  mediump vec3 tmpvar_101;
  mediump float x_102;
  x_102 = (1.0 - tmpvar_84);
  tmpvar_101 = (tmpvar_9 + ((1.0 - tmpvar_9) * (
    (x_102 * x_102)
   * 
    ((x_102 * x_102) * x_102)
  )));
  mediump float x_103;
  x_103 = (1.0 - nv_76);
  mediump vec3 tmpvar_104;
  tmpvar_104 = mix (tmpvar_9, vec3(clamp ((mg_5.y + 
    (1.0 - tmpvar_10)
  ), 0.0, 1.0)), vec3(((x_103 * x_103) * (
    (x_103 * x_103)
   * x_103))));
  highp vec3 tmpvar_105;
  tmpvar_105 = (((tmpvar_8 * 
    (tmpvar_33 * diffuseTerm_75)
  ) + (
    (specularTerm_74 * tmpvar_33)
   * tmpvar_101)) + ((surfaceReduction_73 * tmpvar_34) * tmpvar_104));
  color_72 = tmpvar_105;
  mediump vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = color_72;
  c_1.w = tmpvar_106.w;
  lowp vec4 tmpvar_107;
  tmpvar_107 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_72 + (tmpvar_107.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_108;
  xlat_varoutput_108.xyz = c_1.xyz;
  xlat_varoutput_108.w = 1.0;
  gl_FragData[0] = xlat_varoutput_108;
}


#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bvec3 u_xlatb9;
mediump vec3 u_xlat16_10;
bvec3 u_xlatb11;
mediump vec3 u_xlat16_12;
float u_xlat13;
float u_xlat14;
vec3 u_xlat19;
mediump vec3 u_xlat16_19;
float u_xlat26;
float u_xlat27;
float u_xlat39;
float u_xlat40;
lowp float u_xlat10_40;
mediump float u_xlat16_41;
mediump float u_xlat16_42;
mediump float u_xlat16_45;
mediump float u_xlat16_46;
mediump float u_xlat16_47;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = (-u_xlat40) + u_xlat4.x;
    u_xlat40 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat40;
    u_xlat40 = u_xlat40 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat40 = min(max(u_xlat40, 0.0), 1.0);
#else
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4.x = texture(_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat16_42 = u_xlat40 + u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_42 = min(max(u_xlat16_42, 0.0), 1.0);
#else
    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);
#endif
    u_xlat10_40 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;
    u_xlat16_6.x = u_xlat10_40 * _OcclusionStrength + u_xlat16_6.x;
    u_xlat40 = (-_Glossiness) + 1.0;
    u_xlat16_19.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;
    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat1.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb4){
        u_xlat16_42 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);
        u_xlat16_42 = inversesqrt(u_xlat16_42);
        u_xlat16_8.xyz = vec3(u_xlat16_42) * u_xlat16_19.xyz;
        u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat4.xyz = u_xlat4.xyz / u_xlat16_8.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_8.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyzx).xyz;
        u_xlat16_10.x = (u_xlatb9.x) ? u_xlat4.x : u_xlat5.x;
        u_xlat16_10.y = (u_xlatb9.y) ? u_xlat4.y : u_xlat5.y;
        u_xlat16_10.z = (u_xlatb9.z) ? u_xlat4.z : u_xlat5.z;
        u_xlat16_42 = min(u_xlat16_10.y, u_xlat16_10.x);
        u_xlat16_42 = min(u_xlat16_10.z, u_xlat16_42);
        u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat4.xyz = u_xlat16_8.xyz * vec3(u_xlat16_42) + u_xlat4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_4.xyz = u_xlat16_19.xyz;
    //ENDIF
    }
    u_xlat16_42 = (-u_xlat40) * 0.699999988 + 1.70000005;
    u_xlat16_42 = u_xlat40 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * 6.0;
    u_xlat10_4 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_42);
    u_xlat16_46 = u_xlat10_4.w + -1.0;
    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;
    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_46);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb5 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb5 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb5){
            u_xlat16_47 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);
            u_xlat16_47 = inversesqrt(u_xlat16_47);
            u_xlat16_10.xyz = u_xlat16_19.xyz * vec3(u_xlat16_47);
            u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat5.xyz = u_xlat5.xyz / u_xlat16_10.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_10.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_10.xyzx).xyz;
            u_xlat16_12.x = (u_xlatb11.x) ? u_xlat5.x : u_xlat9.x;
            u_xlat16_12.y = (u_xlatb11.y) ? u_xlat5.y : u_xlat9.y;
            u_xlat16_12.z = (u_xlatb11.z) ? u_xlat5.z : u_xlat9.z;
            u_xlat16_47 = min(u_xlat16_12.y, u_xlat16_12.x);
            u_xlat16_47 = min(u_xlat16_12.z, u_xlat16_47);
            u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat19.xyz = u_xlat16_10.xyz * vec3(u_xlat16_47) + u_xlat5.xyz;
            u_xlat16_19.xyz = u_xlat19.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat16_19.xyz, u_xlat16_42);
        u_xlat16_42 = u_xlat10_5.w + -1.0;
        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;
        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;
        u_xlat16_19.xyz = u_xlat10_5.xyz * vec3(u_xlat16_42);
        u_xlat16_5.xyz = vec3(u_xlat16_46) * u_xlat10_4.xyz + (-u_xlat16_19.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_19.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;
    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;
    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_42 = u_xlat13 + u_xlat13;
    u_xlat16_42 = u_xlat13 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;
    u_xlat16_45 = (-u_xlat1.x) + 1.0;
    u_xlat16_46 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_46;
    u_xlat16_45 = u_xlat16_42 * u_xlat16_45 + 1.0;
    u_xlat16_46 = -abs(u_xlat39) + 1.0;
    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_46 + 1.0;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_45;
    u_xlat26 = u_xlat1.x * u_xlat16_42;
    u_xlat14 = u_xlat40 * u_xlat40;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat27 = (-u_xlat14) + 1.0;
    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;
    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;
    u_xlat39 = abs(u_xlat39) * u_xlat27;
    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat27 = u_xlat14 * u_xlat14;
    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);
    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;
    u_xlat27 = u_xlat27 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat27 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat39;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat39 = u_xlat14 * u_xlat40;
    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;
    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_42!=0.0);
#else
    u_xlatb1 = u_xlat16_42!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_41 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_41 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_42 = (-u_xlat13) + 1.0;
    u_xlat16_45 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_45;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat39);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);
    u_xlat16_2.xyz = vec3(u_xlat16_46) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat10_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles":
// Stats: 175 math, 5 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_9.zw;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = o_17;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  mediump float tmpvar_10;
  tmpvar_10 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_8 = (tmpvar_7 * tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_3 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - tmpvar_3), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_14 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  atten_2 = tmpvar_20;
  mediump float occ_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_21 = tmpvar_22;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump float occlusion_24;
  occlusion_24 = ((1.0 - _OcclusionStrength) + (occ_21 * _OcclusionStrength));
  highp vec4 tmpvar_25;
  highp vec4 tmpvar_26;
  tmpvar_25 = unity_SpecCube0_HDR;
  tmpvar_26 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_27;
  worldViewDir_27 = -(tmpvar_12);
  mediump vec3 Normal_28;
  Normal_28 = tmpvar_11;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  tmpvar_29 = tmpvar_30;
  mediump vec3 I_32;
  I_32 = -(worldViewDir_27);
  mediump vec3 tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_33 = (tmpvar_13 * atten_23);
  tmpvar_34 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_35;
  tmpvar_35 = (I_32 - (2.0 * (
    dot (Normal_28, I_32)
   * Normal_28)));
  mediump vec3 originalReflUVW_36;
  mediump vec3 specular_37;
  originalReflUVW_36 = tmpvar_35;
  mediump vec3 worldRefl_38;
  worldRefl_38 = tmpvar_35;
  highp vec3 worldPos_39;
  worldPos_39 = tmpvar_3;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_40;
    mediump vec3 rbmax_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = normalize(tmpvar_35);
    highp vec3 tmpvar_43;
    tmpvar_43 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_3) / tmpvar_42);
    rbmax_41 = tmpvar_43;
    highp vec3 tmpvar_44;
    tmpvar_44 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_3) / tmpvar_42);
    rbmin_40 = tmpvar_44;
    bvec3 tmpvar_45;
    tmpvar_45 = greaterThan (tmpvar_42, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_46;
    if (tmpvar_45.x) {
      tmpvar_46 = rbmax_41.x;
    } else {
      tmpvar_46 = rbmin_40.x;
    };
    mediump float tmpvar_47;
    if (tmpvar_45.y) {
      tmpvar_47 = rbmax_41.y;
    } else {
      tmpvar_47 = rbmin_40.y;
    };
    mediump float tmpvar_48;
    if (tmpvar_45.z) {
      tmpvar_48 = rbmax_41.z;
    } else {
      tmpvar_48 = rbmin_40.z;
    };
    worldPos_39 = (tmpvar_3 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_38 = (worldPos_39 + (tmpvar_42 * min (
      min (tmpvar_46, tmpvar_47)
    , tmpvar_48)));
  };
  tmpvar_35 = worldRefl_38;
  mediump vec4 hdr_49;
  hdr_49 = tmpvar_25;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = worldRefl_38;
  tmpvar_50.w = ((tmpvar_29 * (1.7 - 
    (0.7 * tmpvar_29)
  )) * 6.0);
  lowp vec4 tmpvar_51;
  tmpvar_51 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_38, tmpvar_50.w);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec3 tmpvar_53;
  tmpvar_53 = ((hdr_49.x * (
    (hdr_49.w * (tmpvar_52.w - 1.0))
   + 1.0)) * tmpvar_52.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_54;
    worldRefl_54 = originalReflUVW_36;
    highp vec3 worldPos_55;
    worldPos_55 = tmpvar_3;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_56;
      mediump vec3 rbmax_57;
      mediump vec3 tmpvar_58;
      tmpvar_58 = normalize(originalReflUVW_36);
      highp vec3 tmpvar_59;
      tmpvar_59 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_3) / tmpvar_58);
      rbmax_57 = tmpvar_59;
      highp vec3 tmpvar_60;
      tmpvar_60 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_3) / tmpvar_58);
      rbmin_56 = tmpvar_60;
      bvec3 tmpvar_61;
      tmpvar_61 = greaterThan (tmpvar_58, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_62;
      if (tmpvar_61.x) {
        tmpvar_62 = rbmax_57.x;
      } else {
        tmpvar_62 = rbmin_56.x;
      };
      mediump float tmpvar_63;
      if (tmpvar_61.y) {
        tmpvar_63 = rbmax_57.y;
      } else {
        tmpvar_63 = rbmin_56.y;
      };
      mediump float tmpvar_64;
      if (tmpvar_61.z) {
        tmpvar_64 = rbmax_57.z;
      } else {
        tmpvar_64 = rbmin_56.z;
      };
      worldPos_55 = (tmpvar_3 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_54 = (worldPos_55 + (tmpvar_58 * min (
        min (tmpvar_62, tmpvar_63)
      , tmpvar_64)));
    };
    tmpvar_35 = worldRefl_54;
    mediump vec4 hdr_65;
    hdr_65 = tmpvar_26;
    mediump vec4 tmpvar_66;
    tmpvar_66.xyz = worldRefl_54;
    tmpvar_66.w = ((tmpvar_29 * (1.7 - 
      (0.7 * tmpvar_29)
    )) * 6.0);
    lowp vec4 tmpvar_67;
    tmpvar_67 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_54, tmpvar_66.w);
    mediump vec4 tmpvar_68;
    tmpvar_68 = tmpvar_67;
    mediump vec3 tmpvar_69;
    tmpvar_69 = ((hdr_65.x * (
      (hdr_65.w * (tmpvar_68.w - 1.0))
     + 1.0)) * tmpvar_68.xyz);
    highp vec3 tmpvar_70;
    tmpvar_70 = mix (tmpvar_69, tmpvar_53, unity_SpecCube0_BoxMin.www);
    specular_37 = tmpvar_70;
  } else {
    specular_37 = tmpvar_53;
  };
  tmpvar_34 = (specular_37 * occlusion_24);
  highp vec3 viewDir_71;
  viewDir_71 = -(tmpvar_12);
  mediump vec3 color_72;
  mediump float surfaceReduction_73;
  highp float specularTerm_74;
  mediump float diffuseTerm_75;
  mediump float nv_76;
  highp float tmpvar_77;
  highp float smoothness_78;
  smoothness_78 = tmpvar_6;
  tmpvar_77 = (1.0 - smoothness_78);
  highp vec3 tmpvar_79;
  highp vec3 inVec_80;
  inVec_80 = (_WorldSpaceLightPos0.xyz + viewDir_71);
  tmpvar_79 = (inVec_80 * inversesqrt(max (0.001, 
    dot (inVec_80, inVec_80)
  )));
  highp float tmpvar_81;
  tmpvar_81 = abs(dot (tmpvar_11, viewDir_71));
  nv_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (tmpvar_11, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_11, tmpvar_79), 0.0, 1.0);
  mediump float tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_79), 0.0, 1.0);
  tmpvar_84 = tmpvar_85;
  mediump float tmpvar_86;
  mediump float NdotL_87;
  NdotL_87 = tmpvar_82;
  mediump float perceptualRoughness_88;
  perceptualRoughness_88 = tmpvar_77;
  mediump float tmpvar_89;
  tmpvar_89 = (0.5 + ((2.0 * tmpvar_84) * (tmpvar_84 * perceptualRoughness_88)));
  mediump float x_90;
  x_90 = (1.0 - NdotL_87);
  mediump float x_91;
  x_91 = (1.0 - nv_76);
  tmpvar_86 = ((1.0 + (
    (tmpvar_89 - 1.0)
   * 
    ((x_90 * x_90) * ((x_90 * x_90) * x_90))
  )) * (1.0 + (
    (tmpvar_89 - 1.0)
   * 
    ((x_91 * x_91) * ((x_91 * x_91) * x_91))
  )));
  highp float tmpvar_92;
  tmpvar_92 = (tmpvar_86 * tmpvar_82);
  diffuseTerm_75 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = max ((tmpvar_77 * tmpvar_77), 0.002);
  highp float NdotV_94;
  NdotV_94 = nv_76;
  highp float tmpvar_95;
  tmpvar_95 = (tmpvar_93 * tmpvar_93);
  highp float tmpvar_96;
  tmpvar_96 = (((
    (tmpvar_83 * tmpvar_95)
   - tmpvar_83) * tmpvar_83) + 1.0);
  highp float tmpvar_97;
  tmpvar_97 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_82 * (
        (NdotV_94 * (1.0 - tmpvar_93))
       + tmpvar_93)) + (NdotV_94 * (
        (tmpvar_82 * (1.0 - tmpvar_93))
       + tmpvar_93))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_95)
     / 
      ((tmpvar_96 * tmpvar_96) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_82));
  specularTerm_74 = tmpvar_97;
  surfaceReduction_73 = (1.0 - ((0.28 * tmpvar_93) * tmpvar_77));
  bvec3 tmpvar_98;
  tmpvar_98 = bvec3(tmpvar_9);
  bool tmpvar_99;
  tmpvar_99 = any(tmpvar_98);
  highp float tmpvar_100;
  if (tmpvar_99) {
    tmpvar_100 = 1.0;
  } else {
    tmpvar_100 = 0.0;
  };
  specularTerm_74 = (tmpvar_97 * tmpvar_100);
  mediump vec3 tmpvar_101;
  mediump float x_102;
  x_102 = (1.0 - tmpvar_84);
  tmpvar_101 = (tmpvar_9 + ((1.0 - tmpvar_9) * (
    (x_102 * x_102)
   * 
    ((x_102 * x_102) * x_102)
  )));
  mediump float x_103;
  x_103 = (1.0 - nv_76);
  mediump vec3 tmpvar_104;
  tmpvar_104 = mix (tmpvar_9, vec3(clamp ((mg_5.y + 
    (1.0 - tmpvar_10)
  ), 0.0, 1.0)), vec3(((x_103 * x_103) * (
    (x_103 * x_103)
   * x_103))));
  highp vec3 tmpvar_105;
  tmpvar_105 = (((tmpvar_8 * 
    (tmpvar_33 * diffuseTerm_75)
  ) + (
    (specularTerm_74 * tmpvar_33)
   * tmpvar_101)) + ((surfaceReduction_73 * tmpvar_34) * tmpvar_104));
  color_72 = tmpvar_105;
  mediump vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = color_72;
  c_1.w = tmpvar_106.w;
  c_1.xyz = color_72;
  mediump vec4 xlat_varoutput_107;
  xlat_varoutput_107.xyz = c_1.xyz;
  xlat_varoutput_107.w = 1.0;
  gl_FragData[0] = xlat_varoutput_107;
}


#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bvec3 u_xlatb9;
mediump vec3 u_xlat16_10;
bvec3 u_xlatb11;
mediump vec3 u_xlat16_12;
float u_xlat13;
float u_xlat14;
vec3 u_xlat19;
mediump vec3 u_xlat16_19;
float u_xlat26;
float u_xlat27;
float u_xlat39;
float u_xlat40;
lowp float u_xlat10_40;
mediump float u_xlat16_41;
mediump float u_xlat16_42;
mediump float u_xlat16_45;
mediump float u_xlat16_46;
mediump float u_xlat16_47;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = (-u_xlat40) + u_xlat4.x;
    u_xlat40 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat40;
    u_xlat40 = u_xlat40 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat40 = min(max(u_xlat40, 0.0), 1.0);
#else
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4.x = texture(_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat16_42 = u_xlat40 + u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_42 = min(max(u_xlat16_42, 0.0), 1.0);
#else
    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);
#endif
    u_xlat10_40 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;
    u_xlat16_6.x = u_xlat10_40 * _OcclusionStrength + u_xlat16_6.x;
    u_xlat40 = (-_Glossiness) + 1.0;
    u_xlat16_19.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;
    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat1.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb4){
        u_xlat16_42 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);
        u_xlat16_42 = inversesqrt(u_xlat16_42);
        u_xlat16_8.xyz = vec3(u_xlat16_42) * u_xlat16_19.xyz;
        u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat4.xyz = u_xlat4.xyz / u_xlat16_8.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_8.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyzx).xyz;
        u_xlat16_10.x = (u_xlatb9.x) ? u_xlat4.x : u_xlat5.x;
        u_xlat16_10.y = (u_xlatb9.y) ? u_xlat4.y : u_xlat5.y;
        u_xlat16_10.z = (u_xlatb9.z) ? u_xlat4.z : u_xlat5.z;
        u_xlat16_42 = min(u_xlat16_10.y, u_xlat16_10.x);
        u_xlat16_42 = min(u_xlat16_10.z, u_xlat16_42);
        u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat4.xyz = u_xlat16_8.xyz * vec3(u_xlat16_42) + u_xlat4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_4.xyz = u_xlat16_19.xyz;
    //ENDIF
    }
    u_xlat16_42 = (-u_xlat40) * 0.699999988 + 1.70000005;
    u_xlat16_42 = u_xlat40 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * 6.0;
    u_xlat10_4 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_42);
    u_xlat16_46 = u_xlat10_4.w + -1.0;
    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;
    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_46);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb5 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb5 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb5){
            u_xlat16_47 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);
            u_xlat16_47 = inversesqrt(u_xlat16_47);
            u_xlat16_10.xyz = u_xlat16_19.xyz * vec3(u_xlat16_47);
            u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat5.xyz = u_xlat5.xyz / u_xlat16_10.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_10.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_10.xyzx).xyz;
            u_xlat16_12.x = (u_xlatb11.x) ? u_xlat5.x : u_xlat9.x;
            u_xlat16_12.y = (u_xlatb11.y) ? u_xlat5.y : u_xlat9.y;
            u_xlat16_12.z = (u_xlatb11.z) ? u_xlat5.z : u_xlat9.z;
            u_xlat16_47 = min(u_xlat16_12.y, u_xlat16_12.x);
            u_xlat16_47 = min(u_xlat16_12.z, u_xlat16_47);
            u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat19.xyz = u_xlat16_10.xyz * vec3(u_xlat16_47) + u_xlat5.xyz;
            u_xlat16_19.xyz = u_xlat19.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat16_19.xyz, u_xlat16_42);
        u_xlat16_42 = u_xlat10_5.w + -1.0;
        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;
        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;
        u_xlat16_19.xyz = u_xlat10_5.xyz * vec3(u_xlat16_42);
        u_xlat16_5.xyz = vec3(u_xlat16_46) * u_xlat10_4.xyz + (-u_xlat16_19.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_19.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;
    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;
    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_42 = u_xlat13 + u_xlat13;
    u_xlat16_42 = u_xlat13 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;
    u_xlat16_45 = (-u_xlat1.x) + 1.0;
    u_xlat16_46 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_46;
    u_xlat16_45 = u_xlat16_42 * u_xlat16_45 + 1.0;
    u_xlat16_46 = -abs(u_xlat39) + 1.0;
    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_46 + 1.0;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_45;
    u_xlat26 = u_xlat1.x * u_xlat16_42;
    u_xlat14 = u_xlat40 * u_xlat40;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat27 = (-u_xlat14) + 1.0;
    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;
    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;
    u_xlat39 = abs(u_xlat39) * u_xlat27;
    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat27 = u_xlat14 * u_xlat14;
    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);
    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;
    u_xlat27 = u_xlat27 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat27 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat39;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat39 = u_xlat14 * u_xlat40;
    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;
    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_42!=0.0);
#else
    u_xlatb1 = u_xlat16_42!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_41 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_41 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_42 = (-u_xlat13) + 1.0;
    u_xlat16_45 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_45;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat39);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);
    u_xlat16_2.xyz = vec3(u_xlat16_46) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN LIGHTPROBE_SH _EMISSION VERTEXLIGHT_ON 
-- Vertex shader for "gles":
// Stats: 189 math, 6 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_9.zw;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_17;
  mediump vec4 ambientOrLightmapUV_22;
  ambientOrLightmapUV_22.w = 0.0;
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 normal_28;
  normal_28 = normalWorld_21;
  highp vec3 col_29;
  highp vec4 ndotl_30;
  highp vec4 lengthSq_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_8.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_8.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_31 = (tmpvar_32 * tmpvar_32);
  lengthSq_31 = (lengthSq_31 + (tmpvar_33 * tmpvar_33));
  lengthSq_31 = (lengthSq_31 + (tmpvar_34 * tmpvar_34));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (lengthSq_31, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_31 = tmpvar_35;
  ndotl_30 = (tmpvar_32 * normal_28.x);
  ndotl_30 = (ndotl_30 + (tmpvar_33 * normal_28.y));
  ndotl_30 = (ndotl_30 + (tmpvar_34 * normal_28.z));
  highp vec4 tmpvar_36;
  tmpvar_36 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_30 * inversesqrt(tmpvar_35)));
  ndotl_30 = tmpvar_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (tmpvar_36 * (1.0/((1.0 + 
    (tmpvar_35 * lightAttenSq_27)
  ))));
  col_29 = (lightColor0_23 * tmpvar_37.x);
  col_29 = (col_29 + (lightColor1_24 * tmpvar_37.y));
  col_29 = (col_29 + (lightColor2_25 * tmpvar_37.z));
  col_29 = (col_29 + (lightColor3_26 * tmpvar_37.w));
  ambientOrLightmapUV_22.xyz = col_29;
  mediump vec3 x1_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = (normalWorld_21.xyzz * normalWorld_21.yzzx);
  x1_38.x = dot (unity_SHBr, tmpvar_39);
  x1_38.y = dot (unity_SHBg, tmpvar_39);
  x1_38.z = dot (unity_SHBb, tmpvar_39);
  ambientOrLightmapUV_22.xyz = ((ambientOrLightmapUV_22.xyz * (
    (ambientOrLightmapUV_22.xyz * ((ambientOrLightmapUV_22.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_38 + (unity_SHC.xyz * 
    ((normalWorld_21.x * normalWorld_21.x) - (normalWorld_21.y * normalWorld_21.y))
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_22;
  xlv_TEXCOORD6 = o_18;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  mediump float tmpvar_10;
  tmpvar_10 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_8 = (tmpvar_7 * tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_3 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - tmpvar_3), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_14 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  atten_2 = tmpvar_20;
  mediump float occ_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_21 = tmpvar_22;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump float occlusion_24;
  occlusion_24 = ((1.0 - _OcclusionStrength) + (occ_21 * _OcclusionStrength));
  highp vec4 tmpvar_25;
  highp vec4 tmpvar_26;
  tmpvar_25 = unity_SpecCube0_HDR;
  tmpvar_26 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_27;
  worldViewDir_27 = -(tmpvar_12);
  mediump vec3 Normal_28;
  Normal_28 = tmpvar_11;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  tmpvar_29 = tmpvar_30;
  mediump vec3 I_32;
  I_32 = -(worldViewDir_27);
  mediump vec3 normalWorld_33;
  normalWorld_33 = tmpvar_11;
  mediump vec3 tmpvar_34;
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = normalWorld_33;
  mediump vec3 x_38;
  x_38.x = dot (unity_SHAr, tmpvar_37);
  x_38.y = dot (unity_SHAg, tmpvar_37);
  x_38.z = dot (unity_SHAb, tmpvar_37);
  tmpvar_34 = (tmpvar_13 * atten_23);
  tmpvar_35 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_38)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_24);
  tmpvar_36 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (I_32 - (2.0 * (
    dot (Normal_28, I_32)
   * Normal_28)));
  mediump vec3 originalReflUVW_40;
  mediump vec3 specular_41;
  originalReflUVW_40 = tmpvar_39;
  mediump vec3 worldRefl_42;
  worldRefl_42 = tmpvar_39;
  highp vec3 worldPos_43;
  worldPos_43 = tmpvar_3;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_44;
    mediump vec3 rbmax_45;
    mediump vec3 tmpvar_46;
    tmpvar_46 = normalize(tmpvar_39);
    highp vec3 tmpvar_47;
    tmpvar_47 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_3) / tmpvar_46);
    rbmax_45 = tmpvar_47;
    highp vec3 tmpvar_48;
    tmpvar_48 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_3) / tmpvar_46);
    rbmin_44 = tmpvar_48;
    bvec3 tmpvar_49;
    tmpvar_49 = greaterThan (tmpvar_46, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_50;
    if (tmpvar_49.x) {
      tmpvar_50 = rbmax_45.x;
    } else {
      tmpvar_50 = rbmin_44.x;
    };
    mediump float tmpvar_51;
    if (tmpvar_49.y) {
      tmpvar_51 = rbmax_45.y;
    } else {
      tmpvar_51 = rbmin_44.y;
    };
    mediump float tmpvar_52;
    if (tmpvar_49.z) {
      tmpvar_52 = rbmax_45.z;
    } else {
      tmpvar_52 = rbmin_44.z;
    };
    worldPos_43 = (tmpvar_3 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_42 = (worldPos_43 + (tmpvar_46 * min (
      min (tmpvar_50, tmpvar_51)
    , tmpvar_52)));
  };
  tmpvar_39 = worldRefl_42;
  mediump vec4 hdr_53;
  hdr_53 = tmpvar_25;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = worldRefl_42;
  tmpvar_54.w = ((tmpvar_29 * (1.7 - 
    (0.7 * tmpvar_29)
  )) * 6.0);
  lowp vec4 tmpvar_55;
  tmpvar_55 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_42, tmpvar_54.w);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec3 tmpvar_57;
  tmpvar_57 = ((hdr_53.x * (
    (hdr_53.w * (tmpvar_56.w - 1.0))
   + 1.0)) * tmpvar_56.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_58;
    worldRefl_58 = originalReflUVW_40;
    highp vec3 worldPos_59;
    worldPos_59 = tmpvar_3;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_60;
      mediump vec3 rbmax_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(originalReflUVW_40);
      highp vec3 tmpvar_63;
      tmpvar_63 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_3) / tmpvar_62);
      rbmax_61 = tmpvar_63;
      highp vec3 tmpvar_64;
      tmpvar_64 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_3) / tmpvar_62);
      rbmin_60 = tmpvar_64;
      bvec3 tmpvar_65;
      tmpvar_65 = greaterThan (tmpvar_62, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_66;
      if (tmpvar_65.x) {
        tmpvar_66 = rbmax_61.x;
      } else {
        tmpvar_66 = rbmin_60.x;
      };
      mediump float tmpvar_67;
      if (tmpvar_65.y) {
        tmpvar_67 = rbmax_61.y;
      } else {
        tmpvar_67 = rbmin_60.y;
      };
      mediump float tmpvar_68;
      if (tmpvar_65.z) {
        tmpvar_68 = rbmax_61.z;
      } else {
        tmpvar_68 = rbmin_60.z;
      };
      worldPos_59 = (tmpvar_3 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_58 = (worldPos_59 + (tmpvar_62 * min (
        min (tmpvar_66, tmpvar_67)
      , tmpvar_68)));
    };
    tmpvar_39 = worldRefl_58;
    mediump vec4 hdr_69;
    hdr_69 = tmpvar_26;
    mediump vec4 tmpvar_70;
    tmpvar_70.xyz = worldRefl_58;
    tmpvar_70.w = ((tmpvar_29 * (1.7 - 
      (0.7 * tmpvar_29)
    )) * 6.0);
    lowp vec4 tmpvar_71;
    tmpvar_71 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_58, tmpvar_70.w);
    mediump vec4 tmpvar_72;
    tmpvar_72 = tmpvar_71;
    mediump vec3 tmpvar_73;
    tmpvar_73 = ((hdr_69.x * (
      (hdr_69.w * (tmpvar_72.w - 1.0))
     + 1.0)) * tmpvar_72.xyz);
    highp vec3 tmpvar_74;
    tmpvar_74 = mix (tmpvar_73, tmpvar_57, unity_SpecCube0_BoxMin.www);
    specular_41 = tmpvar_74;
  } else {
    specular_41 = tmpvar_57;
  };
  tmpvar_36 = (specular_41 * occlusion_24);
  highp vec3 viewDir_75;
  viewDir_75 = -(tmpvar_12);
  mediump vec3 color_76;
  mediump float surfaceReduction_77;
  highp float specularTerm_78;
  mediump float diffuseTerm_79;
  mediump float nv_80;
  highp float tmpvar_81;
  highp float smoothness_82;
  smoothness_82 = tmpvar_6;
  tmpvar_81 = (1.0 - smoothness_82);
  highp vec3 tmpvar_83;
  highp vec3 inVec_84;
  inVec_84 = (_WorldSpaceLightPos0.xyz + viewDir_75);
  tmpvar_83 = (inVec_84 * inversesqrt(max (0.001, 
    dot (inVec_84, inVec_84)
  )));
  highp float tmpvar_85;
  tmpvar_85 = abs(dot (tmpvar_11, viewDir_75));
  nv_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (tmpvar_11, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_87;
  tmpvar_87 = clamp (dot (tmpvar_11, tmpvar_83), 0.0, 1.0);
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_83), 0.0, 1.0);
  tmpvar_88 = tmpvar_89;
  mediump float tmpvar_90;
  mediump float NdotL_91;
  NdotL_91 = tmpvar_86;
  mediump float perceptualRoughness_92;
  perceptualRoughness_92 = tmpvar_81;
  mediump float tmpvar_93;
  tmpvar_93 = (0.5 + ((2.0 * tmpvar_88) * (tmpvar_88 * perceptualRoughness_92)));
  mediump float x_94;
  x_94 = (1.0 - NdotL_91);
  mediump float x_95;
  x_95 = (1.0 - nv_80);
  tmpvar_90 = ((1.0 + (
    (tmpvar_93 - 1.0)
   * 
    ((x_94 * x_94) * ((x_94 * x_94) * x_94))
  )) * (1.0 + (
    (tmpvar_93 - 1.0)
   * 
    ((x_95 * x_95) * ((x_95 * x_95) * x_95))
  )));
  highp float tmpvar_96;
  tmpvar_96 = (tmpvar_90 * tmpvar_86);
  diffuseTerm_79 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = max ((tmpvar_81 * tmpvar_81), 0.002);
  highp float NdotV_98;
  NdotV_98 = nv_80;
  highp float tmpvar_99;
  tmpvar_99 = (tmpvar_97 * tmpvar_97);
  highp float tmpvar_100;
  tmpvar_100 = (((
    (tmpvar_87 * tmpvar_99)
   - tmpvar_87) * tmpvar_87) + 1.0);
  highp float tmpvar_101;
  tmpvar_101 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_86 * (
        (NdotV_98 * (1.0 - tmpvar_97))
       + tmpvar_97)) + (NdotV_98 * (
        (tmpvar_86 * (1.0 - tmpvar_97))
       + tmpvar_97))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_99)
     / 
      ((tmpvar_100 * tmpvar_100) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_86));
  specularTerm_78 = tmpvar_101;
  surfaceReduction_77 = (1.0 - ((0.28 * tmpvar_97) * tmpvar_81));
  bvec3 tmpvar_102;
  tmpvar_102 = bvec3(tmpvar_9);
  bool tmpvar_103;
  tmpvar_103 = any(tmpvar_102);
  highp float tmpvar_104;
  if (tmpvar_103) {
    tmpvar_104 = 1.0;
  } else {
    tmpvar_104 = 0.0;
  };
  specularTerm_78 = (tmpvar_101 * tmpvar_104);
  mediump vec3 tmpvar_105;
  mediump float x_106;
  x_106 = (1.0 - tmpvar_88);
  tmpvar_105 = (tmpvar_9 + ((1.0 - tmpvar_9) * (
    (x_106 * x_106)
   * 
    ((x_106 * x_106) * x_106)
  )));
  mediump float x_107;
  x_107 = (1.0 - nv_80);
  mediump vec3 tmpvar_108;
  tmpvar_108 = mix (tmpvar_9, vec3(clamp ((mg_5.y + 
    (1.0 - tmpvar_10)
  ), 0.0, 1.0)), vec3(((x_107 * x_107) * (
    (x_107 * x_107)
   * x_107))));
  highp vec3 tmpvar_109;
  tmpvar_109 = (((tmpvar_8 * 
    (tmpvar_35 + (tmpvar_34 * diffuseTerm_79))
  ) + (
    (specularTerm_78 * tmpvar_34)
   * tmpvar_105)) + ((surfaceReduction_77 * tmpvar_36) * tmpvar_108));
  color_76 = tmpvar_109;
  mediump vec4 tmpvar_110;
  tmpvar_110.w = 1.0;
  tmpvar_110.xyz = color_76;
  c_1.w = tmpvar_110.w;
  lowp vec4 tmpvar_111;
  tmpvar_111 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_76 + (tmpvar_111.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_112;
  xlat_varoutput_112.xyz = c_1.xyz;
  xlat_varoutput_112.w = 1.0;
  gl_FragData[0] = xlat_varoutput_112;
}


#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD4.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = inversesqrt(u_xlat3);
    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat4;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat3 * u_xlat1;
    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_6.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_6.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_6.x);
    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp float u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
lowp vec4 u_xlat10_9;
vec3 u_xlat10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_11;
bvec3 u_xlatb12;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec3 u_xlat15;
vec3 u_xlat18;
mediump vec3 u_xlat16_18;
lowp float u_xlat10_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
mediump vec3 u_xlat16_22;
float u_xlat28;
float u_xlat29;
float u_xlat42;
bool u_xlatb42;
float u_xlat43;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
mediump float u_xlat16_49;
mediump float u_xlat16_50;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat18.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat18.x = dot(u_xlat18.xyz, u_xlat18.xyz);
    u_xlat18.x = sqrt(u_xlat18.x);
    u_xlat18.x = (-u_xlat4.x) + u_xlat18.x;
    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat18.x + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_18 = texture(_ShadowMapTexture, u_xlat18.xy).x;
    u_xlat16_45 = u_xlat4.x + u_xlat10_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_45 = min(max(u_xlat16_45, 0.0), 1.0);
#else
    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);
#endif
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;
    u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;
    u_xlat4.x = (-_Glossiness) + 1.0;
    u_xlat16_20.x = dot(u_xlat15.xyz, u_xlat0.xyz);
    u_xlat16_20.x = u_xlat16_20.x + u_xlat16_20.x;
    u_xlat16_20.xyz = u_xlat0.xyz * (-u_xlat16_20.xxx) + u_xlat15.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_45) * _LightColor0.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_18.xyz = log2(u_xlat16_8.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb42){
        u_xlat16_45 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
        u_xlat16_45 = inversesqrt(u_xlat16_45);
        u_xlat16_8.xyz = vec3(u_xlat16_45) * u_xlat16_20.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_8.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat16_8.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyzx).xyz;
        u_xlat16_11.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat9.x;
        u_xlat16_11.y = (u_xlatb10.y) ? u_xlat5.y : u_xlat9.y;
        u_xlat16_11.z = (u_xlatb10.z) ? u_xlat5.z : u_xlat9.z;
        u_xlat16_45 = min(u_xlat16_11.y, u_xlat16_11.x);
        u_xlat16_45 = min(u_xlat16_11.z, u_xlat16_45);
        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat5.xyz = u_xlat16_8.xyz * vec3(u_xlat16_45) + u_xlat5.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat16_20.xyz;
    //ENDIF
    }
    u_xlat16_45 = (-u_xlat4.x) * 0.699999988 + 1.70000005;
    u_xlat16_45 = u_xlat16_45 * u_xlat4.x;
    u_xlat16_45 = u_xlat16_45 * 6.0;
    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_45);
    u_xlat16_49 = u_xlat10_5.w + -1.0;
    u_xlat16_49 = unity_SpecCube0_HDR.w * u_xlat16_49 + 1.0;
    u_xlat16_49 = u_xlat16_49 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(u_xlat16_49);
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb42){
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb42){
            u_xlat16_50 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
            u_xlat16_50 = inversesqrt(u_xlat16_50);
            u_xlat16_11.xyz = u_xlat16_20.xyz * vec3(u_xlat16_50);
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_11.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat16_11.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_11.xyzx).xyz;
            u_xlat16_13.x = (u_xlatb12.x) ? u_xlat9.x : u_xlat10.x;
            u_xlat16_13.y = (u_xlatb12.y) ? u_xlat9.y : u_xlat10.y;
            u_xlat16_13.z = (u_xlatb12.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat16_50 = min(u_xlat16_13.y, u_xlat16_13.x);
            u_xlat16_50 = min(u_xlat16_13.z, u_xlat16_50);
            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat20.xyz = u_xlat16_11.xyz * vec3(u_xlat16_50) + u_xlat9.xyz;
            u_xlat16_20.xyz = u_xlat20.xyz;
        //ENDIF
        }
        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat16_20.xyz, u_xlat16_45);
        u_xlat16_45 = u_xlat10_9.w + -1.0;
        u_xlat16_45 = unity_SpecCube1_HDR.w * u_xlat16_45 + 1.0;
        u_xlat16_45 = u_xlat16_45 * unity_SpecCube1_HDR.x;
        u_xlat16_20.xyz = u_xlat10_9.xyz * vec3(u_xlat16_45);
        u_xlat16_9.xyz = vec3(u_xlat16_49) * u_xlat10_5.xyz + (-u_xlat16_20.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_9.xyz + u_xlat16_20.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_20.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat9.xyz = vec3(u_xlat42) * u_xlat9.xyz;
    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_45 = u_xlat14 + u_xlat14;
    u_xlat16_45 = u_xlat14 * u_xlat16_45;
    u_xlat16_45 = u_xlat16_45 * u_xlat4.x + -0.5;
    u_xlat16_49 = (-u_xlat1.x) + 1.0;
    u_xlat16_8.x = u_xlat16_49 * u_xlat16_49;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_8.x;
    u_xlat16_49 = u_xlat16_45 * u_xlat16_49 + 1.0;
    u_xlat16_8.x = -abs(u_xlat42) + 1.0;
    u_xlat16_22.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_22.x;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_8.x + 1.0;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_49;
    u_xlat28 = u_xlat1.x * u_xlat16_45;
    u_xlat15.x = u_xlat4.x * u_xlat4.x;
    u_xlat15.x = max(u_xlat15.x, 0.00200000009);
    u_xlat29 = (-u_xlat15.x) + 1.0;
    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;
    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;
    u_xlat42 = abs(u_xlat42) * u_xlat29;
    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat29 = u_xlat15.x * u_xlat15.x;
    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);
    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;
    u_xlat29 = u_xlat29 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat29 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat42;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat42 = u_xlat15.x * u_xlat4.x;
    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;
    u_xlat16_45 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_45!=0.0);
#else
    u_xlatb1 = u_xlat16_45!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_44 = (-u_xlat16_44) + 1.0;
    u_xlat16_44 = u_xlat16_44 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
    u_xlat16_22.xyz = vec3(u_xlat28) * u_xlat16_7.xyz;
    u_xlat16_22.xyz = u_xlat16_18.xyz * u_xlat16_6.xxx + u_xlat16_22.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_45 = (-u_xlat14) + 1.0;
    u_xlat16_6.x = u_xlat16_45 * u_xlat16_45;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_6.x;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_22.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_20.xyz * vec3(u_xlat42);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);
    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat10_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles":
// Stats: 187 math, 5 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_9.zw;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_17;
  mediump vec4 ambientOrLightmapUV_22;
  ambientOrLightmapUV_22.w = 0.0;
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 normal_28;
  normal_28 = normalWorld_21;
  highp vec3 col_29;
  highp vec4 ndotl_30;
  highp vec4 lengthSq_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_8.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_8.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_31 = (tmpvar_32 * tmpvar_32);
  lengthSq_31 = (lengthSq_31 + (tmpvar_33 * tmpvar_33));
  lengthSq_31 = (lengthSq_31 + (tmpvar_34 * tmpvar_34));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (lengthSq_31, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_31 = tmpvar_35;
  ndotl_30 = (tmpvar_32 * normal_28.x);
  ndotl_30 = (ndotl_30 + (tmpvar_33 * normal_28.y));
  ndotl_30 = (ndotl_30 + (tmpvar_34 * normal_28.z));
  highp vec4 tmpvar_36;
  tmpvar_36 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_30 * inversesqrt(tmpvar_35)));
  ndotl_30 = tmpvar_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (tmpvar_36 * (1.0/((1.0 + 
    (tmpvar_35 * lightAttenSq_27)
  ))));
  col_29 = (lightColor0_23 * tmpvar_37.x);
  col_29 = (col_29 + (lightColor1_24 * tmpvar_37.y));
  col_29 = (col_29 + (lightColor2_25 * tmpvar_37.z));
  col_29 = (col_29 + (lightColor3_26 * tmpvar_37.w));
  ambientOrLightmapUV_22.xyz = col_29;
  mediump vec3 x1_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = (normalWorld_21.xyzz * normalWorld_21.yzzx);
  x1_38.x = dot (unity_SHBr, tmpvar_39);
  x1_38.y = dot (unity_SHBg, tmpvar_39);
  x1_38.z = dot (unity_SHBb, tmpvar_39);
  ambientOrLightmapUV_22.xyz = ((ambientOrLightmapUV_22.xyz * (
    (ambientOrLightmapUV_22.xyz * ((ambientOrLightmapUV_22.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_38 + (unity_SHC.xyz * 
    ((normalWorld_21.x * normalWorld_21.x) - (normalWorld_21.y * normalWorld_21.y))
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_22;
  xlv_TEXCOORD6 = o_18;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  mediump float tmpvar_10;
  tmpvar_10 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_8 = (tmpvar_7 * tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_3 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - tmpvar_3), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_14 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  atten_2 = tmpvar_20;
  mediump float occ_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_21 = tmpvar_22;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump float occlusion_24;
  occlusion_24 = ((1.0 - _OcclusionStrength) + (occ_21 * _OcclusionStrength));
  highp vec4 tmpvar_25;
  highp vec4 tmpvar_26;
  tmpvar_25 = unity_SpecCube0_HDR;
  tmpvar_26 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_27;
  worldViewDir_27 = -(tmpvar_12);
  mediump vec3 Normal_28;
  Normal_28 = tmpvar_11;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  tmpvar_29 = tmpvar_30;
  mediump vec3 I_32;
  I_32 = -(worldViewDir_27);
  mediump vec3 normalWorld_33;
  normalWorld_33 = tmpvar_11;
  mediump vec3 tmpvar_34;
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = normalWorld_33;
  mediump vec3 x_38;
  x_38.x = dot (unity_SHAr, tmpvar_37);
  x_38.y = dot (unity_SHAg, tmpvar_37);
  x_38.z = dot (unity_SHAb, tmpvar_37);
  tmpvar_34 = (tmpvar_13 * atten_23);
  tmpvar_35 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_38)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_24);
  tmpvar_36 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (I_32 - (2.0 * (
    dot (Normal_28, I_32)
   * Normal_28)));
  mediump vec3 originalReflUVW_40;
  mediump vec3 specular_41;
  originalReflUVW_40 = tmpvar_39;
  mediump vec3 worldRefl_42;
  worldRefl_42 = tmpvar_39;
  highp vec3 worldPos_43;
  worldPos_43 = tmpvar_3;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_44;
    mediump vec3 rbmax_45;
    mediump vec3 tmpvar_46;
    tmpvar_46 = normalize(tmpvar_39);
    highp vec3 tmpvar_47;
    tmpvar_47 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_3) / tmpvar_46);
    rbmax_45 = tmpvar_47;
    highp vec3 tmpvar_48;
    tmpvar_48 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_3) / tmpvar_46);
    rbmin_44 = tmpvar_48;
    bvec3 tmpvar_49;
    tmpvar_49 = greaterThan (tmpvar_46, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_50;
    if (tmpvar_49.x) {
      tmpvar_50 = rbmax_45.x;
    } else {
      tmpvar_50 = rbmin_44.x;
    };
    mediump float tmpvar_51;
    if (tmpvar_49.y) {
      tmpvar_51 = rbmax_45.y;
    } else {
      tmpvar_51 = rbmin_44.y;
    };
    mediump float tmpvar_52;
    if (tmpvar_49.z) {
      tmpvar_52 = rbmax_45.z;
    } else {
      tmpvar_52 = rbmin_44.z;
    };
    worldPos_43 = (tmpvar_3 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_42 = (worldPos_43 + (tmpvar_46 * min (
      min (tmpvar_50, tmpvar_51)
    , tmpvar_52)));
  };
  tmpvar_39 = worldRefl_42;
  mediump vec4 hdr_53;
  hdr_53 = tmpvar_25;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = worldRefl_42;
  tmpvar_54.w = ((tmpvar_29 * (1.7 - 
    (0.7 * tmpvar_29)
  )) * 6.0);
  lowp vec4 tmpvar_55;
  tmpvar_55 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_42, tmpvar_54.w);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec3 tmpvar_57;
  tmpvar_57 = ((hdr_53.x * (
    (hdr_53.w * (tmpvar_56.w - 1.0))
   + 1.0)) * tmpvar_56.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_58;
    worldRefl_58 = originalReflUVW_40;
    highp vec3 worldPos_59;
    worldPos_59 = tmpvar_3;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_60;
      mediump vec3 rbmax_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(originalReflUVW_40);
      highp vec3 tmpvar_63;
      tmpvar_63 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_3) / tmpvar_62);
      rbmax_61 = tmpvar_63;
      highp vec3 tmpvar_64;
      tmpvar_64 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_3) / tmpvar_62);
      rbmin_60 = tmpvar_64;
      bvec3 tmpvar_65;
      tmpvar_65 = greaterThan (tmpvar_62, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_66;
      if (tmpvar_65.x) {
        tmpvar_66 = rbmax_61.x;
      } else {
        tmpvar_66 = rbmin_60.x;
      };
      mediump float tmpvar_67;
      if (tmpvar_65.y) {
        tmpvar_67 = rbmax_61.y;
      } else {
        tmpvar_67 = rbmin_60.y;
      };
      mediump float tmpvar_68;
      if (tmpvar_65.z) {
        tmpvar_68 = rbmax_61.z;
      } else {
        tmpvar_68 = rbmin_60.z;
      };
      worldPos_59 = (tmpvar_3 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_58 = (worldPos_59 + (tmpvar_62 * min (
        min (tmpvar_66, tmpvar_67)
      , tmpvar_68)));
    };
    tmpvar_39 = worldRefl_58;
    mediump vec4 hdr_69;
    hdr_69 = tmpvar_26;
    mediump vec4 tmpvar_70;
    tmpvar_70.xyz = worldRefl_58;
    tmpvar_70.w = ((tmpvar_29 * (1.7 - 
      (0.7 * tmpvar_29)
    )) * 6.0);
    lowp vec4 tmpvar_71;
    tmpvar_71 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_58, tmpvar_70.w);
    mediump vec4 tmpvar_72;
    tmpvar_72 = tmpvar_71;
    mediump vec3 tmpvar_73;
    tmpvar_73 = ((hdr_69.x * (
      (hdr_69.w * (tmpvar_72.w - 1.0))
     + 1.0)) * tmpvar_72.xyz);
    highp vec3 tmpvar_74;
    tmpvar_74 = mix (tmpvar_73, tmpvar_57, unity_SpecCube0_BoxMin.www);
    specular_41 = tmpvar_74;
  } else {
    specular_41 = tmpvar_57;
  };
  tmpvar_36 = (specular_41 * occlusion_24);
  highp vec3 viewDir_75;
  viewDir_75 = -(tmpvar_12);
  mediump vec3 color_76;
  mediump float surfaceReduction_77;
  highp float specularTerm_78;
  mediump float diffuseTerm_79;
  mediump float nv_80;
  highp float tmpvar_81;
  highp float smoothness_82;
  smoothness_82 = tmpvar_6;
  tmpvar_81 = (1.0 - smoothness_82);
  highp vec3 tmpvar_83;
  highp vec3 inVec_84;
  inVec_84 = (_WorldSpaceLightPos0.xyz + viewDir_75);
  tmpvar_83 = (inVec_84 * inversesqrt(max (0.001, 
    dot (inVec_84, inVec_84)
  )));
  highp float tmpvar_85;
  tmpvar_85 = abs(dot (tmpvar_11, viewDir_75));
  nv_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (tmpvar_11, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_87;
  tmpvar_87 = clamp (dot (tmpvar_11, tmpvar_83), 0.0, 1.0);
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_83), 0.0, 1.0);
  tmpvar_88 = tmpvar_89;
  mediump float tmpvar_90;
  mediump float NdotL_91;
  NdotL_91 = tmpvar_86;
  mediump float perceptualRoughness_92;
  perceptualRoughness_92 = tmpvar_81;
  mediump float tmpvar_93;
  tmpvar_93 = (0.5 + ((2.0 * tmpvar_88) * (tmpvar_88 * perceptualRoughness_92)));
  mediump float x_94;
  x_94 = (1.0 - NdotL_91);
  mediump float x_95;
  x_95 = (1.0 - nv_80);
  tmpvar_90 = ((1.0 + (
    (tmpvar_93 - 1.0)
   * 
    ((x_94 * x_94) * ((x_94 * x_94) * x_94))
  )) * (1.0 + (
    (tmpvar_93 - 1.0)
   * 
    ((x_95 * x_95) * ((x_95 * x_95) * x_95))
  )));
  highp float tmpvar_96;
  tmpvar_96 = (tmpvar_90 * tmpvar_86);
  diffuseTerm_79 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = max ((tmpvar_81 * tmpvar_81), 0.002);
  highp float NdotV_98;
  NdotV_98 = nv_80;
  highp float tmpvar_99;
  tmpvar_99 = (tmpvar_97 * tmpvar_97);
  highp float tmpvar_100;
  tmpvar_100 = (((
    (tmpvar_87 * tmpvar_99)
   - tmpvar_87) * tmpvar_87) + 1.0);
  highp float tmpvar_101;
  tmpvar_101 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_86 * (
        (NdotV_98 * (1.0 - tmpvar_97))
       + tmpvar_97)) + (NdotV_98 * (
        (tmpvar_86 * (1.0 - tmpvar_97))
       + tmpvar_97))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_99)
     / 
      ((tmpvar_100 * tmpvar_100) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_86));
  specularTerm_78 = tmpvar_101;
  surfaceReduction_77 = (1.0 - ((0.28 * tmpvar_97) * tmpvar_81));
  bvec3 tmpvar_102;
  tmpvar_102 = bvec3(tmpvar_9);
  bool tmpvar_103;
  tmpvar_103 = any(tmpvar_102);
  highp float tmpvar_104;
  if (tmpvar_103) {
    tmpvar_104 = 1.0;
  } else {
    tmpvar_104 = 0.0;
  };
  specularTerm_78 = (tmpvar_101 * tmpvar_104);
  mediump vec3 tmpvar_105;
  mediump float x_106;
  x_106 = (1.0 - tmpvar_88);
  tmpvar_105 = (tmpvar_9 + ((1.0 - tmpvar_9) * (
    (x_106 * x_106)
   * 
    ((x_106 * x_106) * x_106)
  )));
  mediump float x_107;
  x_107 = (1.0 - nv_80);
  mediump vec3 tmpvar_108;
  tmpvar_108 = mix (tmpvar_9, vec3(clamp ((mg_5.y + 
    (1.0 - tmpvar_10)
  ), 0.0, 1.0)), vec3(((x_107 * x_107) * (
    (x_107 * x_107)
   * x_107))));
  highp vec3 tmpvar_109;
  tmpvar_109 = (((tmpvar_8 * 
    (tmpvar_35 + (tmpvar_34 * diffuseTerm_79))
  ) + (
    (specularTerm_78 * tmpvar_34)
   * tmpvar_105)) + ((surfaceReduction_77 * tmpvar_36) * tmpvar_108));
  color_76 = tmpvar_109;
  mediump vec4 tmpvar_110;
  tmpvar_110.w = 1.0;
  tmpvar_110.xyz = color_76;
  c_1.w = tmpvar_110.w;
  c_1.xyz = color_76;
  mediump vec4 xlat_varoutput_111;
  xlat_varoutput_111.xyz = c_1.xyz;
  xlat_varoutput_111.w = 1.0;
  gl_FragData[0] = xlat_varoutput_111;
}


#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD4.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = inversesqrt(u_xlat3);
    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat4;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat3 * u_xlat1;
    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_6.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_6.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_6.x);
    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp float u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
lowp vec4 u_xlat10_9;
vec3 u_xlat10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_11;
bvec3 u_xlatb12;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec3 u_xlat15;
vec3 u_xlat18;
mediump vec3 u_xlat16_18;
lowp float u_xlat10_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
mediump vec3 u_xlat16_22;
float u_xlat28;
float u_xlat29;
float u_xlat42;
bool u_xlatb42;
float u_xlat43;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
mediump float u_xlat16_49;
mediump float u_xlat16_50;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat18.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat18.x = dot(u_xlat18.xyz, u_xlat18.xyz);
    u_xlat18.x = sqrt(u_xlat18.x);
    u_xlat18.x = (-u_xlat4.x) + u_xlat18.x;
    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat18.x + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_18 = texture(_ShadowMapTexture, u_xlat18.xy).x;
    u_xlat16_45 = u_xlat4.x + u_xlat10_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_45 = min(max(u_xlat16_45, 0.0), 1.0);
#else
    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);
#endif
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;
    u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;
    u_xlat4.x = (-_Glossiness) + 1.0;
    u_xlat16_20.x = dot(u_xlat15.xyz, u_xlat0.xyz);
    u_xlat16_20.x = u_xlat16_20.x + u_xlat16_20.x;
    u_xlat16_20.xyz = u_xlat0.xyz * (-u_xlat16_20.xxx) + u_xlat15.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_45) * _LightColor0.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_18.xyz = log2(u_xlat16_8.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb42){
        u_xlat16_45 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
        u_xlat16_45 = inversesqrt(u_xlat16_45);
        u_xlat16_8.xyz = vec3(u_xlat16_45) * u_xlat16_20.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_8.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat16_8.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyzx).xyz;
        u_xlat16_11.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat9.x;
        u_xlat16_11.y = (u_xlatb10.y) ? u_xlat5.y : u_xlat9.y;
        u_xlat16_11.z = (u_xlatb10.z) ? u_xlat5.z : u_xlat9.z;
        u_xlat16_45 = min(u_xlat16_11.y, u_xlat16_11.x);
        u_xlat16_45 = min(u_xlat16_11.z, u_xlat16_45);
        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat5.xyz = u_xlat16_8.xyz * vec3(u_xlat16_45) + u_xlat5.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat16_20.xyz;
    //ENDIF
    }
    u_xlat16_45 = (-u_xlat4.x) * 0.699999988 + 1.70000005;
    u_xlat16_45 = u_xlat16_45 * u_xlat4.x;
    u_xlat16_45 = u_xlat16_45 * 6.0;
    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_45);
    u_xlat16_49 = u_xlat10_5.w + -1.0;
    u_xlat16_49 = unity_SpecCube0_HDR.w * u_xlat16_49 + 1.0;
    u_xlat16_49 = u_xlat16_49 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(u_xlat16_49);
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb42){
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb42){
            u_xlat16_50 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
            u_xlat16_50 = inversesqrt(u_xlat16_50);
            u_xlat16_11.xyz = u_xlat16_20.xyz * vec3(u_xlat16_50);
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_11.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat16_11.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_11.xyzx).xyz;
            u_xlat16_13.x = (u_xlatb12.x) ? u_xlat9.x : u_xlat10.x;
            u_xlat16_13.y = (u_xlatb12.y) ? u_xlat9.y : u_xlat10.y;
            u_xlat16_13.z = (u_xlatb12.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat16_50 = min(u_xlat16_13.y, u_xlat16_13.x);
            u_xlat16_50 = min(u_xlat16_13.z, u_xlat16_50);
            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat20.xyz = u_xlat16_11.xyz * vec3(u_xlat16_50) + u_xlat9.xyz;
            u_xlat16_20.xyz = u_xlat20.xyz;
        //ENDIF
        }
        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat16_20.xyz, u_xlat16_45);
        u_xlat16_45 = u_xlat10_9.w + -1.0;
        u_xlat16_45 = unity_SpecCube1_HDR.w * u_xlat16_45 + 1.0;
        u_xlat16_45 = u_xlat16_45 * unity_SpecCube1_HDR.x;
        u_xlat16_20.xyz = u_xlat10_9.xyz * vec3(u_xlat16_45);
        u_xlat16_9.xyz = vec3(u_xlat16_49) * u_xlat10_5.xyz + (-u_xlat16_20.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_9.xyz + u_xlat16_20.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_20.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat9.xyz = vec3(u_xlat42) * u_xlat9.xyz;
    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_45 = u_xlat14 + u_xlat14;
    u_xlat16_45 = u_xlat14 * u_xlat16_45;
    u_xlat16_45 = u_xlat16_45 * u_xlat4.x + -0.5;
    u_xlat16_49 = (-u_xlat1.x) + 1.0;
    u_xlat16_8.x = u_xlat16_49 * u_xlat16_49;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_8.x;
    u_xlat16_49 = u_xlat16_45 * u_xlat16_49 + 1.0;
    u_xlat16_8.x = -abs(u_xlat42) + 1.0;
    u_xlat16_22.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_22.x;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_8.x + 1.0;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_49;
    u_xlat28 = u_xlat1.x * u_xlat16_45;
    u_xlat15.x = u_xlat4.x * u_xlat4.x;
    u_xlat15.x = max(u_xlat15.x, 0.00200000009);
    u_xlat29 = (-u_xlat15.x) + 1.0;
    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;
    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;
    u_xlat42 = abs(u_xlat42) * u_xlat29;
    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat29 = u_xlat15.x * u_xlat15.x;
    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);
    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;
    u_xlat29 = u_xlat29 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat29 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat42;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat42 = u_xlat15.x * u_xlat4.x;
    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;
    u_xlat16_45 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_45!=0.0);
#else
    u_xlatb1 = u_xlat16_45!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_44 = (-u_xlat16_44) + 1.0;
    u_xlat16_44 = u_xlat16_44 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
    u_xlat16_22.xyz = vec3(u_xlat28) * u_xlat16_7.xyz;
    u_xlat16_22.xyz = u_xlat16_18.xyz * u_xlat16_6.xxx + u_xlat16_22.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_45 = (-u_xlat14) + 1.0;
    u_xlat16_6.x = u_xlat16_45 * u_xlat16_45;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_6.x;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_22.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_20.xyz * vec3(u_xlat42);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);
    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles":
// Stats: 165 math, 5 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  highp vec3 tmpvar_2;
  tmpvar_2.x = xlv_TEXCOORD2.w;
  tmpvar_2.y = xlv_TEXCOORD2_1.w;
  tmpvar_2.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float occ_13;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_13 = tmpvar_14;
  mediump float occlusion_15;
  occlusion_15 = ((1.0 - _OcclusionStrength) + (occ_13 * _OcclusionStrength));
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_16 = unity_SpecCube0_HDR;
  tmpvar_17 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_18;
  worldViewDir_18 = -(tmpvar_11);
  mediump vec3 Normal_19;
  Normal_19 = tmpvar_10;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_5;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec3 I_23;
  I_23 = -(worldViewDir_18);
  mediump vec3 tmpvar_24;
  tmpvar_24 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_25;
  tmpvar_25 = (I_23 - (2.0 * (
    dot (Normal_19, I_23)
   * Normal_19)));
  mediump vec3 originalReflUVW_26;
  mediump vec3 specular_27;
  originalReflUVW_26 = tmpvar_25;
  mediump vec3 worldRefl_28;
  worldRefl_28 = tmpvar_25;
  highp vec3 worldPos_29;
  worldPos_29 = tmpvar_2;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_30;
    mediump vec3 rbmax_31;
    mediump vec3 tmpvar_32;
    tmpvar_32 = normalize(tmpvar_25);
    highp vec3 tmpvar_33;
    tmpvar_33 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_2) / tmpvar_32);
    rbmax_31 = tmpvar_33;
    highp vec3 tmpvar_34;
    tmpvar_34 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_2) / tmpvar_32);
    rbmin_30 = tmpvar_34;
    bvec3 tmpvar_35;
    tmpvar_35 = greaterThan (tmpvar_32, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_36;
    if (tmpvar_35.x) {
      tmpvar_36 = rbmax_31.x;
    } else {
      tmpvar_36 = rbmin_30.x;
    };
    mediump float tmpvar_37;
    if (tmpvar_35.y) {
      tmpvar_37 = rbmax_31.y;
    } else {
      tmpvar_37 = rbmin_30.y;
    };
    mediump float tmpvar_38;
    if (tmpvar_35.z) {
      tmpvar_38 = rbmax_31.z;
    } else {
      tmpvar_38 = rbmin_30.z;
    };
    worldPos_29 = (tmpvar_2 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_28 = (worldPos_29 + (tmpvar_32 * min (
      min (tmpvar_36, tmpvar_37)
    , tmpvar_38)));
  };
  tmpvar_25 = worldRefl_28;
  mediump vec4 hdr_39;
  hdr_39 = tmpvar_16;
  mediump vec4 tmpvar_40;
  tmpvar_40.xyz = worldRefl_28;
  tmpvar_40.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_28, tmpvar_40.w);
  mediump vec4 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((hdr_39.x * (
    (hdr_39.w * (tmpvar_42.w - 1.0))
   + 1.0)) * tmpvar_42.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_44;
    worldRefl_44 = originalReflUVW_26;
    highp vec3 worldPos_45;
    worldPos_45 = tmpvar_2;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_46;
      mediump vec3 rbmax_47;
      mediump vec3 tmpvar_48;
      tmpvar_48 = normalize(originalReflUVW_26);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_2) / tmpvar_48);
      rbmax_47 = tmpvar_49;
      highp vec3 tmpvar_50;
      tmpvar_50 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_2) / tmpvar_48);
      rbmin_46 = tmpvar_50;
      bvec3 tmpvar_51;
      tmpvar_51 = greaterThan (tmpvar_48, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_52;
      if (tmpvar_51.x) {
        tmpvar_52 = rbmax_47.x;
      } else {
        tmpvar_52 = rbmin_46.x;
      };
      mediump float tmpvar_53;
      if (tmpvar_51.y) {
        tmpvar_53 = rbmax_47.y;
      } else {
        tmpvar_53 = rbmin_46.y;
      };
      mediump float tmpvar_54;
      if (tmpvar_51.z) {
        tmpvar_54 = rbmax_47.z;
      } else {
        tmpvar_54 = rbmin_46.z;
      };
      worldPos_45 = (tmpvar_2 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_44 = (worldPos_45 + (tmpvar_48 * min (
        min (tmpvar_52, tmpvar_53)
      , tmpvar_54)));
    };
    tmpvar_25 = worldRefl_44;
    mediump vec4 hdr_55;
    hdr_55 = tmpvar_17;
    mediump vec4 tmpvar_56;
    tmpvar_56.xyz = worldRefl_44;
    tmpvar_56.w = ((tmpvar_20 * (1.7 - 
      (0.7 * tmpvar_20)
    )) * 6.0);
    lowp vec4 tmpvar_57;
    tmpvar_57 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_44, tmpvar_56.w);
    mediump vec4 tmpvar_58;
    tmpvar_58 = tmpvar_57;
    mediump vec3 tmpvar_59;
    tmpvar_59 = ((hdr_55.x * (
      (hdr_55.w * (tmpvar_58.w - 1.0))
     + 1.0)) * tmpvar_58.xyz);
    highp vec3 tmpvar_60;
    tmpvar_60 = mix (tmpvar_59, tmpvar_43, unity_SpecCube0_BoxMin.www);
    specular_27 = tmpvar_60;
  } else {
    specular_27 = tmpvar_43;
  };
  tmpvar_24 = (specular_27 * occlusion_15);
  highp vec3 viewDir_61;
  viewDir_61 = -(tmpvar_11);
  mediump vec3 color_62;
  mediump float surfaceReduction_63;
  highp float specularTerm_64;
  mediump float diffuseTerm_65;
  mediump float nv_66;
  highp float tmpvar_67;
  highp float smoothness_68;
  smoothness_68 = tmpvar_5;
  tmpvar_67 = (1.0 - smoothness_68);
  highp vec3 tmpvar_69;
  highp vec3 inVec_70;
  inVec_70 = (_WorldSpaceLightPos0.xyz + viewDir_61);
  tmpvar_69 = (inVec_70 * inversesqrt(max (0.001, 
    dot (inVec_70, inVec_70)
  )));
  highp float tmpvar_71;
  tmpvar_71 = abs(dot (tmpvar_10, viewDir_61));
  nv_66 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_73;
  tmpvar_73 = clamp (dot (tmpvar_10, tmpvar_69), 0.0, 1.0);
  mediump float tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_69), 0.0, 1.0);
  tmpvar_74 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float NdotL_77;
  NdotL_77 = tmpvar_72;
  mediump float perceptualRoughness_78;
  perceptualRoughness_78 = tmpvar_67;
  mediump float tmpvar_79;
  tmpvar_79 = (0.5 + ((2.0 * tmpvar_74) * (tmpvar_74 * perceptualRoughness_78)));
  mediump float x_80;
  x_80 = (1.0 - NdotL_77);
  mediump float x_81;
  x_81 = (1.0 - nv_66);
  tmpvar_76 = ((1.0 + (
    (tmpvar_79 - 1.0)
   * 
    ((x_80 * x_80) * ((x_80 * x_80) * x_80))
  )) * (1.0 + (
    (tmpvar_79 - 1.0)
   * 
    ((x_81 * x_81) * ((x_81 * x_81) * x_81))
  )));
  highp float tmpvar_82;
  tmpvar_82 = (tmpvar_76 * tmpvar_72);
  diffuseTerm_65 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = max ((tmpvar_67 * tmpvar_67), 0.002);
  highp float NdotV_84;
  NdotV_84 = nv_66;
  highp float tmpvar_85;
  tmpvar_85 = (tmpvar_83 * tmpvar_83);
  highp float tmpvar_86;
  tmpvar_86 = (((
    (tmpvar_73 * tmpvar_85)
   - tmpvar_73) * tmpvar_73) + 1.0);
  highp float tmpvar_87;
  tmpvar_87 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_72 * (
        (NdotV_84 * (1.0 - tmpvar_83))
       + tmpvar_83)) + (NdotV_84 * (
        (tmpvar_72 * (1.0 - tmpvar_83))
       + tmpvar_83))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_85)
     / 
      ((tmpvar_86 * tmpvar_86) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_72));
  specularTerm_64 = tmpvar_87;
  surfaceReduction_63 = (1.0 - ((0.28 * tmpvar_83) * tmpvar_67));
  bvec3 tmpvar_88;
  tmpvar_88 = bvec3(tmpvar_8);
  bool tmpvar_89;
  tmpvar_89 = any(tmpvar_88);
  highp float tmpvar_90;
  if (tmpvar_89) {
    tmpvar_90 = 1.0;
  } else {
    tmpvar_90 = 0.0;
  };
  specularTerm_64 = (tmpvar_87 * tmpvar_90);
  mediump vec3 tmpvar_91;
  mediump float x_92;
  x_92 = (1.0 - tmpvar_74);
  tmpvar_91 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_92 * x_92)
   * 
    ((x_92 * x_92) * x_92)
  )));
  mediump float x_93;
  x_93 = (1.0 - nv_66);
  mediump vec3 tmpvar_94;
  tmpvar_94 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_93 * x_93) * (
    (x_93 * x_93)
   * x_93))));
  highp vec3 tmpvar_95;
  tmpvar_95 = (((tmpvar_7 * 
    (tmpvar_12 * diffuseTerm_65)
  ) + (
    (specularTerm_64 * tmpvar_12)
   * tmpvar_91)) + ((surfaceReduction_63 * tmpvar_24) * tmpvar_94));
  color_62 = tmpvar_95;
  mediump vec4 tmpvar_96;
  tmpvar_96.w = 1.0;
  tmpvar_96.xyz = color_62;
  c_1.w = tmpvar_96.w;
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_62 + (tmpvar_97.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_98;
  xlat_varoutput_98.xyz = c_1.xyz;
  xlat_varoutput_98.w = 1.0;
  gl_FragData[0] = xlat_varoutput_98;
}


#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_9;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat13;
vec3 u_xlat18;
mediump vec3 u_xlat16_18;
mediump vec3 u_xlat16_21;
float u_xlat24;
float u_xlat25;
float u_xlat36;
float u_xlat37;
lowp float u_xlat10_37;
mediump float u_xlat16_38;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
mediump float u_xlat16_42;
mediump float u_xlat16_45;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_38);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;
    u_xlat10_37 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_39 = (-_OcclusionStrength) + 1.0;
    u_xlat16_39 = u_xlat10_37 * _OcclusionStrength + u_xlat16_39;
    u_xlat37 = (-_Glossiness) + 1.0;
    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb5){
        u_xlat16_40 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
        u_xlat16_40 = inversesqrt(u_xlat16_40);
        u_xlat16_6.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_6.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat16_6.xyz;
        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyzx).xyz;
        u_xlat16_9.x = (u_xlatb8.x) ? u_xlat5.x : u_xlat7.x;
        u_xlat16_9.y = (u_xlatb8.y) ? u_xlat5.y : u_xlat7.y;
        u_xlat16_9.z = (u_xlatb8.z) ? u_xlat5.z : u_xlat7.z;
        u_xlat16_40 = min(u_xlat16_9.y, u_xlat16_9.x);
        u_xlat16_40 = min(u_xlat16_9.z, u_xlat16_40);
        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_40) + u_xlat5.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    u_xlat16_40 = (-u_xlat37) * 0.699999988 + 1.70000005;
    u_xlat16_40 = u_xlat37 * u_xlat16_40;
    u_xlat16_40 = u_xlat16_40 * 6.0;
    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_40);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_18.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb7 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb7){
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb7 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb7){
            u_xlat16_9.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
            u_xlat16_9.x = inversesqrt(u_xlat16_9.x);
            u_xlat16_9.xyz = u_xlat16_4.xyz * u_xlat16_9.xxx;
            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat7.xyz = u_xlat7.xyz / u_xlat16_9.xyz;
            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat8.xyz = u_xlat8.xyz / u_xlat16_9.xyz;
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_9.xyzx).xyz;
            u_xlat16_11.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;
            u_xlat16_11.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;
            u_xlat16_11.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat16_45 = min(u_xlat16_11.y, u_xlat16_11.x);
            u_xlat16_45 = min(u_xlat16_11.z, u_xlat16_45);
            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat16_9.xyz * vec3(u_xlat16_45) + u_xlat7.xyz;
            u_xlat16_4.xyz = u_xlat4.xyz;
        //ENDIF
        }
        u_xlat10_4 = textureLod(unity_SpecCube1, u_xlat16_4.xyz, u_xlat16_40);
        u_xlat16_9.x = u_xlat10_4.w + -1.0;
        u_xlat16_9.x = unity_SpecCube1_HDR.w * u_xlat16_9.x + 1.0;
        u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube1_HDR.x;
        u_xlat16_9.xyz = u_xlat10_4.xyz * u_xlat16_9.xxx;
        u_xlat16_7.xyz = u_xlat16_6.xxx * u_xlat10_5.xyz + (-u_xlat16_9.xyz);
        u_xlat18.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_9.xyz;
        u_xlat16_18.xyz = u_xlat18.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = vec3(u_xlat16_39) * u_xlat16_18.xyz;
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat7.xyz = vec3(u_xlat36) * u_xlat7.xyz;
    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat12 + u_xlat12;
    u_xlat16_39 = u_xlat12 * u_xlat16_39;
    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;
    u_xlat16_42 = (-u_xlat1.x) + 1.0;
    u_xlat16_9.x = u_xlat16_42 * u_xlat16_42;
    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_9.x;
    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;
    u_xlat16_9.x = -abs(u_xlat36) + 1.0;
    u_xlat16_21.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;
    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_21.x;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_9.x + 1.0;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;
    u_xlat24 = u_xlat1.x * u_xlat16_39;
    u_xlat13 = u_xlat37 * u_xlat37;
    u_xlat13 = max(u_xlat13, 0.00200000009);
    u_xlat25 = (-u_xlat13) + 1.0;
    u_xlat7.x = abs(u_xlat36) * u_xlat25 + u_xlat13;
    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;
    u_xlat36 = abs(u_xlat36) * u_xlat25;
    u_xlat36 = u_xlat1.x * u_xlat7.x + u_xlat36;
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat25 = u_xlat13 * u_xlat13;
    u_xlat7.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);
    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat25 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat36;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat36 = u_xlat13 * u_xlat37;
    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;
    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_39!=0.0);
#else
    u_xlatb1 = u_xlat16_39!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_38 = (-u_xlat16_38) + 1.0;
    u_xlat16_38 = u_xlat16_38 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_21.xyz = vec3(u_xlat24) * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat16_39 = (-u_xlat12) + 1.0;
    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;
    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_11.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);
    u_xlat16_2.xyz = u_xlat16_9.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat10_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

 }


 // Stats for Vertex shader:
 //         gles: 111 avg math (92..133), 3 avg texture (1..7), 2 avg branch (1..5)
 Pass {
  Name "FORWARD_DELTA"
  Tags { "LIGHTMODE"="FORWARDADD" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite Off
  Blend [_SrcBlend] One
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords set in this variant: POINT 
-- Vertex shader for "gles":
// Stats: 97 math, 2 textures, 1 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD5;
  lightCoord_2 = (unity_WorldToLight * tmpvar_10).xyz;
  highp float tmpvar_11;
  tmpvar_11 = texture2D (_LightTexture0, vec2(dot (lightCoord_2, lightCoord_2))).w;
  atten_1 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_13;
  lightDir_13 = tmpvar_12;
  mediump float atten_14;
  atten_14 = atten_1;
  mediump vec3 tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_15 = _LightColor0.xyz;
  highp vec3 n_17;
  n_17 = lightDir_13;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(n_17);
  tmpvar_16 = tmpvar_18;
  tmpvar_15 = (tmpvar_15 * atten_14);
  highp vec3 viewDir_19;
  viewDir_19 = -(normalize(xlv_TEXCOORD1));
  mediump vec3 color_20;
  highp float specularTerm_21;
  mediump float diffuseTerm_22;
  mediump float nv_23;
  highp float tmpvar_24;
  highp float smoothness_25;
  smoothness_25 = tmpvar_5;
  tmpvar_24 = (1.0 - smoothness_25);
  highp vec3 tmpvar_26;
  highp vec3 inVec_27;
  inVec_27 = (tmpvar_16 + viewDir_19);
  tmpvar_26 = (inVec_27 * inversesqrt(max (0.001, 
    dot (inVec_27, inVec_27)
  )));
  highp float tmpvar_28;
  tmpvar_28 = abs(dot (tmpvar_9, viewDir_19));
  nv_23 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, tmpvar_16), 0.0, 1.0);
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_9, tmpvar_26), 0.0, 1.0);
  mediump float tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (dot (tmpvar_16, tmpvar_26), 0.0, 1.0);
  tmpvar_31 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float NdotL_34;
  NdotL_34 = tmpvar_29;
  mediump float perceptualRoughness_35;
  perceptualRoughness_35 = tmpvar_24;
  mediump float tmpvar_36;
  tmpvar_36 = (0.5 + ((2.0 * tmpvar_31) * (tmpvar_31 * perceptualRoughness_35)));
  mediump float x_37;
  x_37 = (1.0 - NdotL_34);
  mediump float x_38;
  x_38 = (1.0 - nv_23);
  tmpvar_33 = ((1.0 + (
    (tmpvar_36 - 1.0)
   * 
    ((x_37 * x_37) * ((x_37 * x_37) * x_37))
  )) * (1.0 + (
    (tmpvar_36 - 1.0)
   * 
    ((x_38 * x_38) * ((x_38 * x_38) * x_38))
  )));
  highp float tmpvar_39;
  tmpvar_39 = (tmpvar_33 * tmpvar_29);
  diffuseTerm_22 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = max ((tmpvar_24 * tmpvar_24), 0.002);
  highp float NdotV_41;
  NdotV_41 = nv_23;
  highp float tmpvar_42;
  tmpvar_42 = (tmpvar_40 * tmpvar_40);
  highp float tmpvar_43;
  tmpvar_43 = (((
    (tmpvar_30 * tmpvar_42)
   - tmpvar_30) * tmpvar_30) + 1.0);
  highp float tmpvar_44;
  tmpvar_44 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_29 * (
        (NdotV_41 * (1.0 - tmpvar_40))
       + tmpvar_40)) + (NdotV_41 * (
        (tmpvar_29 * (1.0 - tmpvar_40))
       + tmpvar_40))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_42)
     / 
      ((tmpvar_43 * tmpvar_43) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_29));
  specularTerm_21 = tmpvar_44;
  bvec3 tmpvar_45;
  tmpvar_45 = bvec3(tmpvar_8);
  bool tmpvar_46;
  tmpvar_46 = any(tmpvar_45);
  highp float tmpvar_47;
  if (tmpvar_46) {
    tmpvar_47 = 1.0;
  } else {
    tmpvar_47 = 0.0;
  };
  specularTerm_21 = (tmpvar_44 * tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump float x_49;
  x_49 = (1.0 - tmpvar_31);
  tmpvar_48 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_49 * x_49)
   * 
    ((x_49 * x_49) * x_49)
  )));
  highp vec3 tmpvar_50;
  tmpvar_50 = ((tmpvar_7 * (tmpvar_15 * diffuseTerm_22)) + ((specularTerm_21 * tmpvar_15) * tmpvar_48));
  color_20 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51.w = 1.0;
  tmpvar_51.xyz = color_20;
  mediump vec4 xlat_varoutput_52;
  xlat_varoutput_52.xyz = tmpvar_51.xyz;
  xlat_varoutput_52.w = 1.0;
  gl_FragData[0] = xlat_varoutput_52;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform highp sampler2D _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));
    u_xlat7 = (-_Glossiness) + 1.0;
    u_xlat14 = u_xlat7 * u_xlat7;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat8 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);
    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat21 = u_xlat8 / u_xlat21;
    u_xlat8 = (-u_xlat14) + 1.0;
    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;
    u_xlat14 = u_xlat14 * abs(u_xlat0.x);
    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;
    u_xlat0.x = u_xlat0.x + 9.99999975e-06;
    u_xlat0.x = 0.5 / u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_11.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_5.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_5.x!=0.0);
#else
    u_xlatb14 = u_xlat16_5.x!=0.0;
#endif
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat3.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat14 = texture(_LightTexture0, vec2(u_xlat14)).w;
    u_xlat16_5.xyz = vec3(u_xlat14) * _LightColor0.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_5.xyz;
    u_xlat16_26 = (-u_xlat22) + 1.0;
    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;
    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_11.xyz;
    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;
    u_xlat16_11.x = u_xlat22 + u_xlat22;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat7 + -0.5;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x + 1.0;
    u_xlat16_18 = (-u_xlat1.x) + 1.0;
    u_xlat16_25 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_25;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_18 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;
    u_xlat7 = u_xlat1.x * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat7) * u_xlat16_5.xyz;
    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_25);
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xzw;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// Stats: 92 math, 1 textures, 1 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump float tmpvar_3;
  tmpvar_3 = mg_2.y;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_1.xyz);
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic));
  tmpvar_5 = (tmpvar_4 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_8;
  tmpvar_8.x = xlv_TEXCOORD2.w;
  tmpvar_8.y = xlv_TEXCOORD2_1.w;
  tmpvar_8.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_9;
  lightDir_9 = tmpvar_8;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  highp vec3 viewDir_11;
  viewDir_11 = -(normalize(xlv_TEXCOORD1));
  mediump vec3 color_12;
  highp float specularTerm_13;
  mediump float diffuseTerm_14;
  mediump float nv_15;
  highp float tmpvar_16;
  highp float smoothness_17;
  smoothness_17 = tmpvar_3;
  tmpvar_16 = (1.0 - smoothness_17);
  highp vec3 tmpvar_18;
  highp vec3 inVec_19;
  inVec_19 = (lightDir_9 + viewDir_11);
  tmpvar_18 = (inVec_19 * inversesqrt(max (0.001, 
    dot (inVec_19, inVec_19)
  )));
  highp float tmpvar_20;
  tmpvar_20 = abs(dot (tmpvar_7, viewDir_11));
  nv_15 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (dot (tmpvar_7, lightDir_9), 0.0, 1.0);
  highp float tmpvar_22;
  tmpvar_22 = clamp (dot (tmpvar_7, tmpvar_18), 0.0, 1.0);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (dot (lightDir_9, tmpvar_18), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  mediump float tmpvar_25;
  mediump float NdotL_26;
  NdotL_26 = tmpvar_21;
  mediump float perceptualRoughness_27;
  perceptualRoughness_27 = tmpvar_16;
  mediump float tmpvar_28;
  tmpvar_28 = (0.5 + ((2.0 * tmpvar_23) * (tmpvar_23 * perceptualRoughness_27)));
  mediump float x_29;
  x_29 = (1.0 - NdotL_26);
  mediump float x_30;
  x_30 = (1.0 - nv_15);
  tmpvar_25 = ((1.0 + (
    (tmpvar_28 - 1.0)
   * 
    ((x_29 * x_29) * ((x_29 * x_29) * x_29))
  )) * (1.0 + (
    (tmpvar_28 - 1.0)
   * 
    ((x_30 * x_30) * ((x_30 * x_30) * x_30))
  )));
  highp float tmpvar_31;
  tmpvar_31 = (tmpvar_25 * tmpvar_21);
  diffuseTerm_14 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = max ((tmpvar_16 * tmpvar_16), 0.002);
  highp float NdotV_33;
  NdotV_33 = nv_15;
  highp float tmpvar_34;
  tmpvar_34 = (tmpvar_32 * tmpvar_32);
  highp float tmpvar_35;
  tmpvar_35 = (((
    (tmpvar_22 * tmpvar_34)
   - tmpvar_22) * tmpvar_22) + 1.0);
  highp float tmpvar_36;
  tmpvar_36 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_21 * (
        (NdotV_33 * (1.0 - tmpvar_32))
       + tmpvar_32)) + (NdotV_33 * (
        (tmpvar_21 * (1.0 - tmpvar_32))
       + tmpvar_32))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_34)
     / 
      ((tmpvar_35 * tmpvar_35) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_21));
  specularTerm_13 = tmpvar_36;
  bvec3 tmpvar_37;
  tmpvar_37 = bvec3(tmpvar_6);
  bool tmpvar_38;
  tmpvar_38 = any(tmpvar_37);
  highp float tmpvar_39;
  if (tmpvar_38) {
    tmpvar_39 = 1.0;
  } else {
    tmpvar_39 = 0.0;
  };
  specularTerm_13 = (tmpvar_36 * tmpvar_39);
  mediump vec3 tmpvar_40;
  mediump float x_41;
  x_41 = (1.0 - tmpvar_23);
  tmpvar_40 = (tmpvar_6 + ((1.0 - tmpvar_6) * (
    (x_41 * x_41)
   * 
    ((x_41 * x_41) * x_41)
  )));
  highp vec3 tmpvar_42;
  tmpvar_42 = ((tmpvar_5 * (tmpvar_10 * diffuseTerm_14)) + ((specularTerm_13 * tmpvar_10) * tmpvar_40));
  color_12 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = color_12;
  mediump vec4 xlat_varoutput_44;
  xlat_varoutput_44.xyz = tmpvar_43.xyz;
  xlat_varoutput_44.w = 1.0;
  gl_FragData[0] = xlat_varoutput_44;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat13;
mediump float u_xlat16_16;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat3.xyz));
    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat19 = max(u_xlat19, 0.00100000005);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12 = (-_Glossiness) + 1.0;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat1.x = max(u_xlat1.x, 0.00200000009);
    u_xlat7 = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat19 * u_xlat7 + (-u_xlat19);
    u_xlat13 = u_xlat13 * u_xlat19 + 1.0;
    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
    u_xlat7 = u_xlat7 * 0.318309873;
    u_xlat7 = u_xlat7 / u_xlat13;
    u_xlat13 = (-u_xlat1.x) + 1.0;
    u_xlat19 = abs(u_xlat18) * u_xlat13 + u_xlat1.x;
    u_xlat1.x = u_xlat0.x * u_xlat13 + u_xlat1.x;
    u_xlat1.x = abs(u_xlat18) * u_xlat1.x;
    u_xlat16_4.x = -abs(u_xlat18) + 1.0;
    u_xlat18 = u_xlat0.x * u_xlat19 + u_xlat1.x;
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = u_xlat0.x * u_xlat18;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_10.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_10.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_10.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_5.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(u_xlat16_5.x!=0.0);
#else
    u_xlatb19 = u_xlat16_5.x!=0.0;
#endif
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat2.xyz = vec3(u_xlat18) * _LightColor0.xyz;
    u_xlat16_5.x = (-u_xlat6) + 1.0;
    u_xlat16_11.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_11.x;
    u_xlat16_11.xyz = (-u_xlat16_10.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_11.xyz * u_xlat16_5.xxx + u_xlat16_10.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_10.xyz;
    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;
    u_xlat16_10.x = u_xlat6 + u_xlat6;
    u_xlat16_10.x = u_xlat6 * u_xlat16_10.x;
    u_xlat16_10.x = u_xlat16_10.x * u_xlat12 + -0.5;
    u_xlat16_4.x = u_xlat16_10.x * u_xlat16_4.x + 1.0;
    u_xlat16_16 = (-u_xlat0.x) + 1.0;
    u_xlat16_22 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_22;
    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_16 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22);
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// Stats: 103 math, 3 textures, 1 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec4 lightCoord_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD5;
  lightCoord_2 = (unity_WorldToLight * tmpvar_10);
  lowp float tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_LightTexture0, ((lightCoord_2.xy / lightCoord_2.w) + 0.5));
  tmpvar_11 = tmpvar_12.w;
  lowp float tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_LightTextureB0, vec2(dot (lightCoord_2.xyz, lightCoord_2.xyz)));
  tmpvar_13 = tmpvar_14.w;
  highp float tmpvar_15;
  tmpvar_15 = ((float(
    (lightCoord_2.z > 0.0)
  ) * tmpvar_11) * tmpvar_13);
  atten_1 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = xlv_TEXCOORD2.w;
  tmpvar_16.y = xlv_TEXCOORD2_1.w;
  tmpvar_16.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_17;
  lightDir_17 = tmpvar_16;
  mediump float atten_18;
  atten_18 = atten_1;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = _LightColor0.xyz;
  highp vec3 n_21;
  n_21 = lightDir_17;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(n_21);
  tmpvar_20 = tmpvar_22;
  tmpvar_19 = (tmpvar_19 * atten_18);
  highp vec3 viewDir_23;
  viewDir_23 = -(normalize(xlv_TEXCOORD1));
  mediump vec3 color_24;
  highp float specularTerm_25;
  mediump float diffuseTerm_26;
  mediump float nv_27;
  highp float tmpvar_28;
  highp float smoothness_29;
  smoothness_29 = tmpvar_5;
  tmpvar_28 = (1.0 - smoothness_29);
  highp vec3 tmpvar_30;
  highp vec3 inVec_31;
  inVec_31 = (tmpvar_20 + viewDir_23);
  tmpvar_30 = (inVec_31 * inversesqrt(max (0.001, 
    dot (inVec_31, inVec_31)
  )));
  highp float tmpvar_32;
  tmpvar_32 = abs(dot (tmpvar_9, viewDir_23));
  nv_27 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (dot (tmpvar_9, tmpvar_20), 0.0, 1.0);
  highp float tmpvar_34;
  tmpvar_34 = clamp (dot (tmpvar_9, tmpvar_30), 0.0, 1.0);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (dot (tmpvar_20, tmpvar_30), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float NdotL_38;
  NdotL_38 = tmpvar_33;
  mediump float perceptualRoughness_39;
  perceptualRoughness_39 = tmpvar_28;
  mediump float tmpvar_40;
  tmpvar_40 = (0.5 + ((2.0 * tmpvar_35) * (tmpvar_35 * perceptualRoughness_39)));
  mediump float x_41;
  x_41 = (1.0 - NdotL_38);
  mediump float x_42;
  x_42 = (1.0 - nv_27);
  tmpvar_37 = ((1.0 + (
    (tmpvar_40 - 1.0)
   * 
    ((x_41 * x_41) * ((x_41 * x_41) * x_41))
  )) * (1.0 + (
    (tmpvar_40 - 1.0)
   * 
    ((x_42 * x_42) * ((x_42 * x_42) * x_42))
  )));
  highp float tmpvar_43;
  tmpvar_43 = (tmpvar_37 * tmpvar_33);
  diffuseTerm_26 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = max ((tmpvar_28 * tmpvar_28), 0.002);
  highp float NdotV_45;
  NdotV_45 = nv_27;
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_44 * tmpvar_44);
  highp float tmpvar_47;
  tmpvar_47 = (((
    (tmpvar_34 * tmpvar_46)
   - tmpvar_34) * tmpvar_34) + 1.0);
  highp float tmpvar_48;
  tmpvar_48 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_33 * (
        (NdotV_45 * (1.0 - tmpvar_44))
       + tmpvar_44)) + (NdotV_45 * (
        (tmpvar_33 * (1.0 - tmpvar_44))
       + tmpvar_44))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_46)
     / 
      ((tmpvar_47 * tmpvar_47) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_33));
  specularTerm_25 = tmpvar_48;
  bvec3 tmpvar_49;
  tmpvar_49 = bvec3(tmpvar_8);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  highp float tmpvar_51;
  if (tmpvar_50) {
    tmpvar_51 = 1.0;
  } else {
    tmpvar_51 = 0.0;
  };
  specularTerm_25 = (tmpvar_48 * tmpvar_51);
  mediump vec3 tmpvar_52;
  mediump float x_53;
  x_53 = (1.0 - tmpvar_35);
  tmpvar_52 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_53 * x_53)
   * 
    ((x_53 * x_53) * x_53)
  )));
  highp vec3 tmpvar_54;
  tmpvar_54 = ((tmpvar_7 * (tmpvar_19 * diffuseTerm_26)) + ((specularTerm_25 * tmpvar_19) * tmpvar_52));
  color_24 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_24;
  mediump vec4 xlat_varoutput_56;
  xlat_varoutput_56.xyz = tmpvar_55.xyz;
  xlat_varoutput_56.w = 1.0;
  gl_FragData[0] = xlat_varoutput_56;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_12;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
mediump float u_xlat16_19;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
mediump float u_xlat16_26;
void main()
{
    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
    u_xlat21 = texture(_LightTexture0, u_xlat1.xy).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat0.z);
#else
    u_xlatb1 = 0.0<u_xlat0.z;
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).w;
    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = dot(u_xlat1.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));
    u_xlat7 = (-_Glossiness) + 1.0;
    u_xlat14 = u_xlat7 * u_xlat7;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat8 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);
    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat21 = u_xlat8 / u_xlat21;
    u_xlat8 = (-u_xlat14) + 1.0;
    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;
    u_xlat14 = u_xlat14 * abs(u_xlat0.x);
    u_xlat16_23 = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;
    u_xlat0.x = u_xlat0.x + 9.99999975e-06;
    u_xlat0.x = 0.5 / u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_26!=0.0);
#else
    u_xlatb14 = u_xlat16_26!=0.0;
#endif
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;
    u_xlat16_26 = (-u_xlat22) + 1.0;
    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;
    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;
    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat22 + u_xlat22;
    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat7 + -0.5;
    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;
    u_xlat16_12 = (-u_xlat1.x) + 1.0;
    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;
    u_xlat7 = u_xlat1.x * u_xlat16_23;
    u_xlat16_2.xyz = vec3(u_xlat7) * u_xlat16_2.xyz;
    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xzw;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: POINT_COOKIE 
-- Vertex shader for "gles":
// Stats: 98 math, 3 textures, 1 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD5;
  lightCoord_2 = (unity_WorldToLight * tmpvar_10).xyz;
  highp float tmpvar_11;
  tmpvar_11 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_2, lightCoord_2))).w * textureCube (_LightTexture0, lightCoord_2).w);
  atten_1 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_13;
  lightDir_13 = tmpvar_12;
  mediump float atten_14;
  atten_14 = atten_1;
  mediump vec3 tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_15 = _LightColor0.xyz;
  highp vec3 n_17;
  n_17 = lightDir_13;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(n_17);
  tmpvar_16 = tmpvar_18;
  tmpvar_15 = (tmpvar_15 * atten_14);
  highp vec3 viewDir_19;
  viewDir_19 = -(normalize(xlv_TEXCOORD1));
  mediump vec3 color_20;
  highp float specularTerm_21;
  mediump float diffuseTerm_22;
  mediump float nv_23;
  highp float tmpvar_24;
  highp float smoothness_25;
  smoothness_25 = tmpvar_5;
  tmpvar_24 = (1.0 - smoothness_25);
  highp vec3 tmpvar_26;
  highp vec3 inVec_27;
  inVec_27 = (tmpvar_16 + viewDir_19);
  tmpvar_26 = (inVec_27 * inversesqrt(max (0.001, 
    dot (inVec_27, inVec_27)
  )));
  highp float tmpvar_28;
  tmpvar_28 = abs(dot (tmpvar_9, viewDir_19));
  nv_23 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, tmpvar_16), 0.0, 1.0);
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_9, tmpvar_26), 0.0, 1.0);
  mediump float tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (dot (tmpvar_16, tmpvar_26), 0.0, 1.0);
  tmpvar_31 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float NdotL_34;
  NdotL_34 = tmpvar_29;
  mediump float perceptualRoughness_35;
  perceptualRoughness_35 = tmpvar_24;
  mediump float tmpvar_36;
  tmpvar_36 = (0.5 + ((2.0 * tmpvar_31) * (tmpvar_31 * perceptualRoughness_35)));
  mediump float x_37;
  x_37 = (1.0 - NdotL_34);
  mediump float x_38;
  x_38 = (1.0 - nv_23);
  tmpvar_33 = ((1.0 + (
    (tmpvar_36 - 1.0)
   * 
    ((x_37 * x_37) * ((x_37 * x_37) * x_37))
  )) * (1.0 + (
    (tmpvar_36 - 1.0)
   * 
    ((x_38 * x_38) * ((x_38 * x_38) * x_38))
  )));
  highp float tmpvar_39;
  tmpvar_39 = (tmpvar_33 * tmpvar_29);
  diffuseTerm_22 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = max ((tmpvar_24 * tmpvar_24), 0.002);
  highp float NdotV_41;
  NdotV_41 = nv_23;
  highp float tmpvar_42;
  tmpvar_42 = (tmpvar_40 * tmpvar_40);
  highp float tmpvar_43;
  tmpvar_43 = (((
    (tmpvar_30 * tmpvar_42)
   - tmpvar_30) * tmpvar_30) + 1.0);
  highp float tmpvar_44;
  tmpvar_44 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_29 * (
        (NdotV_41 * (1.0 - tmpvar_40))
       + tmpvar_40)) + (NdotV_41 * (
        (tmpvar_29 * (1.0 - tmpvar_40))
       + tmpvar_40))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_42)
     / 
      ((tmpvar_43 * tmpvar_43) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_29));
  specularTerm_21 = tmpvar_44;
  bvec3 tmpvar_45;
  tmpvar_45 = bvec3(tmpvar_8);
  bool tmpvar_46;
  tmpvar_46 = any(tmpvar_45);
  highp float tmpvar_47;
  if (tmpvar_46) {
    tmpvar_47 = 1.0;
  } else {
    tmpvar_47 = 0.0;
  };
  specularTerm_21 = (tmpvar_44 * tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump float x_49;
  x_49 = (1.0 - tmpvar_31);
  tmpvar_48 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_49 * x_49)
   * 
    ((x_49 * x_49) * x_49)
  )));
  highp vec3 tmpvar_50;
  tmpvar_50 = ((tmpvar_7 * (tmpvar_15 * diffuseTerm_22)) + ((specularTerm_21 * tmpvar_15) * tmpvar_48));
  color_20 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51.w = 1.0;
  tmpvar_51.xyz = color_20;
  mediump vec4 xlat_varoutput_52;
  xlat_varoutput_52.xyz = tmpvar_51.xyz;
  xlat_varoutput_52.w = 1.0;
  gl_FragData[0] = xlat_varoutput_52;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat9;
mediump float u_xlat16_12;
float u_xlat14;
bool u_xlatb14;
float u_xlat16;
mediump float u_xlat16_19;
float u_xlat21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat0.x = u_xlat0.x * u_xlat7;
    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat23 = dot(u_xlat2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));
    u_xlat7 = (-_Glossiness) + 1.0;
    u_xlat14 = u_xlat7 * u_xlat7;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat9 = u_xlat14 * u_xlat14;
    u_xlat16 = u_xlat21 * u_xlat9 + (-u_xlat21);
    u_xlat21 = u_xlat16 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;
    u_xlat9 = u_xlat9 * 0.318309873;
    u_xlat21 = u_xlat9 / u_xlat21;
    u_xlat9 = (-u_xlat14) + 1.0;
    u_xlat16 = abs(u_xlat0.x) * u_xlat9 + u_xlat14;
    u_xlat14 = u_xlat2.x * u_xlat9 + u_xlat14;
    u_xlat14 = u_xlat14 * abs(u_xlat0.x);
    u_xlat16_22 = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat2.x * u_xlat16 + u_xlat14;
    u_xlat0.x = u_xlat0.x + 9.99999975e-06;
    u_xlat0.x = 0.5 / u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_26!=0.0);
#else
    u_xlatb14 = u_xlat16_26!=0.0;
#endif
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xxx;
    u_xlat16_26 = (-u_xlat23) + 1.0;
    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;
    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;
    u_xlat16_5.x = u_xlat16_22 * u_xlat16_22;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat23 + u_xlat23;
    u_xlat16_5.x = u_xlat23 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat7 + -0.5;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_22 + 1.0;
    u_xlat16_12 = (-u_xlat2.x) + 1.0;
    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_5.x;
    u_xlat7 = u_xlat2.x * u_xlat16_22;
    u_xlat16_1.xyz = vec3(u_xlat7) * u_xlat16_1.xyz;
    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat0.xzw;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// Stats: 95 math, 2 textures, 1 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  tmpvar_6 = (tmpvar_5 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = xlv_TEXCOORD5;
  highp float tmpvar_10;
  tmpvar_10 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_9).xy).w;
  atten_1 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.x = xlv_TEXCOORD2.w;
  tmpvar_11.y = xlv_TEXCOORD2_1.w;
  tmpvar_11.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_12;
  lightDir_12 = tmpvar_11;
  mediump float atten_13;
  atten_13 = atten_1;
  mediump vec3 tmpvar_14;
  tmpvar_14 = _LightColor0.xyz;
  tmpvar_14 = (tmpvar_14 * atten_13);
  highp vec3 viewDir_15;
  viewDir_15 = -(normalize(xlv_TEXCOORD1));
  mediump vec3 color_16;
  highp float specularTerm_17;
  mediump float diffuseTerm_18;
  mediump float nv_19;
  highp float tmpvar_20;
  highp float smoothness_21;
  smoothness_21 = tmpvar_4;
  tmpvar_20 = (1.0 - smoothness_21);
  highp vec3 tmpvar_22;
  highp vec3 inVec_23;
  inVec_23 = (lightDir_12 + viewDir_15);
  tmpvar_22 = (inVec_23 * inversesqrt(max (0.001, 
    dot (inVec_23, inVec_23)
  )));
  highp float tmpvar_24;
  tmpvar_24 = abs(dot (tmpvar_8, viewDir_15));
  nv_19 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (dot (tmpvar_8, lightDir_12), 0.0, 1.0);
  highp float tmpvar_26;
  tmpvar_26 = clamp (dot (tmpvar_8, tmpvar_22), 0.0, 1.0);
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (lightDir_12, tmpvar_22), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  mediump float NdotL_30;
  NdotL_30 = tmpvar_25;
  mediump float perceptualRoughness_31;
  perceptualRoughness_31 = tmpvar_20;
  mediump float tmpvar_32;
  tmpvar_32 = (0.5 + ((2.0 * tmpvar_27) * (tmpvar_27 * perceptualRoughness_31)));
  mediump float x_33;
  x_33 = (1.0 - NdotL_30);
  mediump float x_34;
  x_34 = (1.0 - nv_19);
  tmpvar_29 = ((1.0 + (
    (tmpvar_32 - 1.0)
   * 
    ((x_33 * x_33) * ((x_33 * x_33) * x_33))
  )) * (1.0 + (
    (tmpvar_32 - 1.0)
   * 
    ((x_34 * x_34) * ((x_34 * x_34) * x_34))
  )));
  highp float tmpvar_35;
  tmpvar_35 = (tmpvar_29 * tmpvar_25);
  diffuseTerm_18 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = max ((tmpvar_20 * tmpvar_20), 0.002);
  highp float NdotV_37;
  NdotV_37 = nv_19;
  highp float tmpvar_38;
  tmpvar_38 = (tmpvar_36 * tmpvar_36);
  highp float tmpvar_39;
  tmpvar_39 = (((
    (tmpvar_26 * tmpvar_38)
   - tmpvar_26) * tmpvar_26) + 1.0);
  highp float tmpvar_40;
  tmpvar_40 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_25 * (
        (NdotV_37 * (1.0 - tmpvar_36))
       + tmpvar_36)) + (NdotV_37 * (
        (tmpvar_25 * (1.0 - tmpvar_36))
       + tmpvar_36))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_38)
     / 
      ((tmpvar_39 * tmpvar_39) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_25));
  specularTerm_17 = tmpvar_40;
  bvec3 tmpvar_41;
  tmpvar_41 = bvec3(tmpvar_7);
  bool tmpvar_42;
  tmpvar_42 = any(tmpvar_41);
  highp float tmpvar_43;
  if (tmpvar_42) {
    tmpvar_43 = 1.0;
  } else {
    tmpvar_43 = 0.0;
  };
  specularTerm_17 = (tmpvar_40 * tmpvar_43);
  mediump vec3 tmpvar_44;
  mediump float x_45;
  x_45 = (1.0 - tmpvar_27);
  tmpvar_44 = (tmpvar_7 + ((1.0 - tmpvar_7) * (
    (x_45 * x_45)
   * 
    ((x_45 * x_45) * x_45)
  )));
  highp vec3 tmpvar_46;
  tmpvar_46 = ((tmpvar_6 * (tmpvar_14 * diffuseTerm_18)) + ((specularTerm_17 * tmpvar_14) * tmpvar_44));
  color_16 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = color_16;
  mediump vec4 xlat_varoutput_48;
  xlat_varoutput_48.xyz = tmpvar_47.xyz;
  xlat_varoutput_48.w = 1.0;
  gl_FragData[0] = xlat_varoutput_48;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform highp sampler2D _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump vec3 u_xlat16_11;
float u_xlat14;
float u_xlat15;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat3.xyz));
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = max(u_xlat22, 0.00100000005);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat22 = dot(u_xlat0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7 = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat14 = (-_Glossiness) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = max(u_xlat1.x, 0.00200000009);
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);
    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;
    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat8 = u_xlat8 / u_xlat15;
    u_xlat15 = (-u_xlat1.x) + 1.0;
    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;
    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;
    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;
    u_xlat16_4.x = -abs(u_xlat21) + 1.0;
    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat21 = u_xlat8 * u_xlat21;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = max(u_xlat21, 9.99999975e-05);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat0.x * u_xlat21;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_11.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_5.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x!=0.0);
#else
    u_xlatb22 = u_xlat16_5.x!=0.0;
#endif
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat2.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat2.xy;
    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat22 = texture(_LightTexture0, u_xlat2.xy).w;
    u_xlat16_5.xyz = vec3(u_xlat22) * _LightColor0.xyz;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat16_5.xyz;
    u_xlat16_26 = (-u_xlat7) + 1.0;
    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_11.xyz;
    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;
    u_xlat16_11.x = u_xlat7 + u_xlat7;
    u_xlat16_11.x = u_xlat7 * u_xlat16_11.x;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat14 + -0.5;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x + 1.0;
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_25 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_25;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_18 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_5.xyz;
    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: SPOT SHADOWS_DEPTH 
-- Vertex shader for "gles":
// Stats: 121 math, 4 textures, 2 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_WorldToLight * tmpvar_11);
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  realtimeShadowAttenuation_13 = 1.0;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_WorldToShadow[0] * tmpvar_18);
  lowp float tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = texture2DProj (_ShadowMapTexture, tmpvar_19);
  mediump float tmpvar_22;
  if ((tmpvar_21.x < (tmpvar_19.z / tmpvar_19.w))) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  tmpvar_20 = tmpvar_22;
  realtimeShadowAttenuation_13 = tmpvar_20;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  shadow_2 = tmpvar_23;
  lowp float tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, ((tmpvar_12.xy / tmpvar_12.w) + 0.5));
  tmpvar_24 = tmpvar_25.w;
  lowp float tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(dot (tmpvar_12.xyz, tmpvar_12.xyz)));
  tmpvar_26 = tmpvar_27.w;
  highp float tmpvar_28;
  tmpvar_28 = (((
    float((tmpvar_12.z > 0.0))
   * tmpvar_24) * tmpvar_26) * shadow_2);
  atten_1 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29.x = xlv_TEXCOORD2.w;
  tmpvar_29.y = xlv_TEXCOORD2_1.w;
  tmpvar_29.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_30;
  lightDir_30 = tmpvar_29;
  mediump float atten_31;
  atten_31 = atten_1;
  mediump vec3 tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_32 = _LightColor0.xyz;
  highp vec3 n_34;
  n_34 = lightDir_30;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(n_34);
  tmpvar_33 = tmpvar_35;
  tmpvar_32 = (tmpvar_32 * atten_31);
  highp vec3 viewDir_36;
  viewDir_36 = -(tmpvar_10);
  mediump vec3 color_37;
  highp float specularTerm_38;
  mediump float diffuseTerm_39;
  mediump float nv_40;
  highp float tmpvar_41;
  highp float smoothness_42;
  smoothness_42 = tmpvar_5;
  tmpvar_41 = (1.0 - smoothness_42);
  highp vec3 tmpvar_43;
  highp vec3 inVec_44;
  inVec_44 = (tmpvar_33 + viewDir_36);
  tmpvar_43 = (inVec_44 * inversesqrt(max (0.001, 
    dot (inVec_44, inVec_44)
  )));
  highp float tmpvar_45;
  tmpvar_45 = abs(dot (tmpvar_9, viewDir_36));
  nv_40 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (tmpvar_9, tmpvar_33), 0.0, 1.0);
  highp float tmpvar_47;
  tmpvar_47 = clamp (dot (tmpvar_9, tmpvar_43), 0.0, 1.0);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (tmpvar_33, tmpvar_43), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  mediump float tmpvar_50;
  mediump float NdotL_51;
  NdotL_51 = tmpvar_46;
  mediump float perceptualRoughness_52;
  perceptualRoughness_52 = tmpvar_41;
  mediump float tmpvar_53;
  tmpvar_53 = (0.5 + ((2.0 * tmpvar_48) * (tmpvar_48 * perceptualRoughness_52)));
  mediump float x_54;
  x_54 = (1.0 - NdotL_51);
  mediump float x_55;
  x_55 = (1.0 - nv_40);
  tmpvar_50 = ((1.0 + (
    (tmpvar_53 - 1.0)
   * 
    ((x_54 * x_54) * ((x_54 * x_54) * x_54))
  )) * (1.0 + (
    (tmpvar_53 - 1.0)
   * 
    ((x_55 * x_55) * ((x_55 * x_55) * x_55))
  )));
  highp float tmpvar_56;
  tmpvar_56 = (tmpvar_50 * tmpvar_46);
  diffuseTerm_39 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = max ((tmpvar_41 * tmpvar_41), 0.002);
  highp float NdotV_58;
  NdotV_58 = nv_40;
  highp float tmpvar_59;
  tmpvar_59 = (tmpvar_57 * tmpvar_57);
  highp float tmpvar_60;
  tmpvar_60 = (((
    (tmpvar_47 * tmpvar_59)
   - tmpvar_47) * tmpvar_47) + 1.0);
  highp float tmpvar_61;
  tmpvar_61 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_46 * (
        (NdotV_58 * (1.0 - tmpvar_57))
       + tmpvar_57)) + (NdotV_58 * (
        (tmpvar_46 * (1.0 - tmpvar_57))
       + tmpvar_57))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_59)
     / 
      ((tmpvar_60 * tmpvar_60) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_46));
  specularTerm_38 = tmpvar_61;
  bvec3 tmpvar_62;
  tmpvar_62 = bvec3(tmpvar_8);
  bool tmpvar_63;
  tmpvar_63 = any(tmpvar_62);
  highp float tmpvar_64;
  if (tmpvar_63) {
    tmpvar_64 = 1.0;
  } else {
    tmpvar_64 = 0.0;
  };
  specularTerm_38 = (tmpvar_61 * tmpvar_64);
  mediump vec3 tmpvar_65;
  mediump float x_66;
  x_66 = (1.0 - tmpvar_48);
  tmpvar_65 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_66 * x_66)
   * 
    ((x_66 * x_66) * x_66)
  )));
  highp vec3 tmpvar_67;
  tmpvar_67 = ((tmpvar_7 * (tmpvar_32 * diffuseTerm_39)) + ((specularTerm_38 * tmpvar_32) * tmpvar_65));
  color_37 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68.w = 1.0;
  tmpvar_68.xyz = color_37;
  mediump vec4 xlat_varoutput_69;
  xlat_varoutput_69.xyz = tmpvar_68.xyz;
  xlat_varoutput_69.w = 1.0;
  gl_FragData[0] = xlat_varoutput_69;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
lowp float u_xlat10_7;
float u_xlat8;
mediump float u_xlat16_9;
mediump float u_xlat16_12;
float u_xlat14;
mediump float u_xlat16_14;
bool u_xlatb14;
float u_xlat15;
mediump float u_xlat16_19;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat7.xyz = u_xlat1.xyz / u_xlat1.www;
    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat10_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_14 = (-_LightShadowData.x) + 1.0;
    u_xlat16_7 = u_xlat10_7 * u_xlat16_14 + _LightShadowData.x;
    u_xlat16_2.x = u_xlat0.x + u_xlat16_7;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
    u_xlat21 = texture(_LightTexture0, u_xlat1.xy).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat0.z);
#else
    u_xlatb1 = 0.0<u_xlat0.z;
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).w;
    u_xlat16_9 = (u_xlatb1) ? 1.0 : 0.0;
    u_xlat16_9 = u_xlat21 * u_xlat16_9;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = dot(u_xlat1.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));
    u_xlat7.x = (-_Glossiness) + 1.0;
    u_xlat14 = u_xlat7.x * u_xlat7.x;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat8 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);
    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat21 = u_xlat8 / u_xlat21;
    u_xlat8 = (-u_xlat14) + 1.0;
    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;
    u_xlat14 = u_xlat14 * abs(u_xlat0.x);
    u_xlat16_23 = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;
    u_xlat0.x = u_xlat0.x + 9.99999975e-06;
    u_xlat0.x = 0.5 / u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_26!=0.0);
#else
    u_xlatb14 = u_xlat16_26!=0.0;
#endif
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;
    u_xlat16_26 = (-u_xlat22) + 1.0;
    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;
    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;
    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat22 + u_xlat22;
    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;
    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;
    u_xlat16_12 = (-u_xlat1.x) + 1.0;
    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;
    u_xlat7.x = u_xlat1.x * u_xlat16_23;
    u_xlat16_2.xyz = u_xlat7.xxx * u_xlat16_2.xyz;
    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xzw;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: SPOT SHADOWS_DEPTH SHADOWS_SOFT 
-- Vertex shader for "gles":
// Stats: 129 math, 7 textures, 5 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_WorldToLight * tmpvar_11);
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  realtimeShadowAttenuation_13 = 1.0;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_WorldToShadow[0] * tmpvar_18);
  lowp float tmpvar_20;
  highp vec4 shadowVals_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_19.xyz / tmpvar_19.w);
  shadowVals_21.x = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_21.y = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_21.z = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_21.w = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_23;
  tmpvar_23 = lessThan (shadowVals_21, tmpvar_22.zzzz);
  mediump vec4 tmpvar_24;
  tmpvar_24 = _LightShadowData.xxxx;
  mediump float tmpvar_25;
  if (tmpvar_23.x) {
    tmpvar_25 = tmpvar_24.x;
  } else {
    tmpvar_25 = 1.0;
  };
  mediump float tmpvar_26;
  if (tmpvar_23.y) {
    tmpvar_26 = tmpvar_24.y;
  } else {
    tmpvar_26 = 1.0;
  };
  mediump float tmpvar_27;
  if (tmpvar_23.z) {
    tmpvar_27 = tmpvar_24.z;
  } else {
    tmpvar_27 = 1.0;
  };
  mediump float tmpvar_28;
  if (tmpvar_23.w) {
    tmpvar_28 = tmpvar_24.w;
  } else {
    tmpvar_28 = 1.0;
  };
  mediump vec4 tmpvar_29;
  tmpvar_29.x = tmpvar_25;
  tmpvar_29.y = tmpvar_26;
  tmpvar_29.z = tmpvar_27;
  tmpvar_29.w = tmpvar_28;
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_20 = tmpvar_30;
  realtimeShadowAttenuation_13 = tmpvar_20;
  mediump float tmpvar_31;
  tmpvar_31 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  shadow_2 = tmpvar_31;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTexture0, ((tmpvar_12.xy / tmpvar_12.w) + 0.5));
  tmpvar_32 = tmpvar_33.w;
  lowp float tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightTextureB0, vec2(dot (tmpvar_12.xyz, tmpvar_12.xyz)));
  tmpvar_34 = tmpvar_35.w;
  highp float tmpvar_36;
  tmpvar_36 = (((
    float((tmpvar_12.z > 0.0))
   * tmpvar_32) * tmpvar_34) * shadow_2);
  atten_1 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37.x = xlv_TEXCOORD2.w;
  tmpvar_37.y = xlv_TEXCOORD2_1.w;
  tmpvar_37.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_38;
  lightDir_38 = tmpvar_37;
  mediump float atten_39;
  atten_39 = atten_1;
  mediump vec3 tmpvar_40;
  mediump vec3 tmpvar_41;
  tmpvar_40 = _LightColor0.xyz;
  highp vec3 n_42;
  n_42 = lightDir_38;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(n_42);
  tmpvar_41 = tmpvar_43;
  tmpvar_40 = (tmpvar_40 * atten_39);
  highp vec3 viewDir_44;
  viewDir_44 = -(tmpvar_10);
  mediump vec3 color_45;
  highp float specularTerm_46;
  mediump float diffuseTerm_47;
  mediump float nv_48;
  highp float tmpvar_49;
  highp float smoothness_50;
  smoothness_50 = tmpvar_5;
  tmpvar_49 = (1.0 - smoothness_50);
  highp vec3 tmpvar_51;
  highp vec3 inVec_52;
  inVec_52 = (tmpvar_41 + viewDir_44);
  tmpvar_51 = (inVec_52 * inversesqrt(max (0.001, 
    dot (inVec_52, inVec_52)
  )));
  highp float tmpvar_53;
  tmpvar_53 = abs(dot (tmpvar_9, viewDir_44));
  nv_48 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (dot (tmpvar_9, tmpvar_41), 0.0, 1.0);
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_9, tmpvar_51), 0.0, 1.0);
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_41, tmpvar_51), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  mediump float NdotL_59;
  NdotL_59 = tmpvar_54;
  mediump float perceptualRoughness_60;
  perceptualRoughness_60 = tmpvar_49;
  mediump float tmpvar_61;
  tmpvar_61 = (0.5 + ((2.0 * tmpvar_56) * (tmpvar_56 * perceptualRoughness_60)));
  mediump float x_62;
  x_62 = (1.0 - NdotL_59);
  mediump float x_63;
  x_63 = (1.0 - nv_48);
  tmpvar_58 = ((1.0 + (
    (tmpvar_61 - 1.0)
   * 
    ((x_62 * x_62) * ((x_62 * x_62) * x_62))
  )) * (1.0 + (
    (tmpvar_61 - 1.0)
   * 
    ((x_63 * x_63) * ((x_63 * x_63) * x_63))
  )));
  highp float tmpvar_64;
  tmpvar_64 = (tmpvar_58 * tmpvar_54);
  diffuseTerm_47 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = max ((tmpvar_49 * tmpvar_49), 0.002);
  highp float NdotV_66;
  NdotV_66 = nv_48;
  highp float tmpvar_67;
  tmpvar_67 = (tmpvar_65 * tmpvar_65);
  highp float tmpvar_68;
  tmpvar_68 = (((
    (tmpvar_55 * tmpvar_67)
   - tmpvar_55) * tmpvar_55) + 1.0);
  highp float tmpvar_69;
  tmpvar_69 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_54 * (
        (NdotV_66 * (1.0 - tmpvar_65))
       + tmpvar_65)) + (NdotV_66 * (
        (tmpvar_54 * (1.0 - tmpvar_65))
       + tmpvar_65))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_67)
     / 
      ((tmpvar_68 * tmpvar_68) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_54));
  specularTerm_46 = tmpvar_69;
  bvec3 tmpvar_70;
  tmpvar_70 = bvec3(tmpvar_8);
  bool tmpvar_71;
  tmpvar_71 = any(tmpvar_70);
  highp float tmpvar_72;
  if (tmpvar_71) {
    tmpvar_72 = 1.0;
  } else {
    tmpvar_72 = 0.0;
  };
  specularTerm_46 = (tmpvar_69 * tmpvar_72);
  mediump vec3 tmpvar_73;
  mediump float x_74;
  x_74 = (1.0 - tmpvar_56);
  tmpvar_73 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_74 * x_74)
   * 
    ((x_74 * x_74) * x_74)
  )));
  highp vec3 tmpvar_75;
  tmpvar_75 = ((tmpvar_7 * (tmpvar_40 * diffuseTerm_47)) + ((specularTerm_46 * tmpvar_40) * tmpvar_73));
  color_45 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76.w = 1.0;
  tmpvar_76.xyz = color_45;
  mediump vec4 xlat_varoutput_77;
  xlat_varoutput_77.xyz = tmpvar_76.xyz;
  xlat_varoutput_77.w = 1.0;
  gl_FragData[0] = xlat_varoutput_77;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_10;
mediump float u_xlat16_12;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
mediump float u_xlat16_19;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_24;
mediump float u_xlat16_26;
void main()
{
    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat0.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat2.xyz = u_xlat0.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat2.xyz = u_xlat0.xyz + _ShadowOffsets[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec2 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_7 = (-_LightShadowData.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_7 + _LightShadowData.x;
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat7.x + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
    u_xlat21 = texture(_LightTexture0, u_xlat1.xy).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat0.z);
#else
    u_xlatb1 = 0.0<u_xlat0.z;
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).w;
    u_xlat16_10 = (u_xlatb1) ? 1.0 : 0.0;
    u_xlat16_10 = u_xlat21 * u_xlat16_10;
    u_xlat16_10 = u_xlat0.x * u_xlat16_10;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));
    u_xlat7.x = (-_Glossiness) + 1.0;
    u_xlat14 = u_xlat7.x * u_xlat7.x;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat8 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);
    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat21 = u_xlat8 / u_xlat21;
    u_xlat8 = (-u_xlat14) + 1.0;
    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;
    u_xlat14 = u_xlat14 * abs(u_xlat0.x);
    u_xlat16_24 = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;
    u_xlat0.x = u_xlat0.x + 9.99999975e-06;
    u_xlat0.x = 0.5 / u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_26!=0.0);
#else
    u_xlatb14 = u_xlat16_26!=0.0;
#endif
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx;
    u_xlat16_26 = (-u_xlat22) + 1.0;
    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;
    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;
    u_xlat16_5.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat22 + u_xlat22;
    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;
    u_xlat16_24 = u_xlat16_5.x * u_xlat16_24 + 1.0;
    u_xlat16_12 = (-u_xlat1.x) + 1.0;
    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;
    u_xlat7.x = u_xlat1.x * u_xlat16_24;
    u_xlat16_3.xyz = u_xlat7.xxx * u_xlat16_3.xyz;
    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_24);
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xzw;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// Stats: 104 math, 2 textures, 1 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_9.zw;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_20.x;
  tmpvar_6.w = tmpvar_20.y;
  tmpvar_7.w = tmpvar_20.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
  xlv_TEXCOORD6 = o_17;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float atten_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  tmpvar_6 = (tmpvar_5 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump float realtimeShadowAttenuation_9;
  highp vec4 v_10;
  v_10.x = unity_MatrixV[0].z;
  v_10.y = unity_MatrixV[1].z;
  v_10.z = unity_MatrixV[2].z;
  v_10.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_10.xyz), sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_12 = tmpvar_13;
  lowp float tmpvar_14;
  tmpvar_14 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_9 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = clamp ((realtimeShadowAttenuation_9 + tmpvar_12), 0.0, 1.0);
  atten_1 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = xlv_TEXCOORD2.w;
  tmpvar_16.y = xlv_TEXCOORD2_1.w;
  tmpvar_16.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_17;
  lightDir_17 = tmpvar_16;
  mediump float atten_18;
  atten_18 = atten_1;
  mediump vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_19 = (tmpvar_19 * atten_18);
  highp vec3 viewDir_20;
  viewDir_20 = -(normalize(xlv_TEXCOORD1));
  mediump vec3 color_21;
  highp float specularTerm_22;
  mediump float diffuseTerm_23;
  mediump float nv_24;
  highp float tmpvar_25;
  highp float smoothness_26;
  smoothness_26 = tmpvar_4;
  tmpvar_25 = (1.0 - smoothness_26);
  highp vec3 tmpvar_27;
  highp vec3 inVec_28;
  inVec_28 = (lightDir_17 + viewDir_20);
  tmpvar_27 = (inVec_28 * inversesqrt(max (0.001, 
    dot (inVec_28, inVec_28)
  )));
  highp float tmpvar_29;
  tmpvar_29 = abs(dot (tmpvar_8, viewDir_20));
  nv_24 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, lightDir_17), 0.0, 1.0);
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_8, tmpvar_27), 0.0, 1.0);
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (dot (lightDir_17, tmpvar_27), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  mediump float tmpvar_34;
  mediump float NdotL_35;
  NdotL_35 = tmpvar_30;
  mediump float perceptualRoughness_36;
  perceptualRoughness_36 = tmpvar_25;
  mediump float tmpvar_37;
  tmpvar_37 = (0.5 + ((2.0 * tmpvar_32) * (tmpvar_32 * perceptualRoughness_36)));
  mediump float x_38;
  x_38 = (1.0 - NdotL_35);
  mediump float x_39;
  x_39 = (1.0 - nv_24);
  tmpvar_34 = ((1.0 + (
    (tmpvar_37 - 1.0)
   * 
    ((x_38 * x_38) * ((x_38 * x_38) * x_38))
  )) * (1.0 + (
    (tmpvar_37 - 1.0)
   * 
    ((x_39 * x_39) * ((x_39 * x_39) * x_39))
  )));
  highp float tmpvar_40;
  tmpvar_40 = (tmpvar_34 * tmpvar_30);
  diffuseTerm_23 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = max ((tmpvar_25 * tmpvar_25), 0.002);
  highp float NdotV_42;
  NdotV_42 = nv_24;
  highp float tmpvar_43;
  tmpvar_43 = (tmpvar_41 * tmpvar_41);
  highp float tmpvar_44;
  tmpvar_44 = (((
    (tmpvar_31 * tmpvar_43)
   - tmpvar_31) * tmpvar_31) + 1.0);
  highp float tmpvar_45;
  tmpvar_45 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_30 * (
        (NdotV_42 * (1.0 - tmpvar_41))
       + tmpvar_41)) + (NdotV_42 * (
        (tmpvar_30 * (1.0 - tmpvar_41))
       + tmpvar_41))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_43)
     / 
      ((tmpvar_44 * tmpvar_44) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_30));
  specularTerm_22 = tmpvar_45;
  bvec3 tmpvar_46;
  tmpvar_46 = bvec3(tmpvar_7);
  bool tmpvar_47;
  tmpvar_47 = any(tmpvar_46);
  highp float tmpvar_48;
  if (tmpvar_47) {
    tmpvar_48 = 1.0;
  } else {
    tmpvar_48 = 0.0;
  };
  specularTerm_22 = (tmpvar_45 * tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump float x_50;
  x_50 = (1.0 - tmpvar_32);
  tmpvar_49 = (tmpvar_7 + ((1.0 - tmpvar_7) * (
    (x_50 * x_50)
   * 
    ((x_50 * x_50) * x_50)
  )));
  highp vec3 tmpvar_51;
  tmpvar_51 = ((tmpvar_6 * (tmpvar_19 * diffuseTerm_23)) + ((specularTerm_22 * tmpvar_19) * tmpvar_49));
  color_21 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = color_21;
  mediump vec4 xlat_varoutput_53;
  xlat_varoutput_53.xyz = tmpvar_52.xyz;
  xlat_varoutput_53.w = 1.0;
  gl_FragData[0] = xlat_varoutput_53;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.w = 0.0;
    vs_TEXCOORD2 = u_xlat2.wwwx;
    vs_TEXCOORD3 = u_xlat2.wwwy;
    vs_TEXCOORD4.w = u_xlat2.z;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp float u_xlat10_7;
float u_xlat8;
mediump float u_xlat16_12;
float u_xlat14;
float u_xlat15;
mediump float u_xlat16_19;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_7 = texture(_ShadowMapTexture, u_xlat7.xy).x;
    u_xlat16_2.x = u_xlat0.x + u_xlat10_7;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat4.xyz));
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = max(u_xlat22, 0.00100000005);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;
    u_xlat22 = dot(u_xlat0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat14 = (-_Glossiness) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = max(u_xlat1.x, 0.00200000009);
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);
    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;
    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat8 = u_xlat8 / u_xlat15;
    u_xlat15 = (-u_xlat1.x) + 1.0;
    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;
    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;
    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;
    u_xlat16_23 = -abs(u_xlat21) + 1.0;
    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat21 = u_xlat8 * u_xlat21;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = max(u_xlat21, 9.99999975e-05);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat0.x * u_xlat21;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_26!=0.0);
#else
    u_xlatb22 = u_xlat16_26!=0.0;
#endif
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat21);
    u_xlat16_26 = (-u_xlat7.x) + 1.0;
    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;
    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat7.x + u_xlat7.x;
    u_xlat16_5.x = u_xlat7.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat14 + -0.5;
    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;
    u_xlat16_12 = (-u_xlat0.x) + 1.0;
    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_23;
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23);
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL_COOKIE SHADOWS_SCREEN 
-- Vertex shader for "gles":
// Stats: 107 math, 3 textures, 1 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_9.zw;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_20.x;
  tmpvar_6.w = tmpvar_20.y;
  tmpvar_7.w = tmpvar_20.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
  xlv_TEXCOORD6 = o_17;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD5;
  mediump float realtimeShadowAttenuation_11;
  highp vec4 v_12;
  v_12.x = unity_MatrixV[0].z;
  v_12.y = unity_MatrixV[1].z;
  v_12.z = unity_MatrixV[2].z;
  v_12.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_14 = tmpvar_15;
  lowp float tmpvar_16;
  tmpvar_16 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_11 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = clamp ((realtimeShadowAttenuation_11 + tmpvar_14), 0.0, 1.0);
  shadow_2 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_10).xy).w * shadow_2);
  atten_1 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19.x = xlv_TEXCOORD2.w;
  tmpvar_19.y = xlv_TEXCOORD2_1.w;
  tmpvar_19.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_20;
  lightDir_20 = tmpvar_19;
  mediump float atten_21;
  atten_21 = atten_1;
  mediump vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_22 = (tmpvar_22 * atten_21);
  highp vec3 viewDir_23;
  viewDir_23 = -(normalize(xlv_TEXCOORD1));
  mediump vec3 color_24;
  highp float specularTerm_25;
  mediump float diffuseTerm_26;
  mediump float nv_27;
  highp float tmpvar_28;
  highp float smoothness_29;
  smoothness_29 = tmpvar_5;
  tmpvar_28 = (1.0 - smoothness_29);
  highp vec3 tmpvar_30;
  highp vec3 inVec_31;
  inVec_31 = (lightDir_20 + viewDir_23);
  tmpvar_30 = (inVec_31 * inversesqrt(max (0.001, 
    dot (inVec_31, inVec_31)
  )));
  highp float tmpvar_32;
  tmpvar_32 = abs(dot (tmpvar_9, viewDir_23));
  nv_27 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (dot (tmpvar_9, lightDir_20), 0.0, 1.0);
  highp float tmpvar_34;
  tmpvar_34 = clamp (dot (tmpvar_9, tmpvar_30), 0.0, 1.0);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (dot (lightDir_20, tmpvar_30), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float NdotL_38;
  NdotL_38 = tmpvar_33;
  mediump float perceptualRoughness_39;
  perceptualRoughness_39 = tmpvar_28;
  mediump float tmpvar_40;
  tmpvar_40 = (0.5 + ((2.0 * tmpvar_35) * (tmpvar_35 * perceptualRoughness_39)));
  mediump float x_41;
  x_41 = (1.0 - NdotL_38);
  mediump float x_42;
  x_42 = (1.0 - nv_27);
  tmpvar_37 = ((1.0 + (
    (tmpvar_40 - 1.0)
   * 
    ((x_41 * x_41) * ((x_41 * x_41) * x_41))
  )) * (1.0 + (
    (tmpvar_40 - 1.0)
   * 
    ((x_42 * x_42) * ((x_42 * x_42) * x_42))
  )));
  highp float tmpvar_43;
  tmpvar_43 = (tmpvar_37 * tmpvar_33);
  diffuseTerm_26 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = max ((tmpvar_28 * tmpvar_28), 0.002);
  highp float NdotV_45;
  NdotV_45 = nv_27;
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_44 * tmpvar_44);
  highp float tmpvar_47;
  tmpvar_47 = (((
    (tmpvar_34 * tmpvar_46)
   - tmpvar_34) * tmpvar_34) + 1.0);
  highp float tmpvar_48;
  tmpvar_48 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_33 * (
        (NdotV_45 * (1.0 - tmpvar_44))
       + tmpvar_44)) + (NdotV_45 * (
        (tmpvar_33 * (1.0 - tmpvar_44))
       + tmpvar_44))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_46)
     / 
      ((tmpvar_47 * tmpvar_47) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_33));
  specularTerm_25 = tmpvar_48;
  bvec3 tmpvar_49;
  tmpvar_49 = bvec3(tmpvar_8);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  highp float tmpvar_51;
  if (tmpvar_50) {
    tmpvar_51 = 1.0;
  } else {
    tmpvar_51 = 0.0;
  };
  specularTerm_25 = (tmpvar_48 * tmpvar_51);
  mediump vec3 tmpvar_52;
  mediump float x_53;
  x_53 = (1.0 - tmpvar_35);
  tmpvar_52 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_53 * x_53)
   * 
    ((x_53 * x_53) * x_53)
  )));
  highp vec3 tmpvar_54;
  tmpvar_54 = ((tmpvar_7 * (tmpvar_22 * diffuseTerm_26)) + ((specularTerm_25 * tmpvar_22) * tmpvar_52));
  color_24 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_24;
  mediump vec4 xlat_varoutput_56;
  xlat_varoutput_56.xyz = tmpvar_55.xyz;
  xlat_varoutput_56.w = 1.0;
  gl_FragData[0] = xlat_varoutput_56;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.w = 0.0;
    vs_TEXCOORD2 = u_xlat2.wwwx;
    vs_TEXCOORD3 = u_xlat2.wwwy;
    vs_TEXCOORD4.w = u_xlat2.z;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp float u_xlat10_7;
float u_xlat8;
mediump float u_xlat16_12;
float u_xlat14;
float u_xlat15;
mediump float u_xlat16_19;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_7 = texture(_ShadowMapTexture, u_xlat7.xy).x;
    u_xlat16_2.x = u_xlat0.x + u_xlat10_7;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat4.xyz));
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = max(u_xlat22, 0.00100000005);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;
    u_xlat22 = dot(u_xlat0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat14 = (-_Glossiness) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = max(u_xlat1.x, 0.00200000009);
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);
    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;
    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat8 = u_xlat8 / u_xlat15;
    u_xlat15 = (-u_xlat1.x) + 1.0;
    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;
    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;
    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;
    u_xlat16_23 = -abs(u_xlat21) + 1.0;
    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat21 = u_xlat8 * u_xlat21;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = max(u_xlat21, 9.99999975e-05);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat0.x * u_xlat21;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_26!=0.0);
#else
    u_xlatb22 = u_xlat16_26!=0.0;
#endif
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat21);
    u_xlat16_26 = (-u_xlat7.x) + 1.0;
    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;
    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat7.x + u_xlat7.x;
    u_xlat16_5.x = u_xlat7.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat14 + -0.5;
    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;
    u_xlat16_12 = (-u_xlat0.x) + 1.0;
    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_23;
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23);
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: POINT SHADOWS_CUBE 
-- Vertex shader for "gles":
// Stats: 117 math, 3 textures, 2 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_12;
  tmpvar_12 = (unity_WorldToLight * tmpvar_11).xyz;
  highp vec4 v_13;
  v_13.x = unity_MatrixV[0].z;
  v_13.y = unity_MatrixV[1].z;
  v_13.z = unity_MatrixV[2].z;
  v_13.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  highp vec3 vec_17;
  vec_17 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_18;
  highp float mydist_19;
  mydist_19 = ((sqrt(
    dot (vec_17, vec_17)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = textureCube (_ShadowMapTexture, vec_17);
  highp vec4 vals_21;
  vals_21 = tmpvar_20;
  highp float tmpvar_22;
  tmpvar_22 = dot (vals_21, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_18 = tmpvar_22;
  mediump float tmpvar_23;
  if ((shadowVal_18 < mydist_19)) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((tmpvar_23 + tmpvar_15), 0.0, 1.0);
  shadow_2 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (texture2D (_LightTexture0, vec2(dot (tmpvar_12, tmpvar_12))).w * shadow_2);
  atten_1 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26.x = xlv_TEXCOORD2.w;
  tmpvar_26.y = xlv_TEXCOORD2_1.w;
  tmpvar_26.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_27;
  lightDir_27 = tmpvar_26;
  mediump float atten_28;
  atten_28 = atten_1;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_29 = _LightColor0.xyz;
  highp vec3 n_31;
  n_31 = lightDir_27;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(n_31);
  tmpvar_30 = tmpvar_32;
  tmpvar_29 = (tmpvar_29 * atten_28);
  highp vec3 viewDir_33;
  viewDir_33 = -(tmpvar_10);
  mediump vec3 color_34;
  highp float specularTerm_35;
  mediump float diffuseTerm_36;
  mediump float nv_37;
  highp float tmpvar_38;
  highp float smoothness_39;
  smoothness_39 = tmpvar_5;
  tmpvar_38 = (1.0 - smoothness_39);
  highp vec3 tmpvar_40;
  highp vec3 inVec_41;
  inVec_41 = (tmpvar_30 + viewDir_33);
  tmpvar_40 = (inVec_41 * inversesqrt(max (0.001, 
    dot (inVec_41, inVec_41)
  )));
  highp float tmpvar_42;
  tmpvar_42 = abs(dot (tmpvar_9, viewDir_33));
  nv_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_9, tmpvar_30), 0.0, 1.0);
  highp float tmpvar_44;
  tmpvar_44 = clamp (dot (tmpvar_9, tmpvar_40), 0.0, 1.0);
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (tmpvar_30, tmpvar_40), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  mediump float NdotL_48;
  NdotL_48 = tmpvar_43;
  mediump float perceptualRoughness_49;
  perceptualRoughness_49 = tmpvar_38;
  mediump float tmpvar_50;
  tmpvar_50 = (0.5 + ((2.0 * tmpvar_45) * (tmpvar_45 * perceptualRoughness_49)));
  mediump float x_51;
  x_51 = (1.0 - NdotL_48);
  mediump float x_52;
  x_52 = (1.0 - nv_37);
  tmpvar_47 = ((1.0 + (
    (tmpvar_50 - 1.0)
   * 
    ((x_51 * x_51) * ((x_51 * x_51) * x_51))
  )) * (1.0 + (
    (tmpvar_50 - 1.0)
   * 
    ((x_52 * x_52) * ((x_52 * x_52) * x_52))
  )));
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_47 * tmpvar_43);
  diffuseTerm_36 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = max ((tmpvar_38 * tmpvar_38), 0.002);
  highp float NdotV_55;
  NdotV_55 = nv_37;
  highp float tmpvar_56;
  tmpvar_56 = (tmpvar_54 * tmpvar_54);
  highp float tmpvar_57;
  tmpvar_57 = (((
    (tmpvar_44 * tmpvar_56)
   - tmpvar_44) * tmpvar_44) + 1.0);
  highp float tmpvar_58;
  tmpvar_58 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_43 * (
        (NdotV_55 * (1.0 - tmpvar_54))
       + tmpvar_54)) + (NdotV_55 * (
        (tmpvar_43 * (1.0 - tmpvar_54))
       + tmpvar_54))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_56)
     / 
      ((tmpvar_57 * tmpvar_57) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_43));
  specularTerm_35 = tmpvar_58;
  bvec3 tmpvar_59;
  tmpvar_59 = bvec3(tmpvar_8);
  bool tmpvar_60;
  tmpvar_60 = any(tmpvar_59);
  highp float tmpvar_61;
  if (tmpvar_60) {
    tmpvar_61 = 1.0;
  } else {
    tmpvar_61 = 0.0;
  };
  specularTerm_35 = (tmpvar_58 * tmpvar_61);
  mediump vec3 tmpvar_62;
  mediump float x_63;
  x_63 = (1.0 - tmpvar_45);
  tmpvar_62 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_63 * x_63)
   * 
    ((x_63 * x_63) * x_63)
  )));
  highp vec3 tmpvar_64;
  tmpvar_64 = ((tmpvar_7 * (tmpvar_29 * diffuseTerm_36)) + ((specularTerm_35 * tmpvar_29) * tmpvar_62));
  color_34 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_34;
  mediump vec4 xlat_varoutput_66;
  xlat_varoutput_66.xyz = tmpvar_65.xyz;
  xlat_varoutput_66.w = 1.0;
  gl_FragData[0] = xlat_varoutput_66;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform highp sampler2D _LightTexture0;
uniform lowp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
mediump float u_xlat16_12;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
mediump float u_xlat16_19;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_24;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat7.xyz);
    u_xlat7.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat14 = sqrt(u_xlat1.x);
    u_xlat14 = u_xlat14 * _LightPositionRange.w;
    u_xlat14 = u_xlat14 * _LightProjectionParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<u_xlat14);
#else
    u_xlatb7 = u_xlat7.x<u_xlat14;
#endif
    u_xlat16_3.x = (u_xlatb7) ? _LightShadowData.x : 1.0;
    u_xlat16_3.x = u_xlat0.x + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).w;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));
    u_xlat7.x = (-_Glossiness) + 1.0;
    u_xlat14 = u_xlat7.x * u_xlat7.x;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat8 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);
    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat21 = u_xlat8 / u_xlat21;
    u_xlat8 = (-u_xlat14) + 1.0;
    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;
    u_xlat14 = u_xlat14 * abs(u_xlat0.x);
    u_xlat16_24 = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;
    u_xlat0.x = u_xlat0.x + 9.99999975e-06;
    u_xlat0.x = 0.5 / u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_26!=0.0);
#else
    u_xlatb14 = u_xlat16_26!=0.0;
#endif
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx;
    u_xlat16_26 = (-u_xlat22) + 1.0;
    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;
    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;
    u_xlat16_5.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat22 + u_xlat22;
    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;
    u_xlat16_24 = u_xlat16_5.x * u_xlat16_24 + 1.0;
    u_xlat16_12 = (-u_xlat1.x) + 1.0;
    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;
    u_xlat7.x = u_xlat1.x * u_xlat16_24;
    u_xlat16_3.xyz = u_xlat7.xxx * u_xlat16_3.xyz;
    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_24);
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xzw;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: POINT SHADOWS_CUBE SHADOWS_SOFT 
-- Vertex shader for "gles":
// Stats: 132 math, 6 textures, 5 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_12;
  tmpvar_12 = (unity_WorldToLight * tmpvar_11).xyz;
  highp vec4 v_13;
  v_13.x = unity_MatrixV[0].z;
  v_13.y = unity_MatrixV[1].z;
  v_13.z = unity_MatrixV[2].z;
  v_13.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  highp vec3 vec_17;
  vec_17 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  highp vec4 shadowVals_18;
  highp float mydist_19;
  mydist_19 = ((sqrt(
    dot (vec_17, vec_17)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = (vec_17 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_20.xyz, 0.0);
  tmpvar_21 = tmpvar_22;
  shadowVals_18.x = dot (tmpvar_21, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_23;
  tmpvar_23.w = 0.0;
  tmpvar_23.xyz = (vec_17 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_23.xyz, 0.0);
  tmpvar_24 = tmpvar_25;
  shadowVals_18.y = dot (tmpvar_24, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 0.0;
  tmpvar_26.xyz = (vec_17 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_26.xyz, 0.0);
  tmpvar_27 = tmpvar_28;
  shadowVals_18.z = dot (tmpvar_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_29;
  tmpvar_29.w = 0.0;
  tmpvar_29.xyz = (vec_17 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_29.xyz, 0.0);
  tmpvar_30 = tmpvar_31;
  shadowVals_18.w = dot (tmpvar_30, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_32;
  tmpvar_32 = lessThan (shadowVals_18, vec4(mydist_19));
  mediump vec4 tmpvar_33;
  tmpvar_33 = _LightShadowData.xxxx;
  mediump float tmpvar_34;
  if (tmpvar_32.x) {
    tmpvar_34 = tmpvar_33.x;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_32.y) {
    tmpvar_35 = tmpvar_33.y;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_32.z) {
    tmpvar_36 = tmpvar_33.z;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump float tmpvar_37;
  if (tmpvar_32.w) {
    tmpvar_37 = tmpvar_33.w;
  } else {
    tmpvar_37 = 1.0;
  };
  mediump vec4 tmpvar_38;
  tmpvar_38.x = tmpvar_34;
  tmpvar_38.y = tmpvar_35;
  tmpvar_38.z = tmpvar_36;
  tmpvar_38.w = tmpvar_37;
  mediump float tmpvar_39;
  tmpvar_39 = clamp ((dot (tmpvar_38, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_15), 0.0, 1.0);
  shadow_2 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (texture2D (_LightTexture0, vec2(dot (tmpvar_12, tmpvar_12))).w * shadow_2);
  atten_1 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41.x = xlv_TEXCOORD2.w;
  tmpvar_41.y = xlv_TEXCOORD2_1.w;
  tmpvar_41.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_42;
  lightDir_42 = tmpvar_41;
  mediump float atten_43;
  atten_43 = atten_1;
  mediump vec3 tmpvar_44;
  mediump vec3 tmpvar_45;
  tmpvar_44 = _LightColor0.xyz;
  highp vec3 n_46;
  n_46 = lightDir_42;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(n_46);
  tmpvar_45 = tmpvar_47;
  tmpvar_44 = (tmpvar_44 * atten_43);
  highp vec3 viewDir_48;
  viewDir_48 = -(tmpvar_10);
  mediump vec3 color_49;
  highp float specularTerm_50;
  mediump float diffuseTerm_51;
  mediump float nv_52;
  highp float tmpvar_53;
  highp float smoothness_54;
  smoothness_54 = tmpvar_5;
  tmpvar_53 = (1.0 - smoothness_54);
  highp vec3 tmpvar_55;
  highp vec3 inVec_56;
  inVec_56 = (tmpvar_45 + viewDir_48);
  tmpvar_55 = (inVec_56 * inversesqrt(max (0.001, 
    dot (inVec_56, inVec_56)
  )));
  highp float tmpvar_57;
  tmpvar_57 = abs(dot (tmpvar_9, viewDir_48));
  nv_52 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_9, tmpvar_45), 0.0, 1.0);
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (tmpvar_9, tmpvar_55), 0.0, 1.0);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (dot (tmpvar_45, tmpvar_55), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  mediump float tmpvar_62;
  mediump float NdotL_63;
  NdotL_63 = tmpvar_58;
  mediump float perceptualRoughness_64;
  perceptualRoughness_64 = tmpvar_53;
  mediump float tmpvar_65;
  tmpvar_65 = (0.5 + ((2.0 * tmpvar_60) * (tmpvar_60 * perceptualRoughness_64)));
  mediump float x_66;
  x_66 = (1.0 - NdotL_63);
  mediump float x_67;
  x_67 = (1.0 - nv_52);
  tmpvar_62 = ((1.0 + (
    (tmpvar_65 - 1.0)
   * 
    ((x_66 * x_66) * ((x_66 * x_66) * x_66))
  )) * (1.0 + (
    (tmpvar_65 - 1.0)
   * 
    ((x_67 * x_67) * ((x_67 * x_67) * x_67))
  )));
  highp float tmpvar_68;
  tmpvar_68 = (tmpvar_62 * tmpvar_58);
  diffuseTerm_51 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = max ((tmpvar_53 * tmpvar_53), 0.002);
  highp float NdotV_70;
  NdotV_70 = nv_52;
  highp float tmpvar_71;
  tmpvar_71 = (tmpvar_69 * tmpvar_69);
  highp float tmpvar_72;
  tmpvar_72 = (((
    (tmpvar_59 * tmpvar_71)
   - tmpvar_59) * tmpvar_59) + 1.0);
  highp float tmpvar_73;
  tmpvar_73 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_58 * (
        (NdotV_70 * (1.0 - tmpvar_69))
       + tmpvar_69)) + (NdotV_70 * (
        (tmpvar_58 * (1.0 - tmpvar_69))
       + tmpvar_69))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_71)
     / 
      ((tmpvar_72 * tmpvar_72) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_58));
  specularTerm_50 = tmpvar_73;
  bvec3 tmpvar_74;
  tmpvar_74 = bvec3(tmpvar_8);
  bool tmpvar_75;
  tmpvar_75 = any(tmpvar_74);
  highp float tmpvar_76;
  if (tmpvar_75) {
    tmpvar_76 = 1.0;
  } else {
    tmpvar_76 = 0.0;
  };
  specularTerm_50 = (tmpvar_73 * tmpvar_76);
  mediump vec3 tmpvar_77;
  mediump float x_78;
  x_78 = (1.0 - tmpvar_60);
  tmpvar_77 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_78 * x_78)
   * 
    ((x_78 * x_78) * x_78)
  )));
  highp vec3 tmpvar_79;
  tmpvar_79 = ((tmpvar_7 * (tmpvar_44 * diffuseTerm_51)) + ((specularTerm_50 * tmpvar_44) * tmpvar_77));
  color_49 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80.w = 1.0;
  tmpvar_80.xyz = color_49;
  mediump vec4 xlat_varoutput_81;
  xlat_varoutput_81.xyz = tmpvar_80.xyz;
  xlat_varoutput_81.w = 1.0;
  gl_FragData[0] = xlat_varoutput_81;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform highp sampler2D _LightTexture0;
uniform lowp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_12;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
mediump float u_xlat16_19;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * _LightPositionRange.w;
    u_xlat21 = u_xlat21 * _LightProjectionParams.w;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureLod(_ShadowMapTexture, u_xlat1.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureLod(_ShadowMapTexture, u_xlat2.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_3 = textureLod(_ShadowMapTexture, u_xlat0.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat10_2 = textureLod(_ShadowMapTexture, u_xlat2.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat21));
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat0.x + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).w;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));
    u_xlat7.x = (-_Glossiness) + 1.0;
    u_xlat14 = u_xlat7.x * u_xlat7.x;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat8 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);
    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat21 = u_xlat8 / u_xlat21;
    u_xlat8 = (-u_xlat14) + 1.0;
    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;
    u_xlat14 = u_xlat14 * abs(u_xlat0.x);
    u_xlat16_25 = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;
    u_xlat0.x = u_xlat0.x + 9.99999975e-06;
    u_xlat0.x = 0.5 / u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_26!=0.0);
#else
    u_xlatb14 = u_xlat16_26!=0.0;
#endif
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat0.xxx;
    u_xlat16_26 = (-u_xlat22) + 1.0;
    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;
    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;
    u_xlat16_5.x = u_xlat16_25 * u_xlat16_25;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat22 + u_xlat22;
    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;
    u_xlat16_25 = u_xlat16_5.x * u_xlat16_25 + 1.0;
    u_xlat16_12 = (-u_xlat1.x) + 1.0;
    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat7.x = u_xlat1.x * u_xlat16_25;
    u_xlat16_4.xyz = u_xlat7.xxx * u_xlat16_4.xyz;
    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_25);
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xzw;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// Stats: 118 math, 4 textures, 2 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_12;
  tmpvar_12 = (unity_WorldToLight * tmpvar_11).xyz;
  highp vec4 v_13;
  v_13.x = unity_MatrixV[0].z;
  v_13.y = unity_MatrixV[1].z;
  v_13.z = unity_MatrixV[2].z;
  v_13.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  highp vec3 vec_17;
  vec_17 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_18;
  highp float mydist_19;
  mydist_19 = ((sqrt(
    dot (vec_17, vec_17)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = textureCube (_ShadowMapTexture, vec_17);
  highp vec4 vals_21;
  vals_21 = tmpvar_20;
  highp float tmpvar_22;
  tmpvar_22 = dot (vals_21, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_18 = tmpvar_22;
  mediump float tmpvar_23;
  if ((shadowVal_18 < mydist_19)) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((tmpvar_23 + tmpvar_15), 0.0, 1.0);
  shadow_2 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_12, tmpvar_12))).w * textureCube (_LightTexture0, tmpvar_12).w) * shadow_2);
  atten_1 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26.x = xlv_TEXCOORD2.w;
  tmpvar_26.y = xlv_TEXCOORD2_1.w;
  tmpvar_26.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_27;
  lightDir_27 = tmpvar_26;
  mediump float atten_28;
  atten_28 = atten_1;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_29 = _LightColor0.xyz;
  highp vec3 n_31;
  n_31 = lightDir_27;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(n_31);
  tmpvar_30 = tmpvar_32;
  tmpvar_29 = (tmpvar_29 * atten_28);
  highp vec3 viewDir_33;
  viewDir_33 = -(tmpvar_10);
  mediump vec3 color_34;
  highp float specularTerm_35;
  mediump float diffuseTerm_36;
  mediump float nv_37;
  highp float tmpvar_38;
  highp float smoothness_39;
  smoothness_39 = tmpvar_5;
  tmpvar_38 = (1.0 - smoothness_39);
  highp vec3 tmpvar_40;
  highp vec3 inVec_41;
  inVec_41 = (tmpvar_30 + viewDir_33);
  tmpvar_40 = (inVec_41 * inversesqrt(max (0.001, 
    dot (inVec_41, inVec_41)
  )));
  highp float tmpvar_42;
  tmpvar_42 = abs(dot (tmpvar_9, viewDir_33));
  nv_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_9, tmpvar_30), 0.0, 1.0);
  highp float tmpvar_44;
  tmpvar_44 = clamp (dot (tmpvar_9, tmpvar_40), 0.0, 1.0);
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (tmpvar_30, tmpvar_40), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  mediump float NdotL_48;
  NdotL_48 = tmpvar_43;
  mediump float perceptualRoughness_49;
  perceptualRoughness_49 = tmpvar_38;
  mediump float tmpvar_50;
  tmpvar_50 = (0.5 + ((2.0 * tmpvar_45) * (tmpvar_45 * perceptualRoughness_49)));
  mediump float x_51;
  x_51 = (1.0 - NdotL_48);
  mediump float x_52;
  x_52 = (1.0 - nv_37);
  tmpvar_47 = ((1.0 + (
    (tmpvar_50 - 1.0)
   * 
    ((x_51 * x_51) * ((x_51 * x_51) * x_51))
  )) * (1.0 + (
    (tmpvar_50 - 1.0)
   * 
    ((x_52 * x_52) * ((x_52 * x_52) * x_52))
  )));
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_47 * tmpvar_43);
  diffuseTerm_36 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = max ((tmpvar_38 * tmpvar_38), 0.002);
  highp float NdotV_55;
  NdotV_55 = nv_37;
  highp float tmpvar_56;
  tmpvar_56 = (tmpvar_54 * tmpvar_54);
  highp float tmpvar_57;
  tmpvar_57 = (((
    (tmpvar_44 * tmpvar_56)
   - tmpvar_44) * tmpvar_44) + 1.0);
  highp float tmpvar_58;
  tmpvar_58 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_43 * (
        (NdotV_55 * (1.0 - tmpvar_54))
       + tmpvar_54)) + (NdotV_55 * (
        (tmpvar_43 * (1.0 - tmpvar_54))
       + tmpvar_54))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_56)
     / 
      ((tmpvar_57 * tmpvar_57) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_43));
  specularTerm_35 = tmpvar_58;
  bvec3 tmpvar_59;
  tmpvar_59 = bvec3(tmpvar_8);
  bool tmpvar_60;
  tmpvar_60 = any(tmpvar_59);
  highp float tmpvar_61;
  if (tmpvar_60) {
    tmpvar_61 = 1.0;
  } else {
    tmpvar_61 = 0.0;
  };
  specularTerm_35 = (tmpvar_58 * tmpvar_61);
  mediump vec3 tmpvar_62;
  mediump float x_63;
  x_63 = (1.0 - tmpvar_45);
  tmpvar_62 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_63 * x_63)
   * 
    ((x_63 * x_63) * x_63)
  )));
  highp vec3 tmpvar_64;
  tmpvar_64 = ((tmpvar_7 * (tmpvar_29 * diffuseTerm_36)) + ((specularTerm_35 * tmpvar_29) * tmpvar_62));
  color_34 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_34;
  mediump vec4 xlat_varoutput_66;
  xlat_varoutput_66.xyz = tmpvar_65.xyz;
  xlat_varoutput_66.w = 1.0;
  gl_FragData[0] = xlat_varoutput_66;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
mediump float u_xlat16_12;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
mediump float u_xlat16_19;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_24;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat7.xyz);
    u_xlat7.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat14 = sqrt(u_xlat1.x);
    u_xlat14 = u_xlat14 * _LightPositionRange.w;
    u_xlat14 = u_xlat14 * _LightProjectionParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<u_xlat14);
#else
    u_xlatb7 = u_xlat7.x<u_xlat14;
#endif
    u_xlat16_3.x = (u_xlatb7) ? _LightShadowData.x : 1.0;
    u_xlat16_3.x = u_xlat0.x + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
    u_xlat7.x = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));
    u_xlat7.x = (-_Glossiness) + 1.0;
    u_xlat14 = u_xlat7.x * u_xlat7.x;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat8 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);
    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat21 = u_xlat8 / u_xlat21;
    u_xlat8 = (-u_xlat14) + 1.0;
    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;
    u_xlat14 = u_xlat14 * abs(u_xlat0.x);
    u_xlat16_24 = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;
    u_xlat0.x = u_xlat0.x + 9.99999975e-06;
    u_xlat0.x = 0.5 / u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_26!=0.0);
#else
    u_xlatb14 = u_xlat16_26!=0.0;
#endif
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx;
    u_xlat16_26 = (-u_xlat22) + 1.0;
    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;
    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;
    u_xlat16_5.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat22 + u_xlat22;
    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;
    u_xlat16_24 = u_xlat16_5.x * u_xlat16_24 + 1.0;
    u_xlat16_12 = (-u_xlat1.x) + 1.0;
    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;
    u_xlat7.x = u_xlat1.x * u_xlat16_24;
    u_xlat16_3.xyz = u_xlat7.xxx * u_xlat16_3.xyz;
    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_24);
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xzw;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: POINT_COOKIE SHADOWS_CUBE SHADOWS_SOFT 
-- Vertex shader for "gles":
// Stats: 133 math, 7 textures, 5 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_12;
  tmpvar_12 = (unity_WorldToLight * tmpvar_11).xyz;
  highp vec4 v_13;
  v_13.x = unity_MatrixV[0].z;
  v_13.y = unity_MatrixV[1].z;
  v_13.z = unity_MatrixV[2].z;
  v_13.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  highp vec3 vec_17;
  vec_17 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  highp vec4 shadowVals_18;
  highp float mydist_19;
  mydist_19 = ((sqrt(
    dot (vec_17, vec_17)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = (vec_17 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_20.xyz, 0.0);
  tmpvar_21 = tmpvar_22;
  shadowVals_18.x = dot (tmpvar_21, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_23;
  tmpvar_23.w = 0.0;
  tmpvar_23.xyz = (vec_17 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_23.xyz, 0.0);
  tmpvar_24 = tmpvar_25;
  shadowVals_18.y = dot (tmpvar_24, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 0.0;
  tmpvar_26.xyz = (vec_17 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_26.xyz, 0.0);
  tmpvar_27 = tmpvar_28;
  shadowVals_18.z = dot (tmpvar_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_29;
  tmpvar_29.w = 0.0;
  tmpvar_29.xyz = (vec_17 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_29.xyz, 0.0);
  tmpvar_30 = tmpvar_31;
  shadowVals_18.w = dot (tmpvar_30, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_32;
  tmpvar_32 = lessThan (shadowVals_18, vec4(mydist_19));
  mediump vec4 tmpvar_33;
  tmpvar_33 = _LightShadowData.xxxx;
  mediump float tmpvar_34;
  if (tmpvar_32.x) {
    tmpvar_34 = tmpvar_33.x;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_32.y) {
    tmpvar_35 = tmpvar_33.y;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_32.z) {
    tmpvar_36 = tmpvar_33.z;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump float tmpvar_37;
  if (tmpvar_32.w) {
    tmpvar_37 = tmpvar_33.w;
  } else {
    tmpvar_37 = 1.0;
  };
  mediump vec4 tmpvar_38;
  tmpvar_38.x = tmpvar_34;
  tmpvar_38.y = tmpvar_35;
  tmpvar_38.z = tmpvar_36;
  tmpvar_38.w = tmpvar_37;
  mediump float tmpvar_39;
  tmpvar_39 = clamp ((dot (tmpvar_38, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_15), 0.0, 1.0);
  shadow_2 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_12, tmpvar_12))).w * textureCube (_LightTexture0, tmpvar_12).w) * shadow_2);
  atten_1 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41.x = xlv_TEXCOORD2.w;
  tmpvar_41.y = xlv_TEXCOORD2_1.w;
  tmpvar_41.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_42;
  lightDir_42 = tmpvar_41;
  mediump float atten_43;
  atten_43 = atten_1;
  mediump vec3 tmpvar_44;
  mediump vec3 tmpvar_45;
  tmpvar_44 = _LightColor0.xyz;
  highp vec3 n_46;
  n_46 = lightDir_42;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(n_46);
  tmpvar_45 = tmpvar_47;
  tmpvar_44 = (tmpvar_44 * atten_43);
  highp vec3 viewDir_48;
  viewDir_48 = -(tmpvar_10);
  mediump vec3 color_49;
  highp float specularTerm_50;
  mediump float diffuseTerm_51;
  mediump float nv_52;
  highp float tmpvar_53;
  highp float smoothness_54;
  smoothness_54 = tmpvar_5;
  tmpvar_53 = (1.0 - smoothness_54);
  highp vec3 tmpvar_55;
  highp vec3 inVec_56;
  inVec_56 = (tmpvar_45 + viewDir_48);
  tmpvar_55 = (inVec_56 * inversesqrt(max (0.001, 
    dot (inVec_56, inVec_56)
  )));
  highp float tmpvar_57;
  tmpvar_57 = abs(dot (tmpvar_9, viewDir_48));
  nv_52 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_9, tmpvar_45), 0.0, 1.0);
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (tmpvar_9, tmpvar_55), 0.0, 1.0);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (dot (tmpvar_45, tmpvar_55), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  mediump float tmpvar_62;
  mediump float NdotL_63;
  NdotL_63 = tmpvar_58;
  mediump float perceptualRoughness_64;
  perceptualRoughness_64 = tmpvar_53;
  mediump float tmpvar_65;
  tmpvar_65 = (0.5 + ((2.0 * tmpvar_60) * (tmpvar_60 * perceptualRoughness_64)));
  mediump float x_66;
  x_66 = (1.0 - NdotL_63);
  mediump float x_67;
  x_67 = (1.0 - nv_52);
  tmpvar_62 = ((1.0 + (
    (tmpvar_65 - 1.0)
   * 
    ((x_66 * x_66) * ((x_66 * x_66) * x_66))
  )) * (1.0 + (
    (tmpvar_65 - 1.0)
   * 
    ((x_67 * x_67) * ((x_67 * x_67) * x_67))
  )));
  highp float tmpvar_68;
  tmpvar_68 = (tmpvar_62 * tmpvar_58);
  diffuseTerm_51 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = max ((tmpvar_53 * tmpvar_53), 0.002);
  highp float NdotV_70;
  NdotV_70 = nv_52;
  highp float tmpvar_71;
  tmpvar_71 = (tmpvar_69 * tmpvar_69);
  highp float tmpvar_72;
  tmpvar_72 = (((
    (tmpvar_59 * tmpvar_71)
   - tmpvar_59) * tmpvar_59) + 1.0);
  highp float tmpvar_73;
  tmpvar_73 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_58 * (
        (NdotV_70 * (1.0 - tmpvar_69))
       + tmpvar_69)) + (NdotV_70 * (
        (tmpvar_58 * (1.0 - tmpvar_69))
       + tmpvar_69))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_71)
     / 
      ((tmpvar_72 * tmpvar_72) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_58));
  specularTerm_50 = tmpvar_73;
  bvec3 tmpvar_74;
  tmpvar_74 = bvec3(tmpvar_8);
  bool tmpvar_75;
  tmpvar_75 = any(tmpvar_74);
  highp float tmpvar_76;
  if (tmpvar_75) {
    tmpvar_76 = 1.0;
  } else {
    tmpvar_76 = 0.0;
  };
  specularTerm_50 = (tmpvar_73 * tmpvar_76);
  mediump vec3 tmpvar_77;
  mediump float x_78;
  x_78 = (1.0 - tmpvar_60);
  tmpvar_77 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_78 * x_78)
   * 
    ((x_78 * x_78) * x_78)
  )));
  highp vec3 tmpvar_79;
  tmpvar_79 = ((tmpvar_7 * (tmpvar_44 * diffuseTerm_51)) + ((specularTerm_50 * tmpvar_44) * tmpvar_77));
  color_49 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80.w = 1.0;
  tmpvar_80.xyz = color_49;
  mediump vec4 xlat_varoutput_81;
  xlat_varoutput_81.xyz = tmpvar_80.xyz;
  xlat_varoutput_81.w = 1.0;
  gl_FragData[0] = xlat_varoutput_81;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_12;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
mediump float u_xlat16_19;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * _LightPositionRange.w;
    u_xlat21 = u_xlat21 * _LightProjectionParams.w;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureLod(_ShadowMapTexture, u_xlat1.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureLod(_ShadowMapTexture, u_xlat2.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_3 = textureLod(_ShadowMapTexture, u_xlat0.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat10_2 = textureLod(_ShadowMapTexture, u_xlat2.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat21));
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat0.x + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
    u_xlat7.x = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));
    u_xlat7.x = (-_Glossiness) + 1.0;
    u_xlat14 = u_xlat7.x * u_xlat7.x;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat8 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);
    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat21 = u_xlat8 / u_xlat21;
    u_xlat8 = (-u_xlat14) + 1.0;
    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;
    u_xlat14 = u_xlat14 * abs(u_xlat0.x);
    u_xlat16_25 = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;
    u_xlat0.x = u_xlat0.x + 9.99999975e-06;
    u_xlat0.x = 0.5 / u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_26!=0.0);
#else
    u_xlatb14 = u_xlat16_26!=0.0;
#endif
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat0.xxx;
    u_xlat16_26 = (-u_xlat22) + 1.0;
    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;
    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;
    u_xlat16_5.x = u_xlat16_25 * u_xlat16_25;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat22 + u_xlat22;
    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;
    u_xlat16_25 = u_xlat16_5.x * u_xlat16_25 + 1.0;
    u_xlat16_12 = (-u_xlat1.x) + 1.0;
    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat7.x = u_xlat1.x * u_xlat16_25;
    u_xlat16_4.xyz = u_xlat7.xxx * u_xlat16_4.xyz;
    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_25);
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xzw;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

 }


 // Stats for Vertex shader:
 //         gles: 5 avg math (1..9)
 Pass {
  Name "SHADOWCASTER"
  Tags { "LIGHTMODE"="SHADOWCASTER" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords set in this variant: SHADOWS_DEPTH 
-- Vertex shader for "gles":
// Stats: 1 math
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 wPos_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
  wPos_2 = tmpvar_3;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp mat3 tmpvar_4;
    tmpvar_4[0] = unity_WorldToObject[0].xyz;
    tmpvar_4[1] = unity_WorldToObject[1].xyz;
    tmpvar_4[2] = unity_WorldToObject[2].xyz;
    highp vec3 tmpvar_5;
    tmpvar_5 = normalize((_glesNormal * tmpvar_4));
    highp float tmpvar_6;
    tmpvar_6 = dot (tmpvar_5, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_3.xyz * _WorldSpaceLightPos0.w)
    )));
    wPos_2.xyz = (tmpvar_3.xyz - (tmpvar_5 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_6 * tmpvar_6)))
    )));
  };
  tmpvar_1 = (unity_MatrixVP * wPos_2);
  highp vec4 clipPos_7;
  clipPos_7.xyw = tmpvar_1.xyw;
  clipPos_7.z = (tmpvar_1.z + clamp ((unity_LightShadowBias.x / tmpvar_1.w), 0.0, 1.0));
  clipPos_7.z = mix (clipPos_7.z, max (clipPos_7.z, -(tmpvar_1.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_7;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat6;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
#else
    u_xlatb9 = unity_LightShadowBias.z!=0.0;
#endif
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: SHADOWS_CUBE 
-- Vertex shader for "gles":
// Stats: 9 math
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((unity_ObjectToWorld * _glesVertex).xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_LightShadowBias;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec4 enc_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    ((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) + unity_LightShadowBias.x) * _LightPositionRange.w)
  , 0.999)));
  enc_2 = (tmpvar_3 - (tmpvar_3.yzww * 0.003921569));
  tmpvar_1 = enc_2;
  gl_FragData[0] = tmpvar_1;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec3 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_LightShadowBias;
in highp vec3 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = min(u_xlat0.x, 0.999000013);
    u_xlat0 = u_xlat0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    u_xlat0 = fract(u_xlat0);
    u_xlat0 = (-u_xlat0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

 }


 // Stats for Vertex shader:
 //         gles: 23 avg math (14..29), 2 avg texture (2..3)
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="DEFERRED" "RenderType"="Opaque" "PerformanceChecks"="False" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
No keywords set in this variant.
-- Vertex shader for "gles":
// Stats: 14 math, 2 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_1.xyz);
  mediump float occ_4;
  lowp float tmpvar_5;
  tmpvar_5 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_4 = tmpvar_5;
  mediump vec4 outGBuffer2_6;
  mediump vec4 tmpvar_7;
  tmpvar_7.xyz = (tmpvar_3 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_7.w = ((1.0 - _OcclusionStrength) + (occ_4 * _OcclusionStrength));
  mediump vec4 tmpvar_8;
  tmpvar_8.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_3, vec3(_Metallic));
  tmpvar_8.w = mg_2.y;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((normalize(xlv_TEXCOORD2_2.xyz) * 0.5) + 0.5);
  outGBuffer2_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  gl_FragData[0] = tmpvar_7;
  gl_FragData[1] = tmpvar_8;
  gl_FragData[2] = outGBuffer2_6;
  gl_FragData[3] = tmpvar_10;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
mediump float u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat10_0.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_1 = (-_OcclusionStrength) + 1.0;
    SV_Target0.w = u_xlat10_0.x * _OcclusionStrength + u_xlat16_1;
    u_xlat16_1 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_4.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat16_2.xyz;
    SV_Target1.w = _Glossiness;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = u_xlat0.xyz;
    SV_Target2.w = 1.0;
    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: LIGHTPROBE_SH _EMISSION 
-- Vertex shader for "gles":
// Stats: 29 math, 3 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_9.x;
  tmpvar_6.w = tmpvar_9.y;
  tmpvar_7.w = tmpvar_9.z;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_8.w = 0.0;
  mediump vec3 normal_19;
  normal_19 = tmpvar_18;
  mediump vec3 x1_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = (normal_19.xyzz * normal_19.yzzx);
  x1_20.x = dot (unity_SHBr, tmpvar_21);
  x1_20.y = dot (unity_SHBg, tmpvar_21);
  x1_20.z = dot (unity_SHBb, tmpvar_21);
  tmpvar_8.xyz = (x1_20 + (unity_SHC.xyz * (
    (normal_19.x * normal_19.x)
   - 
    (normal_19.y * normal_19.y)
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 emissiveColor_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump float occ_7;
  lowp float tmpvar_8;
  tmpvar_8 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (occ_7 * _OcclusionStrength));
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_6;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_10;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, tmpvar_12);
  x_13.y = dot (unity_SHAg, tmpvar_12);
  x_13.z = dot (unity_SHAb, tmpvar_12);
  tmpvar_11 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_13)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_11 = (tmpvar_11 * tmpvar_9);
  mediump vec3 color_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * tmpvar_11);
  color_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  emissiveColor_1 = (color_14 + (tmpvar_16.xyz * _EmissionColor.xyz));
  emissiveColor_1 = exp2(-(emissiveColor_1));
  mediump vec4 outGBuffer2_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = tmpvar_5;
  tmpvar_18.w = tmpvar_9;
  mediump vec4 tmpvar_19;
  tmpvar_19.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic));
  tmpvar_19.w = mg_3.y;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((tmpvar_6 * 0.5) + 0.5);
  outGBuffer2_17 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = emissiveColor_1;
  gl_FragData[0] = tmpvar_18;
  gl_FragData[1] = tmpvar_19;
  gl_FragData[2] = outGBuffer2_17;
  gl_FragData[3] = tmpvar_21;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D _EmissionMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
void main()
{
    u_xlat10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_1 = (-_OcclusionStrength) + 1.0;
    u_xlat16_0.w = u_xlat10_0 * _OcclusionStrength + u_xlat16_1;
    u_xlat16_1 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xyz = vec3(u_xlat16_1) * u_xlat16_3.xyz;
    SV_Target0 = u_xlat16_0;
    SV_Target1.w = _Glossiness;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat1.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = u_xlat2.xyz;
    SV_Target2.w = 1.0;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD5.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.www * u_xlat16_2.xyz;
    u_xlat10_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_2.xyz;
    SV_Target3.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target3.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// Stats: 27 math, 2 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_9.x;
  tmpvar_6.w = tmpvar_9.y;
  tmpvar_7.w = tmpvar_9.z;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_8.w = 0.0;
  mediump vec3 normal_19;
  normal_19 = tmpvar_18;
  mediump vec3 x1_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = (normal_19.xyzz * normal_19.yzzx);
  x1_20.x = dot (unity_SHBr, tmpvar_21);
  x1_20.y = dot (unity_SHBg, tmpvar_21);
  x1_20.z = dot (unity_SHBb, tmpvar_21);
  tmpvar_8.xyz = (x1_20 + (unity_SHC.xyz * (
    (normal_19.x * normal_19.x)
   - 
    (normal_19.y * normal_19.y)
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_1.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump float occ_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (occ_6 * _OcclusionStrength));
  mediump vec3 normalWorld_9;
  normalWorld_9 = tmpvar_5;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = normalWorld_9;
  mediump vec3 x_12;
  x_12.x = dot (unity_SHAr, tmpvar_11);
  x_12.y = dot (unity_SHAg, tmpvar_11);
  x_12.z = dot (unity_SHAb, tmpvar_11);
  tmpvar_10 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_12)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_10 = (tmpvar_10 * tmpvar_8);
  mediump vec3 color_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_4 * tmpvar_10);
  color_13 = tmpvar_14;
  mediump vec4 outGBuffer2_15;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = tmpvar_4;
  tmpvar_16.w = tmpvar_8;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_3, vec3(_Metallic));
  tmpvar_17.w = mg_2.y;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_5 * 0.5) + 0.5);
  outGBuffer2_15 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = exp2(-(color_13));
  gl_FragData[0] = tmpvar_16;
  gl_FragData[1] = tmpvar_17;
  gl_FragData[2] = outGBuffer2_15;
  gl_FragData[3] = tmpvar_19;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
void main()
{
    u_xlat10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_1 = (-_OcclusionStrength) + 1.0;
    u_xlat16_0.w = u_xlat10_0 * _OcclusionStrength + u_xlat16_1;
    u_xlat16_1 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xyz = vec3(u_xlat16_1) * u_xlat16_3.xyz;
    SV_Target0 = u_xlat16_0;
    SV_Target1.w = _Glossiness;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat1.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = u_xlat2.xyz;
    SV_Target2.w = 1.0;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD5.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.www * u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
    SV_Target3.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target3.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: LIGHTPROBE_SH _EMISSION UNITY_HDR_ON 
-- Vertex shader for "gles":
// Stats: 27 math, 3 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_9.x;
  tmpvar_6.w = tmpvar_9.y;
  tmpvar_7.w = tmpvar_9.z;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_8.w = 0.0;
  mediump vec3 normal_19;
  normal_19 = tmpvar_18;
  mediump vec3 x1_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = (normal_19.xyzz * normal_19.yzzx);
  x1_20.x = dot (unity_SHBr, tmpvar_21);
  x1_20.y = dot (unity_SHBg, tmpvar_21);
  x1_20.z = dot (unity_SHBb, tmpvar_21);
  tmpvar_8.xyz = (x1_20 + (unity_SHC.xyz * (
    (normal_19.x * normal_19.x)
   - 
    (normal_19.y * normal_19.y)
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_1.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump float occ_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (occ_6 * _OcclusionStrength));
  mediump vec3 normalWorld_9;
  normalWorld_9 = tmpvar_5;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = normalWorld_9;
  mediump vec3 x_12;
  x_12.x = dot (unity_SHAr, tmpvar_11);
  x_12.y = dot (unity_SHAg, tmpvar_11);
  x_12.z = dot (unity_SHAb, tmpvar_11);
  tmpvar_10 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_12)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_10 = (tmpvar_10 * tmpvar_8);
  mediump vec3 color_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_4 * tmpvar_10);
  color_13 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  mediump vec4 outGBuffer2_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = tmpvar_4;
  tmpvar_17.w = tmpvar_8;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_3, vec3(_Metallic));
  tmpvar_18.w = mg_2.y;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_5 * 0.5) + 0.5);
  outGBuffer2_16 = tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = (color_13 + (tmpvar_15.xyz * _EmissionColor.xyz));
  gl_FragData[0] = tmpvar_17;
  gl_FragData[1] = tmpvar_18;
  gl_FragData[2] = outGBuffer2_16;
  gl_FragData[3] = tmpvar_20;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D _EmissionMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
void main()
{
    u_xlat10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_1 = (-_OcclusionStrength) + 1.0;
    u_xlat16_0.w = u_xlat10_0 * _OcclusionStrength + u_xlat16_1;
    u_xlat16_1 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xyz = vec3(u_xlat16_1) * u_xlat16_3.xyz;
    SV_Target0 = u_xlat16_0;
    SV_Target1.w = _Glossiness;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat1.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = u_xlat2.xyz;
    SV_Target2.w = 1.0;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD5.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.www * u_xlat16_2.xyz;
    u_xlat10_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
    SV_Target3.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_2.xyz;
    SV_Target3.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// Stats: 26 math, 2 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_9.x;
  tmpvar_6.w = tmpvar_9.y;
  tmpvar_7.w = tmpvar_9.z;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_8.w = 0.0;
  mediump vec3 normal_19;
  normal_19 = tmpvar_18;
  mediump vec3 x1_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = (normal_19.xyzz * normal_19.yzzx);
  x1_20.x = dot (unity_SHBr, tmpvar_21);
  x1_20.y = dot (unity_SHBg, tmpvar_21);
  x1_20.z = dot (unity_SHBb, tmpvar_21);
  tmpvar_8.xyz = (x1_20 + (unity_SHC.xyz * (
    (normal_19.x * normal_19.x)
   - 
    (normal_19.y * normal_19.y)
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_1.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump float occ_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (occ_6 * _OcclusionStrength));
  mediump vec3 normalWorld_9;
  normalWorld_9 = tmpvar_5;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = normalWorld_9;
  mediump vec3 x_12;
  x_12.x = dot (unity_SHAr, tmpvar_11);
  x_12.y = dot (unity_SHAg, tmpvar_11);
  x_12.z = dot (unity_SHAb, tmpvar_11);
  tmpvar_10 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_12)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_10 = (tmpvar_10 * tmpvar_8);
  mediump vec3 color_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_4 * tmpvar_10);
  color_13 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = color_13;
  mediump vec4 outGBuffer2_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = tmpvar_4;
  tmpvar_17.w = tmpvar_8;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_3, vec3(_Metallic));
  tmpvar_18.w = mg_2.y;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_5 * 0.5) + 0.5);
  outGBuffer2_16 = tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_15.xyz;
  gl_FragData[0] = tmpvar_17;
  gl_FragData[1] = tmpvar_18;
  gl_FragData[2] = outGBuffer2_16;
  gl_FragData[3] = tmpvar_20;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
void main()
{
    u_xlat10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_1 = (-_OcclusionStrength) + 1.0;
    u_xlat16_0.w = u_xlat10_0 * _OcclusionStrength + u_xlat16_1;
    u_xlat16_1 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xyz = vec3(u_xlat16_1) * u_xlat16_3.xyz;
    SV_Target0 = u_xlat16_0;
    SV_Target1.w = _Glossiness;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat1.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = u_xlat2.xyz;
    SV_Target2.w = 1.0;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD5.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.www * u_xlat16_2.xyz;
    SV_Target3.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
    SV_Target3.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// Stats: 16 math, 3 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec3 emissiveColor_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_2.xyz);
  mediump float occ_5;
  lowp float tmpvar_6;
  tmpvar_6 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_5 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  emissiveColor_1 = (tmpvar_7.xyz * _EmissionColor.xyz);
  emissiveColor_1 = exp2(-(emissiveColor_1));
  mediump vec4 outGBuffer2_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.xyz = (tmpvar_4 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_9.w = ((1.0 - _OcclusionStrength) + (occ_5 * _OcclusionStrength));
  mediump vec4 tmpvar_10;
  tmpvar_10.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic));
  tmpvar_10.w = mg_3.y;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = ((normalize(xlv_TEXCOORD2_2.xyz) * 0.5) + 0.5);
  outGBuffer2_8 = tmpvar_11;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = emissiveColor_1;
  gl_FragData[0] = tmpvar_9;
  gl_FragData[1] = tmpvar_10;
  gl_FragData[2] = outGBuffer2_8;
  gl_FragData[3] = tmpvar_12;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D _EmissionMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump float u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat10_0.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_1 = (-_OcclusionStrength) + 1.0;
    SV_Target0.w = u_xlat10_0.x * _OcclusionStrength + u_xlat16_1;
    u_xlat16_1 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_4.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat16_2.xyz;
    SV_Target1.w = _Glossiness;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = u_xlat0.xyz;
    SV_Target2.w = 1.0;
    u_xlat10_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
    SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    SV_Target3.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

 }
}
SubShader { 
 LOD 150
 Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }


 // Stats for Vertex shader:
 //         gles: 117 avg math (50..189), 5 avg texture (4..6), 5 avg branch (0..10)
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="FORWARDBASE" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite [_ZWrite]
  Blend [_SrcBlend] [_DstBlend]
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL 
-- Vertex shader for "gles":
// Stats: 50 math, 4 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  tmpvar_13 = tmpvar_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  c_1.xyz = color_25;
  mediump vec4 xlat_varoutput_39;
  xlat_varoutput_39.xyz = c_1.xyz;
  xlat_varoutput_39.w = 1.0;
  gl_FragData[0] = xlat_varoutput_39;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat16;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
void main()
{
    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat16_1 = u_xlat0.x * u_xlat16_1;
    u_xlat16_1 = u_xlat16_1 * 6.0;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;
    u_xlat16_9.xyz = u_xlat2.xyz * (-u_xlat16_9.xxx) + vs_TEXCOORD1.xyz;
    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_1);
    u_xlat16_3.x = u_xlat10_1.w + -1.0;
    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
    u_xlat10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_3.xyz = vec3(u_xlat10_0) * u_xlat16_3.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);
    u_xlat16 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat4.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.y = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.yw).w;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat16_27 = (-u_xlat16) + 1.0;
    u_xlat16_8 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_8 = u_xlat16_27 * u_xlat16_8;
    u_xlat16_8 = u_xlat16_27 * u_xlat16_8;
    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_29 = (-u_xlat16_27) + 1.0;
    u_xlat16_29 = u_xlat16_29 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_7.xyz = vec3(u_xlat16_29) + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_8) * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_2.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL LIGHTPROBE_SH _EMISSION 
-- Vertex shader for "gles":
// Stats: 55 math, 5 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  tmpvar_13 = tmpvar_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_17;
  mediump vec4 ambientOrLightmapUV_19;
  ambientOrLightmapUV_19.w = 0.0;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 res_21;
  mediump vec3 x_22;
  x_22.x = dot (unity_SHAr, tmpvar_20);
  x_22.y = dot (unity_SHAg, tmpvar_20);
  x_22.z = dot (unity_SHAb, tmpvar_20);
  mediump vec3 x1_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normalWorld_18.xyzz * normalWorld_18.yzzx);
  x1_23.x = dot (unity_SHBr, tmpvar_24);
  x1_23.y = dot (unity_SHBg, tmpvar_24);
  x1_23.z = dot (unity_SHBb, tmpvar_24);
  res_21 = (x_22 + (x1_23 + (unity_SHC.xyz * 
    ((normalWorld_18.x * normalWorld_18.x) - (normalWorld_18.y * normalWorld_18.y))
  )));
  mediump vec3 tmpvar_25;
  tmpvar_25 = max (((1.055 * 
    pow (max (res_21, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_21 = tmpvar_25;
  ambientOrLightmapUV_19.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_25);
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_19;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_26 + (tmpvar_40.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = c_1.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD4.w = 0.0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_10;
mediump vec3 u_xlat16_11;
float u_xlat20;
mediump float u_xlat16_33;
mediump float u_xlat16_34;
void main()
{
    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat16_1 = u_xlat0.x * u_xlat16_1;
    u_xlat16_1 = u_xlat16_1 * 6.0;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_11.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;
    u_xlat16_11.xyz = u_xlat2.xyz * (-u_xlat16_11.xxx) + vs_TEXCOORD1.xyz;
    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_1);
    u_xlat16_3.x = u_xlat10_1.w + -1.0;
    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
    u_xlat10_0.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * vs_TEXCOORD5.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);
    u_xlat20 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.y = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.yw).w;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat16_33 = (-u_xlat20) + 1.0;
    u_xlat16_10 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_10 = u_xlat16_33 * u_xlat16_10;
    u_xlat16_10 = u_xlat16_33 * u_xlat16_10;
    u_xlat16_33 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_34 = (-u_xlat16_33) + 1.0;
    u_xlat16_34 = u_xlat16_34 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_33) * u_xlat16_2.xyz;
    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = vec3(u_xlat16_34) + (-u_xlat16_7.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// Stats: 53 math, 4 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  tmpvar_13 = tmpvar_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_17;
  mediump vec4 ambientOrLightmapUV_19;
  ambientOrLightmapUV_19.w = 0.0;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 res_21;
  mediump vec3 x_22;
  x_22.x = dot (unity_SHAr, tmpvar_20);
  x_22.y = dot (unity_SHAg, tmpvar_20);
  x_22.z = dot (unity_SHAb, tmpvar_20);
  mediump vec3 x1_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normalWorld_18.xyzz * normalWorld_18.yzzx);
  x1_23.x = dot (unity_SHBr, tmpvar_24);
  x1_23.y = dot (unity_SHBg, tmpvar_24);
  x1_23.z = dot (unity_SHBb, tmpvar_24);
  res_21 = (x_22 + (x1_23 + (unity_SHC.xyz * 
    ((normalWorld_18.x * normalWorld_18.x) - (normalWorld_18.y * normalWorld_18.y))
  )));
  mediump vec3 tmpvar_25;
  tmpvar_25 = max (((1.055 * 
    pow (max (res_21, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_21 = tmpvar_25;
  ambientOrLightmapUV_19.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_25);
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_19;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  c_1.xyz = color_26;
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD4.w = 0.0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_10;
mediump vec3 u_xlat16_11;
float u_xlat20;
mediump float u_xlat16_33;
mediump float u_xlat16_34;
void main()
{
    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat16_1 = u_xlat0.x * u_xlat16_1;
    u_xlat16_1 = u_xlat16_1 * 6.0;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_11.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;
    u_xlat16_11.xyz = u_xlat2.xyz * (-u_xlat16_11.xxx) + vs_TEXCOORD1.xyz;
    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_1);
    u_xlat16_3.x = u_xlat10_1.w + -1.0;
    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
    u_xlat10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_3.xyz = vec3(u_xlat10_0) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = vec3(u_xlat10_0) * vs_TEXCOORD5.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);
    u_xlat20 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.y = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.yw).w;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat16_33 = (-u_xlat20) + 1.0;
    u_xlat16_10 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_10 = u_xlat16_33 * u_xlat16_10;
    u_xlat16_10 = u_xlat16_33 * u_xlat16_10;
    u_xlat16_33 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_34 = (-u_xlat16_33) + 1.0;
    u_xlat16_34 = u_xlat16_34 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_33) * u_xlat16_2.xyz;
    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = vec3(u_xlat16_34) + (-u_xlat16_7.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN _EMISSION 
-- Vertex shader for "gles":
// Stats: 177 math, 6 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_9.zw;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = o_17;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  mediump float tmpvar_10;
  tmpvar_10 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_8 = (tmpvar_7 * tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_3 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - tmpvar_3), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_14 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  atten_2 = tmpvar_20;
  mediump float occ_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_21 = tmpvar_22;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump float occlusion_24;
  occlusion_24 = ((1.0 - _OcclusionStrength) + (occ_21 * _OcclusionStrength));
  highp vec4 tmpvar_25;
  highp vec4 tmpvar_26;
  tmpvar_25 = unity_SpecCube0_HDR;
  tmpvar_26 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_27;
  worldViewDir_27 = -(tmpvar_12);
  mediump vec3 Normal_28;
  Normal_28 = tmpvar_11;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  tmpvar_29 = tmpvar_30;
  mediump vec3 I_32;
  I_32 = -(worldViewDir_27);
  mediump vec3 tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_33 = (tmpvar_13 * atten_23);
  tmpvar_34 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_35;
  tmpvar_35 = (I_32 - (2.0 * (
    dot (Normal_28, I_32)
   * Normal_28)));
  mediump vec3 originalReflUVW_36;
  mediump vec3 specular_37;
  originalReflUVW_36 = tmpvar_35;
  mediump vec3 worldRefl_38;
  worldRefl_38 = tmpvar_35;
  highp vec3 worldPos_39;
  worldPos_39 = tmpvar_3;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_40;
    mediump vec3 rbmax_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = normalize(tmpvar_35);
    highp vec3 tmpvar_43;
    tmpvar_43 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_3) / tmpvar_42);
    rbmax_41 = tmpvar_43;
    highp vec3 tmpvar_44;
    tmpvar_44 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_3) / tmpvar_42);
    rbmin_40 = tmpvar_44;
    bvec3 tmpvar_45;
    tmpvar_45 = greaterThan (tmpvar_42, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_46;
    if (tmpvar_45.x) {
      tmpvar_46 = rbmax_41.x;
    } else {
      tmpvar_46 = rbmin_40.x;
    };
    mediump float tmpvar_47;
    if (tmpvar_45.y) {
      tmpvar_47 = rbmax_41.y;
    } else {
      tmpvar_47 = rbmin_40.y;
    };
    mediump float tmpvar_48;
    if (tmpvar_45.z) {
      tmpvar_48 = rbmax_41.z;
    } else {
      tmpvar_48 = rbmin_40.z;
    };
    worldPos_39 = (tmpvar_3 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_38 = (worldPos_39 + (tmpvar_42 * min (
      min (tmpvar_46, tmpvar_47)
    , tmpvar_48)));
  };
  tmpvar_35 = worldRefl_38;
  mediump vec4 hdr_49;
  hdr_49 = tmpvar_25;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = worldRefl_38;
  tmpvar_50.w = ((tmpvar_29 * (1.7 - 
    (0.7 * tmpvar_29)
  )) * 6.0);
  lowp vec4 tmpvar_51;
  tmpvar_51 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_38, tmpvar_50.w);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec3 tmpvar_53;
  tmpvar_53 = ((hdr_49.x * (
    (hdr_49.w * (tmpvar_52.w - 1.0))
   + 1.0)) * tmpvar_52.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_54;
    worldRefl_54 = originalReflUVW_36;
    highp vec3 worldPos_55;
    worldPos_55 = tmpvar_3;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_56;
      mediump vec3 rbmax_57;
      mediump vec3 tmpvar_58;
      tmpvar_58 = normalize(originalReflUVW_36);
      highp vec3 tmpvar_59;
      tmpvar_59 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_3) / tmpvar_58);
      rbmax_57 = tmpvar_59;
      highp vec3 tmpvar_60;
      tmpvar_60 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_3) / tmpvar_58);
      rbmin_56 = tmpvar_60;
      bvec3 tmpvar_61;
      tmpvar_61 = greaterThan (tmpvar_58, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_62;
      if (tmpvar_61.x) {
        tmpvar_62 = rbmax_57.x;
      } else {
        tmpvar_62 = rbmin_56.x;
      };
      mediump float tmpvar_63;
      if (tmpvar_61.y) {
        tmpvar_63 = rbmax_57.y;
      } else {
        tmpvar_63 = rbmin_56.y;
      };
      mediump float tmpvar_64;
      if (tmpvar_61.z) {
        tmpvar_64 = rbmax_57.z;
      } else {
        tmpvar_64 = rbmin_56.z;
      };
      worldPos_55 = (tmpvar_3 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_54 = (worldPos_55 + (tmpvar_58 * min (
        min (tmpvar_62, tmpvar_63)
      , tmpvar_64)));
    };
    tmpvar_35 = worldRefl_54;
    mediump vec4 hdr_65;
    hdr_65 = tmpvar_26;
    mediump vec4 tmpvar_66;
    tmpvar_66.xyz = worldRefl_54;
    tmpvar_66.w = ((tmpvar_29 * (1.7 - 
      (0.7 * tmpvar_29)
    )) * 6.0);
    lowp vec4 tmpvar_67;
    tmpvar_67 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_54, tmpvar_66.w);
    mediump vec4 tmpvar_68;
    tmpvar_68 = tmpvar_67;
    mediump vec3 tmpvar_69;
    tmpvar_69 = ((hdr_65.x * (
      (hdr_65.w * (tmpvar_68.w - 1.0))
     + 1.0)) * tmpvar_68.xyz);
    highp vec3 tmpvar_70;
    tmpvar_70 = mix (tmpvar_69, tmpvar_53, unity_SpecCube0_BoxMin.www);
    specular_37 = tmpvar_70;
  } else {
    specular_37 = tmpvar_53;
  };
  tmpvar_34 = (specular_37 * occlusion_24);
  highp vec3 viewDir_71;
  viewDir_71 = -(tmpvar_12);
  mediump vec3 color_72;
  mediump float surfaceReduction_73;
  highp float specularTerm_74;
  mediump float diffuseTerm_75;
  mediump float nv_76;
  highp float tmpvar_77;
  highp float smoothness_78;
  smoothness_78 = tmpvar_6;
  tmpvar_77 = (1.0 - smoothness_78);
  highp vec3 tmpvar_79;
  highp vec3 inVec_80;
  inVec_80 = (_WorldSpaceLightPos0.xyz + viewDir_71);
  tmpvar_79 = (inVec_80 * inversesqrt(max (0.001, 
    dot (inVec_80, inVec_80)
  )));
  highp float tmpvar_81;
  tmpvar_81 = abs(dot (tmpvar_11, viewDir_71));
  nv_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (tmpvar_11, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_11, tmpvar_79), 0.0, 1.0);
  mediump float tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_79), 0.0, 1.0);
  tmpvar_84 = tmpvar_85;
  mediump float tmpvar_86;
  mediump float NdotL_87;
  NdotL_87 = tmpvar_82;
  mediump float perceptualRoughness_88;
  perceptualRoughness_88 = tmpvar_77;
  mediump float tmpvar_89;
  tmpvar_89 = (0.5 + ((2.0 * tmpvar_84) * (tmpvar_84 * perceptualRoughness_88)));
  mediump float x_90;
  x_90 = (1.0 - NdotL_87);
  mediump float x_91;
  x_91 = (1.0 - nv_76);
  tmpvar_86 = ((1.0 + (
    (tmpvar_89 - 1.0)
   * 
    ((x_90 * x_90) * ((x_90 * x_90) * x_90))
  )) * (1.0 + (
    (tmpvar_89 - 1.0)
   * 
    ((x_91 * x_91) * ((x_91 * x_91) * x_91))
  )));
  highp float tmpvar_92;
  tmpvar_92 = (tmpvar_86 * tmpvar_82);
  diffuseTerm_75 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = max ((tmpvar_77 * tmpvar_77), 0.002);
  highp float NdotV_94;
  NdotV_94 = nv_76;
  highp float tmpvar_95;
  tmpvar_95 = (tmpvar_93 * tmpvar_93);
  highp float tmpvar_96;
  tmpvar_96 = (((
    (tmpvar_83 * tmpvar_95)
   - tmpvar_83) * tmpvar_83) + 1.0);
  highp float tmpvar_97;
  tmpvar_97 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_82 * (
        (NdotV_94 * (1.0 - tmpvar_93))
       + tmpvar_93)) + (NdotV_94 * (
        (tmpvar_82 * (1.0 - tmpvar_93))
       + tmpvar_93))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_95)
     / 
      ((tmpvar_96 * tmpvar_96) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_82));
  specularTerm_74 = tmpvar_97;
  surfaceReduction_73 = (1.0 - ((0.28 * tmpvar_93) * tmpvar_77));
  bvec3 tmpvar_98;
  tmpvar_98 = bvec3(tmpvar_9);
  bool tmpvar_99;
  tmpvar_99 = any(tmpvar_98);
  highp float tmpvar_100;
  if (tmpvar_99) {
    tmpvar_100 = 1.0;
  } else {
    tmpvar_100 = 0.0;
  };
  specularTerm_74 = (tmpvar_97 * tmpvar_100);
  mediump vec3 tmpvar_101;
  mediump float x_102;
  x_102 = (1.0 - tmpvar_84);
  tmpvar_101 = (tmpvar_9 + ((1.0 - tmpvar_9) * (
    (x_102 * x_102)
   * 
    ((x_102 * x_102) * x_102)
  )));
  mediump float x_103;
  x_103 = (1.0 - nv_76);
  mediump vec3 tmpvar_104;
  tmpvar_104 = mix (tmpvar_9, vec3(clamp ((mg_5.y + 
    (1.0 - tmpvar_10)
  ), 0.0, 1.0)), vec3(((x_103 * x_103) * (
    (x_103 * x_103)
   * x_103))));
  highp vec3 tmpvar_105;
  tmpvar_105 = (((tmpvar_8 * 
    (tmpvar_33 * diffuseTerm_75)
  ) + (
    (specularTerm_74 * tmpvar_33)
   * tmpvar_101)) + ((surfaceReduction_73 * tmpvar_34) * tmpvar_104));
  color_72 = tmpvar_105;
  mediump vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = color_72;
  c_1.w = tmpvar_106.w;
  lowp vec4 tmpvar_107;
  tmpvar_107 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_72 + (tmpvar_107.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_108;
  xlat_varoutput_108.xyz = c_1.xyz;
  xlat_varoutput_108.w = 1.0;
  gl_FragData[0] = xlat_varoutput_108;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bvec3 u_xlatb9;
mediump vec3 u_xlat16_10;
bvec3 u_xlatb11;
mediump vec3 u_xlat16_12;
float u_xlat13;
float u_xlat14;
vec3 u_xlat19;
mediump vec3 u_xlat16_19;
float u_xlat26;
float u_xlat27;
float u_xlat39;
float u_xlat40;
lowp float u_xlat10_40;
mediump float u_xlat16_41;
mediump float u_xlat16_42;
mediump float u_xlat16_45;
mediump float u_xlat16_46;
mediump float u_xlat16_47;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = (-u_xlat40) + u_xlat4.x;
    u_xlat40 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat40;
    u_xlat40 = u_xlat40 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat40 = min(max(u_xlat40, 0.0), 1.0);
#else
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4.x = texture(_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat16_42 = u_xlat40 + u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_42 = min(max(u_xlat16_42, 0.0), 1.0);
#else
    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);
#endif
    u_xlat10_40 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;
    u_xlat16_6.x = u_xlat10_40 * _OcclusionStrength + u_xlat16_6.x;
    u_xlat40 = (-_Glossiness) + 1.0;
    u_xlat16_19.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;
    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat1.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb4){
        u_xlat16_42 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);
        u_xlat16_42 = inversesqrt(u_xlat16_42);
        u_xlat16_8.xyz = vec3(u_xlat16_42) * u_xlat16_19.xyz;
        u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat4.xyz = u_xlat4.xyz / u_xlat16_8.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_8.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyzx).xyz;
        u_xlat16_10.x = (u_xlatb9.x) ? u_xlat4.x : u_xlat5.x;
        u_xlat16_10.y = (u_xlatb9.y) ? u_xlat4.y : u_xlat5.y;
        u_xlat16_10.z = (u_xlatb9.z) ? u_xlat4.z : u_xlat5.z;
        u_xlat16_42 = min(u_xlat16_10.y, u_xlat16_10.x);
        u_xlat16_42 = min(u_xlat16_10.z, u_xlat16_42);
        u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat4.xyz = u_xlat16_8.xyz * vec3(u_xlat16_42) + u_xlat4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_4.xyz = u_xlat16_19.xyz;
    //ENDIF
    }
    u_xlat16_42 = (-u_xlat40) * 0.699999988 + 1.70000005;
    u_xlat16_42 = u_xlat40 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * 6.0;
    u_xlat10_4 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_42);
    u_xlat16_46 = u_xlat10_4.w + -1.0;
    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;
    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_46);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb5 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb5 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb5){
            u_xlat16_47 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);
            u_xlat16_47 = inversesqrt(u_xlat16_47);
            u_xlat16_10.xyz = u_xlat16_19.xyz * vec3(u_xlat16_47);
            u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat5.xyz = u_xlat5.xyz / u_xlat16_10.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_10.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_10.xyzx).xyz;
            u_xlat16_12.x = (u_xlatb11.x) ? u_xlat5.x : u_xlat9.x;
            u_xlat16_12.y = (u_xlatb11.y) ? u_xlat5.y : u_xlat9.y;
            u_xlat16_12.z = (u_xlatb11.z) ? u_xlat5.z : u_xlat9.z;
            u_xlat16_47 = min(u_xlat16_12.y, u_xlat16_12.x);
            u_xlat16_47 = min(u_xlat16_12.z, u_xlat16_47);
            u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat19.xyz = u_xlat16_10.xyz * vec3(u_xlat16_47) + u_xlat5.xyz;
            u_xlat16_19.xyz = u_xlat19.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat16_19.xyz, u_xlat16_42);
        u_xlat16_42 = u_xlat10_5.w + -1.0;
        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;
        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;
        u_xlat16_19.xyz = u_xlat10_5.xyz * vec3(u_xlat16_42);
        u_xlat16_5.xyz = vec3(u_xlat16_46) * u_xlat10_4.xyz + (-u_xlat16_19.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_19.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;
    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;
    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_42 = u_xlat13 + u_xlat13;
    u_xlat16_42 = u_xlat13 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;
    u_xlat16_45 = (-u_xlat1.x) + 1.0;
    u_xlat16_46 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_46;
    u_xlat16_45 = u_xlat16_42 * u_xlat16_45 + 1.0;
    u_xlat16_46 = -abs(u_xlat39) + 1.0;
    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_46 + 1.0;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_45;
    u_xlat26 = u_xlat1.x * u_xlat16_42;
    u_xlat14 = u_xlat40 * u_xlat40;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat27 = (-u_xlat14) + 1.0;
    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;
    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;
    u_xlat39 = abs(u_xlat39) * u_xlat27;
    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat27 = u_xlat14 * u_xlat14;
    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);
    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;
    u_xlat27 = u_xlat27 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat27 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat39;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat39 = u_xlat14 * u_xlat40;
    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;
    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_42!=0.0);
#else
    u_xlatb1 = u_xlat16_42!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_41 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_41 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_42 = (-u_xlat13) + 1.0;
    u_xlat16_45 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_45;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat39);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);
    u_xlat16_2.xyz = vec3(u_xlat16_46) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat10_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// Stats: 175 math, 5 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_9.zw;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = o_17;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  mediump float tmpvar_10;
  tmpvar_10 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_8 = (tmpvar_7 * tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_3 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - tmpvar_3), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_14 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  atten_2 = tmpvar_20;
  mediump float occ_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_21 = tmpvar_22;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump float occlusion_24;
  occlusion_24 = ((1.0 - _OcclusionStrength) + (occ_21 * _OcclusionStrength));
  highp vec4 tmpvar_25;
  highp vec4 tmpvar_26;
  tmpvar_25 = unity_SpecCube0_HDR;
  tmpvar_26 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_27;
  worldViewDir_27 = -(tmpvar_12);
  mediump vec3 Normal_28;
  Normal_28 = tmpvar_11;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  tmpvar_29 = tmpvar_30;
  mediump vec3 I_32;
  I_32 = -(worldViewDir_27);
  mediump vec3 tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_33 = (tmpvar_13 * atten_23);
  tmpvar_34 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_35;
  tmpvar_35 = (I_32 - (2.0 * (
    dot (Normal_28, I_32)
   * Normal_28)));
  mediump vec3 originalReflUVW_36;
  mediump vec3 specular_37;
  originalReflUVW_36 = tmpvar_35;
  mediump vec3 worldRefl_38;
  worldRefl_38 = tmpvar_35;
  highp vec3 worldPos_39;
  worldPos_39 = tmpvar_3;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_40;
    mediump vec3 rbmax_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = normalize(tmpvar_35);
    highp vec3 tmpvar_43;
    tmpvar_43 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_3) / tmpvar_42);
    rbmax_41 = tmpvar_43;
    highp vec3 tmpvar_44;
    tmpvar_44 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_3) / tmpvar_42);
    rbmin_40 = tmpvar_44;
    bvec3 tmpvar_45;
    tmpvar_45 = greaterThan (tmpvar_42, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_46;
    if (tmpvar_45.x) {
      tmpvar_46 = rbmax_41.x;
    } else {
      tmpvar_46 = rbmin_40.x;
    };
    mediump float tmpvar_47;
    if (tmpvar_45.y) {
      tmpvar_47 = rbmax_41.y;
    } else {
      tmpvar_47 = rbmin_40.y;
    };
    mediump float tmpvar_48;
    if (tmpvar_45.z) {
      tmpvar_48 = rbmax_41.z;
    } else {
      tmpvar_48 = rbmin_40.z;
    };
    worldPos_39 = (tmpvar_3 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_38 = (worldPos_39 + (tmpvar_42 * min (
      min (tmpvar_46, tmpvar_47)
    , tmpvar_48)));
  };
  tmpvar_35 = worldRefl_38;
  mediump vec4 hdr_49;
  hdr_49 = tmpvar_25;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = worldRefl_38;
  tmpvar_50.w = ((tmpvar_29 * (1.7 - 
    (0.7 * tmpvar_29)
  )) * 6.0);
  lowp vec4 tmpvar_51;
  tmpvar_51 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_38, tmpvar_50.w);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec3 tmpvar_53;
  tmpvar_53 = ((hdr_49.x * (
    (hdr_49.w * (tmpvar_52.w - 1.0))
   + 1.0)) * tmpvar_52.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_54;
    worldRefl_54 = originalReflUVW_36;
    highp vec3 worldPos_55;
    worldPos_55 = tmpvar_3;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_56;
      mediump vec3 rbmax_57;
      mediump vec3 tmpvar_58;
      tmpvar_58 = normalize(originalReflUVW_36);
      highp vec3 tmpvar_59;
      tmpvar_59 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_3) / tmpvar_58);
      rbmax_57 = tmpvar_59;
      highp vec3 tmpvar_60;
      tmpvar_60 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_3) / tmpvar_58);
      rbmin_56 = tmpvar_60;
      bvec3 tmpvar_61;
      tmpvar_61 = greaterThan (tmpvar_58, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_62;
      if (tmpvar_61.x) {
        tmpvar_62 = rbmax_57.x;
      } else {
        tmpvar_62 = rbmin_56.x;
      };
      mediump float tmpvar_63;
      if (tmpvar_61.y) {
        tmpvar_63 = rbmax_57.y;
      } else {
        tmpvar_63 = rbmin_56.y;
      };
      mediump float tmpvar_64;
      if (tmpvar_61.z) {
        tmpvar_64 = rbmax_57.z;
      } else {
        tmpvar_64 = rbmin_56.z;
      };
      worldPos_55 = (tmpvar_3 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_54 = (worldPos_55 + (tmpvar_58 * min (
        min (tmpvar_62, tmpvar_63)
      , tmpvar_64)));
    };
    tmpvar_35 = worldRefl_54;
    mediump vec4 hdr_65;
    hdr_65 = tmpvar_26;
    mediump vec4 tmpvar_66;
    tmpvar_66.xyz = worldRefl_54;
    tmpvar_66.w = ((tmpvar_29 * (1.7 - 
      (0.7 * tmpvar_29)
    )) * 6.0);
    lowp vec4 tmpvar_67;
    tmpvar_67 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_54, tmpvar_66.w);
    mediump vec4 tmpvar_68;
    tmpvar_68 = tmpvar_67;
    mediump vec3 tmpvar_69;
    tmpvar_69 = ((hdr_65.x * (
      (hdr_65.w * (tmpvar_68.w - 1.0))
     + 1.0)) * tmpvar_68.xyz);
    highp vec3 tmpvar_70;
    tmpvar_70 = mix (tmpvar_69, tmpvar_53, unity_SpecCube0_BoxMin.www);
    specular_37 = tmpvar_70;
  } else {
    specular_37 = tmpvar_53;
  };
  tmpvar_34 = (specular_37 * occlusion_24);
  highp vec3 viewDir_71;
  viewDir_71 = -(tmpvar_12);
  mediump vec3 color_72;
  mediump float surfaceReduction_73;
  highp float specularTerm_74;
  mediump float diffuseTerm_75;
  mediump float nv_76;
  highp float tmpvar_77;
  highp float smoothness_78;
  smoothness_78 = tmpvar_6;
  tmpvar_77 = (1.0 - smoothness_78);
  highp vec3 tmpvar_79;
  highp vec3 inVec_80;
  inVec_80 = (_WorldSpaceLightPos0.xyz + viewDir_71);
  tmpvar_79 = (inVec_80 * inversesqrt(max (0.001, 
    dot (inVec_80, inVec_80)
  )));
  highp float tmpvar_81;
  tmpvar_81 = abs(dot (tmpvar_11, viewDir_71));
  nv_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (tmpvar_11, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_11, tmpvar_79), 0.0, 1.0);
  mediump float tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_79), 0.0, 1.0);
  tmpvar_84 = tmpvar_85;
  mediump float tmpvar_86;
  mediump float NdotL_87;
  NdotL_87 = tmpvar_82;
  mediump float perceptualRoughness_88;
  perceptualRoughness_88 = tmpvar_77;
  mediump float tmpvar_89;
  tmpvar_89 = (0.5 + ((2.0 * tmpvar_84) * (tmpvar_84 * perceptualRoughness_88)));
  mediump float x_90;
  x_90 = (1.0 - NdotL_87);
  mediump float x_91;
  x_91 = (1.0 - nv_76);
  tmpvar_86 = ((1.0 + (
    (tmpvar_89 - 1.0)
   * 
    ((x_90 * x_90) * ((x_90 * x_90) * x_90))
  )) * (1.0 + (
    (tmpvar_89 - 1.0)
   * 
    ((x_91 * x_91) * ((x_91 * x_91) * x_91))
  )));
  highp float tmpvar_92;
  tmpvar_92 = (tmpvar_86 * tmpvar_82);
  diffuseTerm_75 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = max ((tmpvar_77 * tmpvar_77), 0.002);
  highp float NdotV_94;
  NdotV_94 = nv_76;
  highp float tmpvar_95;
  tmpvar_95 = (tmpvar_93 * tmpvar_93);
  highp float tmpvar_96;
  tmpvar_96 = (((
    (tmpvar_83 * tmpvar_95)
   - tmpvar_83) * tmpvar_83) + 1.0);
  highp float tmpvar_97;
  tmpvar_97 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_82 * (
        (NdotV_94 * (1.0 - tmpvar_93))
       + tmpvar_93)) + (NdotV_94 * (
        (tmpvar_82 * (1.0 - tmpvar_93))
       + tmpvar_93))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_95)
     / 
      ((tmpvar_96 * tmpvar_96) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_82));
  specularTerm_74 = tmpvar_97;
  surfaceReduction_73 = (1.0 - ((0.28 * tmpvar_93) * tmpvar_77));
  bvec3 tmpvar_98;
  tmpvar_98 = bvec3(tmpvar_9);
  bool tmpvar_99;
  tmpvar_99 = any(tmpvar_98);
  highp float tmpvar_100;
  if (tmpvar_99) {
    tmpvar_100 = 1.0;
  } else {
    tmpvar_100 = 0.0;
  };
  specularTerm_74 = (tmpvar_97 * tmpvar_100);
  mediump vec3 tmpvar_101;
  mediump float x_102;
  x_102 = (1.0 - tmpvar_84);
  tmpvar_101 = (tmpvar_9 + ((1.0 - tmpvar_9) * (
    (x_102 * x_102)
   * 
    ((x_102 * x_102) * x_102)
  )));
  mediump float x_103;
  x_103 = (1.0 - nv_76);
  mediump vec3 tmpvar_104;
  tmpvar_104 = mix (tmpvar_9, vec3(clamp ((mg_5.y + 
    (1.0 - tmpvar_10)
  ), 0.0, 1.0)), vec3(((x_103 * x_103) * (
    (x_103 * x_103)
   * x_103))));
  highp vec3 tmpvar_105;
  tmpvar_105 = (((tmpvar_8 * 
    (tmpvar_33 * diffuseTerm_75)
  ) + (
    (specularTerm_74 * tmpvar_33)
   * tmpvar_101)) + ((surfaceReduction_73 * tmpvar_34) * tmpvar_104));
  color_72 = tmpvar_105;
  mediump vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = color_72;
  c_1.w = tmpvar_106.w;
  c_1.xyz = color_72;
  mediump vec4 xlat_varoutput_107;
  xlat_varoutput_107.xyz = c_1.xyz;
  xlat_varoutput_107.w = 1.0;
  gl_FragData[0] = xlat_varoutput_107;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bvec3 u_xlatb9;
mediump vec3 u_xlat16_10;
bvec3 u_xlatb11;
mediump vec3 u_xlat16_12;
float u_xlat13;
float u_xlat14;
vec3 u_xlat19;
mediump vec3 u_xlat16_19;
float u_xlat26;
float u_xlat27;
float u_xlat39;
float u_xlat40;
lowp float u_xlat10_40;
mediump float u_xlat16_41;
mediump float u_xlat16_42;
mediump float u_xlat16_45;
mediump float u_xlat16_46;
mediump float u_xlat16_47;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = (-u_xlat40) + u_xlat4.x;
    u_xlat40 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat40;
    u_xlat40 = u_xlat40 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat40 = min(max(u_xlat40, 0.0), 1.0);
#else
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4.x = texture(_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat16_42 = u_xlat40 + u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_42 = min(max(u_xlat16_42, 0.0), 1.0);
#else
    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);
#endif
    u_xlat10_40 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;
    u_xlat16_6.x = u_xlat10_40 * _OcclusionStrength + u_xlat16_6.x;
    u_xlat40 = (-_Glossiness) + 1.0;
    u_xlat16_19.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;
    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat1.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb4){
        u_xlat16_42 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);
        u_xlat16_42 = inversesqrt(u_xlat16_42);
        u_xlat16_8.xyz = vec3(u_xlat16_42) * u_xlat16_19.xyz;
        u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat4.xyz = u_xlat4.xyz / u_xlat16_8.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_8.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyzx).xyz;
        u_xlat16_10.x = (u_xlatb9.x) ? u_xlat4.x : u_xlat5.x;
        u_xlat16_10.y = (u_xlatb9.y) ? u_xlat4.y : u_xlat5.y;
        u_xlat16_10.z = (u_xlatb9.z) ? u_xlat4.z : u_xlat5.z;
        u_xlat16_42 = min(u_xlat16_10.y, u_xlat16_10.x);
        u_xlat16_42 = min(u_xlat16_10.z, u_xlat16_42);
        u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat4.xyz = u_xlat16_8.xyz * vec3(u_xlat16_42) + u_xlat4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_4.xyz = u_xlat16_19.xyz;
    //ENDIF
    }
    u_xlat16_42 = (-u_xlat40) * 0.699999988 + 1.70000005;
    u_xlat16_42 = u_xlat40 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * 6.0;
    u_xlat10_4 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_42);
    u_xlat16_46 = u_xlat10_4.w + -1.0;
    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;
    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_46);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb5 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb5 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb5){
            u_xlat16_47 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);
            u_xlat16_47 = inversesqrt(u_xlat16_47);
            u_xlat16_10.xyz = u_xlat16_19.xyz * vec3(u_xlat16_47);
            u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat5.xyz = u_xlat5.xyz / u_xlat16_10.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_10.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_10.xyzx).xyz;
            u_xlat16_12.x = (u_xlatb11.x) ? u_xlat5.x : u_xlat9.x;
            u_xlat16_12.y = (u_xlatb11.y) ? u_xlat5.y : u_xlat9.y;
            u_xlat16_12.z = (u_xlatb11.z) ? u_xlat5.z : u_xlat9.z;
            u_xlat16_47 = min(u_xlat16_12.y, u_xlat16_12.x);
            u_xlat16_47 = min(u_xlat16_12.z, u_xlat16_47);
            u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat19.xyz = u_xlat16_10.xyz * vec3(u_xlat16_47) + u_xlat5.xyz;
            u_xlat16_19.xyz = u_xlat19.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat16_19.xyz, u_xlat16_42);
        u_xlat16_42 = u_xlat10_5.w + -1.0;
        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;
        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;
        u_xlat16_19.xyz = u_xlat10_5.xyz * vec3(u_xlat16_42);
        u_xlat16_5.xyz = vec3(u_xlat16_46) * u_xlat10_4.xyz + (-u_xlat16_19.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_19.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;
    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;
    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_42 = u_xlat13 + u_xlat13;
    u_xlat16_42 = u_xlat13 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;
    u_xlat16_45 = (-u_xlat1.x) + 1.0;
    u_xlat16_46 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_46;
    u_xlat16_45 = u_xlat16_42 * u_xlat16_45 + 1.0;
    u_xlat16_46 = -abs(u_xlat39) + 1.0;
    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_46 + 1.0;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_45;
    u_xlat26 = u_xlat1.x * u_xlat16_42;
    u_xlat14 = u_xlat40 * u_xlat40;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat27 = (-u_xlat14) + 1.0;
    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;
    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;
    u_xlat39 = abs(u_xlat39) * u_xlat27;
    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat27 = u_xlat14 * u_xlat14;
    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);
    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;
    u_xlat27 = u_xlat27 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat27 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat39;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat39 = u_xlat14 * u_xlat40;
    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;
    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_42!=0.0);
#else
    u_xlatb1 = u_xlat16_42!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_41 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_41 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_42 = (-u_xlat13) + 1.0;
    u_xlat16_45 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_45;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat39);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);
    u_xlat16_2.xyz = vec3(u_xlat16_46) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN LIGHTPROBE_SH _EMISSION 
-- Vertex shader for "gles":
// Stats: 189 math, 6 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_9.zw;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_17;
  mediump vec4 ambientOrLightmapUV_22;
  ambientOrLightmapUV_22.w = 0.0;
  mediump vec3 x1_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normalWorld_21.xyzz * normalWorld_21.yzzx);
  x1_23.x = dot (unity_SHBr, tmpvar_24);
  x1_23.y = dot (unity_SHBg, tmpvar_24);
  x1_23.z = dot (unity_SHBb, tmpvar_24);
  ambientOrLightmapUV_22.xyz = (x1_23 + (unity_SHC.xyz * (
    (normalWorld_21.x * normalWorld_21.x)
   - 
    (normalWorld_21.y * normalWorld_21.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_22;
  xlv_TEXCOORD6 = o_18;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  mediump float tmpvar_10;
  tmpvar_10 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_8 = (tmpvar_7 * tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_3 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - tmpvar_3), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_14 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  atten_2 = tmpvar_20;
  mediump float occ_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_21 = tmpvar_22;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump float occlusion_24;
  occlusion_24 = ((1.0 - _OcclusionStrength) + (occ_21 * _OcclusionStrength));
  highp vec4 tmpvar_25;
  highp vec4 tmpvar_26;
  tmpvar_25 = unity_SpecCube0_HDR;
  tmpvar_26 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_27;
  worldViewDir_27 = -(tmpvar_12);
  mediump vec3 Normal_28;
  Normal_28 = tmpvar_11;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  tmpvar_29 = tmpvar_30;
  mediump vec3 I_32;
  I_32 = -(worldViewDir_27);
  mediump vec3 normalWorld_33;
  normalWorld_33 = tmpvar_11;
  mediump vec3 tmpvar_34;
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = normalWorld_33;
  mediump vec3 x_38;
  x_38.x = dot (unity_SHAr, tmpvar_37);
  x_38.y = dot (unity_SHAg, tmpvar_37);
  x_38.z = dot (unity_SHAb, tmpvar_37);
  tmpvar_34 = (tmpvar_13 * atten_23);
  tmpvar_35 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_38)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_24);
  tmpvar_36 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (I_32 - (2.0 * (
    dot (Normal_28, I_32)
   * Normal_28)));
  mediump vec3 originalReflUVW_40;
  mediump vec3 specular_41;
  originalReflUVW_40 = tmpvar_39;
  mediump vec3 worldRefl_42;
  worldRefl_42 = tmpvar_39;
  highp vec3 worldPos_43;
  worldPos_43 = tmpvar_3;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_44;
    mediump vec3 rbmax_45;
    mediump vec3 tmpvar_46;
    tmpvar_46 = normalize(tmpvar_39);
    highp vec3 tmpvar_47;
    tmpvar_47 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_3) / tmpvar_46);
    rbmax_45 = tmpvar_47;
    highp vec3 tmpvar_48;
    tmpvar_48 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_3) / tmpvar_46);
    rbmin_44 = tmpvar_48;
    bvec3 tmpvar_49;
    tmpvar_49 = greaterThan (tmpvar_46, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_50;
    if (tmpvar_49.x) {
      tmpvar_50 = rbmax_45.x;
    } else {
      tmpvar_50 = rbmin_44.x;
    };
    mediump float tmpvar_51;
    if (tmpvar_49.y) {
      tmpvar_51 = rbmax_45.y;
    } else {
      tmpvar_51 = rbmin_44.y;
    };
    mediump float tmpvar_52;
    if (tmpvar_49.z) {
      tmpvar_52 = rbmax_45.z;
    } else {
      tmpvar_52 = rbmin_44.z;
    };
    worldPos_43 = (tmpvar_3 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_42 = (worldPos_43 + (tmpvar_46 * min (
      min (tmpvar_50, tmpvar_51)
    , tmpvar_52)));
  };
  tmpvar_39 = worldRefl_42;
  mediump vec4 hdr_53;
  hdr_53 = tmpvar_25;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = worldRefl_42;
  tmpvar_54.w = ((tmpvar_29 * (1.7 - 
    (0.7 * tmpvar_29)
  )) * 6.0);
  lowp vec4 tmpvar_55;
  tmpvar_55 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_42, tmpvar_54.w);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec3 tmpvar_57;
  tmpvar_57 = ((hdr_53.x * (
    (hdr_53.w * (tmpvar_56.w - 1.0))
   + 1.0)) * tmpvar_56.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_58;
    worldRefl_58 = originalReflUVW_40;
    highp vec3 worldPos_59;
    worldPos_59 = tmpvar_3;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_60;
      mediump vec3 rbmax_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(originalReflUVW_40);
      highp vec3 tmpvar_63;
      tmpvar_63 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_3) / tmpvar_62);
      rbmax_61 = tmpvar_63;
      highp vec3 tmpvar_64;
      tmpvar_64 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_3) / tmpvar_62);
      rbmin_60 = tmpvar_64;
      bvec3 tmpvar_65;
      tmpvar_65 = greaterThan (tmpvar_62, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_66;
      if (tmpvar_65.x) {
        tmpvar_66 = rbmax_61.x;
      } else {
        tmpvar_66 = rbmin_60.x;
      };
      mediump float tmpvar_67;
      if (tmpvar_65.y) {
        tmpvar_67 = rbmax_61.y;
      } else {
        tmpvar_67 = rbmin_60.y;
      };
      mediump float tmpvar_68;
      if (tmpvar_65.z) {
        tmpvar_68 = rbmax_61.z;
      } else {
        tmpvar_68 = rbmin_60.z;
      };
      worldPos_59 = (tmpvar_3 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_58 = (worldPos_59 + (tmpvar_62 * min (
        min (tmpvar_66, tmpvar_67)
      , tmpvar_68)));
    };
    tmpvar_39 = worldRefl_58;
    mediump vec4 hdr_69;
    hdr_69 = tmpvar_26;
    mediump vec4 tmpvar_70;
    tmpvar_70.xyz = worldRefl_58;
    tmpvar_70.w = ((tmpvar_29 * (1.7 - 
      (0.7 * tmpvar_29)
    )) * 6.0);
    lowp vec4 tmpvar_71;
    tmpvar_71 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_58, tmpvar_70.w);
    mediump vec4 tmpvar_72;
    tmpvar_72 = tmpvar_71;
    mediump vec3 tmpvar_73;
    tmpvar_73 = ((hdr_69.x * (
      (hdr_69.w * (tmpvar_72.w - 1.0))
     + 1.0)) * tmpvar_72.xyz);
    highp vec3 tmpvar_74;
    tmpvar_74 = mix (tmpvar_73, tmpvar_57, unity_SpecCube0_BoxMin.www);
    specular_41 = tmpvar_74;
  } else {
    specular_41 = tmpvar_57;
  };
  tmpvar_36 = (specular_41 * occlusion_24);
  highp vec3 viewDir_75;
  viewDir_75 = -(tmpvar_12);
  mediump vec3 color_76;
  mediump float surfaceReduction_77;
  highp float specularTerm_78;
  mediump float diffuseTerm_79;
  mediump float nv_80;
  highp float tmpvar_81;
  highp float smoothness_82;
  smoothness_82 = tmpvar_6;
  tmpvar_81 = (1.0 - smoothness_82);
  highp vec3 tmpvar_83;
  highp vec3 inVec_84;
  inVec_84 = (_WorldSpaceLightPos0.xyz + viewDir_75);
  tmpvar_83 = (inVec_84 * inversesqrt(max (0.001, 
    dot (inVec_84, inVec_84)
  )));
  highp float tmpvar_85;
  tmpvar_85 = abs(dot (tmpvar_11, viewDir_75));
  nv_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (tmpvar_11, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_87;
  tmpvar_87 = clamp (dot (tmpvar_11, tmpvar_83), 0.0, 1.0);
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_83), 0.0, 1.0);
  tmpvar_88 = tmpvar_89;
  mediump float tmpvar_90;
  mediump float NdotL_91;
  NdotL_91 = tmpvar_86;
  mediump float perceptualRoughness_92;
  perceptualRoughness_92 = tmpvar_81;
  mediump float tmpvar_93;
  tmpvar_93 = (0.5 + ((2.0 * tmpvar_88) * (tmpvar_88 * perceptualRoughness_92)));
  mediump float x_94;
  x_94 = (1.0 - NdotL_91);
  mediump float x_95;
  x_95 = (1.0 - nv_80);
  tmpvar_90 = ((1.0 + (
    (tmpvar_93 - 1.0)
   * 
    ((x_94 * x_94) * ((x_94 * x_94) * x_94))
  )) * (1.0 + (
    (tmpvar_93 - 1.0)
   * 
    ((x_95 * x_95) * ((x_95 * x_95) * x_95))
  )));
  highp float tmpvar_96;
  tmpvar_96 = (tmpvar_90 * tmpvar_86);
  diffuseTerm_79 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = max ((tmpvar_81 * tmpvar_81), 0.002);
  highp float NdotV_98;
  NdotV_98 = nv_80;
  highp float tmpvar_99;
  tmpvar_99 = (tmpvar_97 * tmpvar_97);
  highp float tmpvar_100;
  tmpvar_100 = (((
    (tmpvar_87 * tmpvar_99)
   - tmpvar_87) * tmpvar_87) + 1.0);
  highp float tmpvar_101;
  tmpvar_101 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_86 * (
        (NdotV_98 * (1.0 - tmpvar_97))
       + tmpvar_97)) + (NdotV_98 * (
        (tmpvar_86 * (1.0 - tmpvar_97))
       + tmpvar_97))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_99)
     / 
      ((tmpvar_100 * tmpvar_100) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_86));
  specularTerm_78 = tmpvar_101;
  surfaceReduction_77 = (1.0 - ((0.28 * tmpvar_97) * tmpvar_81));
  bvec3 tmpvar_102;
  tmpvar_102 = bvec3(tmpvar_9);
  bool tmpvar_103;
  tmpvar_103 = any(tmpvar_102);
  highp float tmpvar_104;
  if (tmpvar_103) {
    tmpvar_104 = 1.0;
  } else {
    tmpvar_104 = 0.0;
  };
  specularTerm_78 = (tmpvar_101 * tmpvar_104);
  mediump vec3 tmpvar_105;
  mediump float x_106;
  x_106 = (1.0 - tmpvar_88);
  tmpvar_105 = (tmpvar_9 + ((1.0 - tmpvar_9) * (
    (x_106 * x_106)
   * 
    ((x_106 * x_106) * x_106)
  )));
  mediump float x_107;
  x_107 = (1.0 - nv_80);
  mediump vec3 tmpvar_108;
  tmpvar_108 = mix (tmpvar_9, vec3(clamp ((mg_5.y + 
    (1.0 - tmpvar_10)
  ), 0.0, 1.0)), vec3(((x_107 * x_107) * (
    (x_107 * x_107)
   * x_107))));
  highp vec3 tmpvar_109;
  tmpvar_109 = (((tmpvar_8 * 
    (tmpvar_35 + (tmpvar_34 * diffuseTerm_79))
  ) + (
    (specularTerm_78 * tmpvar_34)
   * tmpvar_105)) + ((surfaceReduction_77 * tmpvar_36) * tmpvar_108));
  color_76 = tmpvar_109;
  mediump vec4 tmpvar_110;
  tmpvar_110.w = 1.0;
  tmpvar_110.xyz = color_76;
  c_1.w = tmpvar_110.w;
  lowp vec4 tmpvar_111;
  tmpvar_111 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_76 + (tmpvar_111.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_112;
  xlat_varoutput_112.xyz = c_1.xyz;
  xlat_varoutput_112.w = 1.0;
  gl_FragData[0] = xlat_varoutput_112;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bool u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
float u_xlat16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat16_2 = u_xlat1.y * u_xlat1.y;
    u_xlat16_2 = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp float u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
lowp vec4 u_xlat10_9;
vec3 u_xlat10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_11;
bvec3 u_xlatb12;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec3 u_xlat15;
vec3 u_xlat18;
mediump vec3 u_xlat16_18;
lowp float u_xlat10_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
mediump vec3 u_xlat16_22;
float u_xlat28;
float u_xlat29;
float u_xlat42;
bool u_xlatb42;
float u_xlat43;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
mediump float u_xlat16_49;
mediump float u_xlat16_50;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat18.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat18.x = dot(u_xlat18.xyz, u_xlat18.xyz);
    u_xlat18.x = sqrt(u_xlat18.x);
    u_xlat18.x = (-u_xlat4.x) + u_xlat18.x;
    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat18.x + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_18 = texture(_ShadowMapTexture, u_xlat18.xy).x;
    u_xlat16_45 = u_xlat4.x + u_xlat10_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_45 = min(max(u_xlat16_45, 0.0), 1.0);
#else
    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);
#endif
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;
    u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;
    u_xlat4.x = (-_Glossiness) + 1.0;
    u_xlat16_20.x = dot(u_xlat15.xyz, u_xlat0.xyz);
    u_xlat16_20.x = u_xlat16_20.x + u_xlat16_20.x;
    u_xlat16_20.xyz = u_xlat0.xyz * (-u_xlat16_20.xxx) + u_xlat15.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_45) * _LightColor0.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_18.xyz = log2(u_xlat16_8.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb42){
        u_xlat16_45 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
        u_xlat16_45 = inversesqrt(u_xlat16_45);
        u_xlat16_8.xyz = vec3(u_xlat16_45) * u_xlat16_20.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_8.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat16_8.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyzx).xyz;
        u_xlat16_11.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat9.x;
        u_xlat16_11.y = (u_xlatb10.y) ? u_xlat5.y : u_xlat9.y;
        u_xlat16_11.z = (u_xlatb10.z) ? u_xlat5.z : u_xlat9.z;
        u_xlat16_45 = min(u_xlat16_11.y, u_xlat16_11.x);
        u_xlat16_45 = min(u_xlat16_11.z, u_xlat16_45);
        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat5.xyz = u_xlat16_8.xyz * vec3(u_xlat16_45) + u_xlat5.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat16_20.xyz;
    //ENDIF
    }
    u_xlat16_45 = (-u_xlat4.x) * 0.699999988 + 1.70000005;
    u_xlat16_45 = u_xlat16_45 * u_xlat4.x;
    u_xlat16_45 = u_xlat16_45 * 6.0;
    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_45);
    u_xlat16_49 = u_xlat10_5.w + -1.0;
    u_xlat16_49 = unity_SpecCube0_HDR.w * u_xlat16_49 + 1.0;
    u_xlat16_49 = u_xlat16_49 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(u_xlat16_49);
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb42){
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb42){
            u_xlat16_50 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
            u_xlat16_50 = inversesqrt(u_xlat16_50);
            u_xlat16_11.xyz = u_xlat16_20.xyz * vec3(u_xlat16_50);
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_11.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat16_11.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_11.xyzx).xyz;
            u_xlat16_13.x = (u_xlatb12.x) ? u_xlat9.x : u_xlat10.x;
            u_xlat16_13.y = (u_xlatb12.y) ? u_xlat9.y : u_xlat10.y;
            u_xlat16_13.z = (u_xlatb12.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat16_50 = min(u_xlat16_13.y, u_xlat16_13.x);
            u_xlat16_50 = min(u_xlat16_13.z, u_xlat16_50);
            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat20.xyz = u_xlat16_11.xyz * vec3(u_xlat16_50) + u_xlat9.xyz;
            u_xlat16_20.xyz = u_xlat20.xyz;
        //ENDIF
        }
        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat16_20.xyz, u_xlat16_45);
        u_xlat16_45 = u_xlat10_9.w + -1.0;
        u_xlat16_45 = unity_SpecCube1_HDR.w * u_xlat16_45 + 1.0;
        u_xlat16_45 = u_xlat16_45 * unity_SpecCube1_HDR.x;
        u_xlat16_20.xyz = u_xlat10_9.xyz * vec3(u_xlat16_45);
        u_xlat16_9.xyz = vec3(u_xlat16_49) * u_xlat10_5.xyz + (-u_xlat16_20.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_9.xyz + u_xlat16_20.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_20.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat9.xyz = vec3(u_xlat42) * u_xlat9.xyz;
    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_45 = u_xlat14 + u_xlat14;
    u_xlat16_45 = u_xlat14 * u_xlat16_45;
    u_xlat16_45 = u_xlat16_45 * u_xlat4.x + -0.5;
    u_xlat16_49 = (-u_xlat1.x) + 1.0;
    u_xlat16_8.x = u_xlat16_49 * u_xlat16_49;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_8.x;
    u_xlat16_49 = u_xlat16_45 * u_xlat16_49 + 1.0;
    u_xlat16_8.x = -abs(u_xlat42) + 1.0;
    u_xlat16_22.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_22.x;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_8.x + 1.0;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_49;
    u_xlat28 = u_xlat1.x * u_xlat16_45;
    u_xlat15.x = u_xlat4.x * u_xlat4.x;
    u_xlat15.x = max(u_xlat15.x, 0.00200000009);
    u_xlat29 = (-u_xlat15.x) + 1.0;
    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;
    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;
    u_xlat42 = abs(u_xlat42) * u_xlat29;
    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat29 = u_xlat15.x * u_xlat15.x;
    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);
    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;
    u_xlat29 = u_xlat29 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat29 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat42;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat42 = u_xlat15.x * u_xlat4.x;
    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;
    u_xlat16_45 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_45!=0.0);
#else
    u_xlatb1 = u_xlat16_45!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_44 = (-u_xlat16_44) + 1.0;
    u_xlat16_44 = u_xlat16_44 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
    u_xlat16_22.xyz = vec3(u_xlat28) * u_xlat16_7.xyz;
    u_xlat16_22.xyz = u_xlat16_18.xyz * u_xlat16_6.xxx + u_xlat16_22.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_45 = (-u_xlat14) + 1.0;
    u_xlat16_6.x = u_xlat16_45 * u_xlat16_45;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_6.x;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_22.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_20.xyz * vec3(u_xlat42);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);
    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat10_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// Stats: 187 math, 5 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_9.zw;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_17;
  mediump vec4 ambientOrLightmapUV_22;
  ambientOrLightmapUV_22.w = 0.0;
  mediump vec3 x1_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normalWorld_21.xyzz * normalWorld_21.yzzx);
  x1_23.x = dot (unity_SHBr, tmpvar_24);
  x1_23.y = dot (unity_SHBg, tmpvar_24);
  x1_23.z = dot (unity_SHBb, tmpvar_24);
  ambientOrLightmapUV_22.xyz = (x1_23 + (unity_SHC.xyz * (
    (normalWorld_21.x * normalWorld_21.x)
   - 
    (normalWorld_21.y * normalWorld_21.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_22;
  xlv_TEXCOORD6 = o_18;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  mediump float tmpvar_10;
  tmpvar_10 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_8 = (tmpvar_7 * tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_3 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - tmpvar_3), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_14 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  atten_2 = tmpvar_20;
  mediump float occ_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_21 = tmpvar_22;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump float occlusion_24;
  occlusion_24 = ((1.0 - _OcclusionStrength) + (occ_21 * _OcclusionStrength));
  highp vec4 tmpvar_25;
  highp vec4 tmpvar_26;
  tmpvar_25 = unity_SpecCube0_HDR;
  tmpvar_26 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_27;
  worldViewDir_27 = -(tmpvar_12);
  mediump vec3 Normal_28;
  Normal_28 = tmpvar_11;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  tmpvar_29 = tmpvar_30;
  mediump vec3 I_32;
  I_32 = -(worldViewDir_27);
  mediump vec3 normalWorld_33;
  normalWorld_33 = tmpvar_11;
  mediump vec3 tmpvar_34;
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = normalWorld_33;
  mediump vec3 x_38;
  x_38.x = dot (unity_SHAr, tmpvar_37);
  x_38.y = dot (unity_SHAg, tmpvar_37);
  x_38.z = dot (unity_SHAb, tmpvar_37);
  tmpvar_34 = (tmpvar_13 * atten_23);
  tmpvar_35 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_38)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_24);
  tmpvar_36 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (I_32 - (2.0 * (
    dot (Normal_28, I_32)
   * Normal_28)));
  mediump vec3 originalReflUVW_40;
  mediump vec3 specular_41;
  originalReflUVW_40 = tmpvar_39;
  mediump vec3 worldRefl_42;
  worldRefl_42 = tmpvar_39;
  highp vec3 worldPos_43;
  worldPos_43 = tmpvar_3;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_44;
    mediump vec3 rbmax_45;
    mediump vec3 tmpvar_46;
    tmpvar_46 = normalize(tmpvar_39);
    highp vec3 tmpvar_47;
    tmpvar_47 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_3) / tmpvar_46);
    rbmax_45 = tmpvar_47;
    highp vec3 tmpvar_48;
    tmpvar_48 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_3) / tmpvar_46);
    rbmin_44 = tmpvar_48;
    bvec3 tmpvar_49;
    tmpvar_49 = greaterThan (tmpvar_46, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_50;
    if (tmpvar_49.x) {
      tmpvar_50 = rbmax_45.x;
    } else {
      tmpvar_50 = rbmin_44.x;
    };
    mediump float tmpvar_51;
    if (tmpvar_49.y) {
      tmpvar_51 = rbmax_45.y;
    } else {
      tmpvar_51 = rbmin_44.y;
    };
    mediump float tmpvar_52;
    if (tmpvar_49.z) {
      tmpvar_52 = rbmax_45.z;
    } else {
      tmpvar_52 = rbmin_44.z;
    };
    worldPos_43 = (tmpvar_3 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_42 = (worldPos_43 + (tmpvar_46 * min (
      min (tmpvar_50, tmpvar_51)
    , tmpvar_52)));
  };
  tmpvar_39 = worldRefl_42;
  mediump vec4 hdr_53;
  hdr_53 = tmpvar_25;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = worldRefl_42;
  tmpvar_54.w = ((tmpvar_29 * (1.7 - 
    (0.7 * tmpvar_29)
  )) * 6.0);
  lowp vec4 tmpvar_55;
  tmpvar_55 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_42, tmpvar_54.w);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec3 tmpvar_57;
  tmpvar_57 = ((hdr_53.x * (
    (hdr_53.w * (tmpvar_56.w - 1.0))
   + 1.0)) * tmpvar_56.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_58;
    worldRefl_58 = originalReflUVW_40;
    highp vec3 worldPos_59;
    worldPos_59 = tmpvar_3;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_60;
      mediump vec3 rbmax_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(originalReflUVW_40);
      highp vec3 tmpvar_63;
      tmpvar_63 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_3) / tmpvar_62);
      rbmax_61 = tmpvar_63;
      highp vec3 tmpvar_64;
      tmpvar_64 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_3) / tmpvar_62);
      rbmin_60 = tmpvar_64;
      bvec3 tmpvar_65;
      tmpvar_65 = greaterThan (tmpvar_62, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_66;
      if (tmpvar_65.x) {
        tmpvar_66 = rbmax_61.x;
      } else {
        tmpvar_66 = rbmin_60.x;
      };
      mediump float tmpvar_67;
      if (tmpvar_65.y) {
        tmpvar_67 = rbmax_61.y;
      } else {
        tmpvar_67 = rbmin_60.y;
      };
      mediump float tmpvar_68;
      if (tmpvar_65.z) {
        tmpvar_68 = rbmax_61.z;
      } else {
        tmpvar_68 = rbmin_60.z;
      };
      worldPos_59 = (tmpvar_3 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_58 = (worldPos_59 + (tmpvar_62 * min (
        min (tmpvar_66, tmpvar_67)
      , tmpvar_68)));
    };
    tmpvar_39 = worldRefl_58;
    mediump vec4 hdr_69;
    hdr_69 = tmpvar_26;
    mediump vec4 tmpvar_70;
    tmpvar_70.xyz = worldRefl_58;
    tmpvar_70.w = ((tmpvar_29 * (1.7 - 
      (0.7 * tmpvar_29)
    )) * 6.0);
    lowp vec4 tmpvar_71;
    tmpvar_71 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_58, tmpvar_70.w);
    mediump vec4 tmpvar_72;
    tmpvar_72 = tmpvar_71;
    mediump vec3 tmpvar_73;
    tmpvar_73 = ((hdr_69.x * (
      (hdr_69.w * (tmpvar_72.w - 1.0))
     + 1.0)) * tmpvar_72.xyz);
    highp vec3 tmpvar_74;
    tmpvar_74 = mix (tmpvar_73, tmpvar_57, unity_SpecCube0_BoxMin.www);
    specular_41 = tmpvar_74;
  } else {
    specular_41 = tmpvar_57;
  };
  tmpvar_36 = (specular_41 * occlusion_24);
  highp vec3 viewDir_75;
  viewDir_75 = -(tmpvar_12);
  mediump vec3 color_76;
  mediump float surfaceReduction_77;
  highp float specularTerm_78;
  mediump float diffuseTerm_79;
  mediump float nv_80;
  highp float tmpvar_81;
  highp float smoothness_82;
  smoothness_82 = tmpvar_6;
  tmpvar_81 = (1.0 - smoothness_82);
  highp vec3 tmpvar_83;
  highp vec3 inVec_84;
  inVec_84 = (_WorldSpaceLightPos0.xyz + viewDir_75);
  tmpvar_83 = (inVec_84 * inversesqrt(max (0.001, 
    dot (inVec_84, inVec_84)
  )));
  highp float tmpvar_85;
  tmpvar_85 = abs(dot (tmpvar_11, viewDir_75));
  nv_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (tmpvar_11, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_87;
  tmpvar_87 = clamp (dot (tmpvar_11, tmpvar_83), 0.0, 1.0);
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_83), 0.0, 1.0);
  tmpvar_88 = tmpvar_89;
  mediump float tmpvar_90;
  mediump float NdotL_91;
  NdotL_91 = tmpvar_86;
  mediump float perceptualRoughness_92;
  perceptualRoughness_92 = tmpvar_81;
  mediump float tmpvar_93;
  tmpvar_93 = (0.5 + ((2.0 * tmpvar_88) * (tmpvar_88 * perceptualRoughness_92)));
  mediump float x_94;
  x_94 = (1.0 - NdotL_91);
  mediump float x_95;
  x_95 = (1.0 - nv_80);
  tmpvar_90 = ((1.0 + (
    (tmpvar_93 - 1.0)
   * 
    ((x_94 * x_94) * ((x_94 * x_94) * x_94))
  )) * (1.0 + (
    (tmpvar_93 - 1.0)
   * 
    ((x_95 * x_95) * ((x_95 * x_95) * x_95))
  )));
  highp float tmpvar_96;
  tmpvar_96 = (tmpvar_90 * tmpvar_86);
  diffuseTerm_79 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = max ((tmpvar_81 * tmpvar_81), 0.002);
  highp float NdotV_98;
  NdotV_98 = nv_80;
  highp float tmpvar_99;
  tmpvar_99 = (tmpvar_97 * tmpvar_97);
  highp float tmpvar_100;
  tmpvar_100 = (((
    (tmpvar_87 * tmpvar_99)
   - tmpvar_87) * tmpvar_87) + 1.0);
  highp float tmpvar_101;
  tmpvar_101 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_86 * (
        (NdotV_98 * (1.0 - tmpvar_97))
       + tmpvar_97)) + (NdotV_98 * (
        (tmpvar_86 * (1.0 - tmpvar_97))
       + tmpvar_97))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_99)
     / 
      ((tmpvar_100 * tmpvar_100) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_86));
  specularTerm_78 = tmpvar_101;
  surfaceReduction_77 = (1.0 - ((0.28 * tmpvar_97) * tmpvar_81));
  bvec3 tmpvar_102;
  tmpvar_102 = bvec3(tmpvar_9);
  bool tmpvar_103;
  tmpvar_103 = any(tmpvar_102);
  highp float tmpvar_104;
  if (tmpvar_103) {
    tmpvar_104 = 1.0;
  } else {
    tmpvar_104 = 0.0;
  };
  specularTerm_78 = (tmpvar_101 * tmpvar_104);
  mediump vec3 tmpvar_105;
  mediump float x_106;
  x_106 = (1.0 - tmpvar_88);
  tmpvar_105 = (tmpvar_9 + ((1.0 - tmpvar_9) * (
    (x_106 * x_106)
   * 
    ((x_106 * x_106) * x_106)
  )));
  mediump float x_107;
  x_107 = (1.0 - nv_80);
  mediump vec3 tmpvar_108;
  tmpvar_108 = mix (tmpvar_9, vec3(clamp ((mg_5.y + 
    (1.0 - tmpvar_10)
  ), 0.0, 1.0)), vec3(((x_107 * x_107) * (
    (x_107 * x_107)
   * x_107))));
  highp vec3 tmpvar_109;
  tmpvar_109 = (((tmpvar_8 * 
    (tmpvar_35 + (tmpvar_34 * diffuseTerm_79))
  ) + (
    (specularTerm_78 * tmpvar_34)
   * tmpvar_105)) + ((surfaceReduction_77 * tmpvar_36) * tmpvar_108));
  color_76 = tmpvar_109;
  mediump vec4 tmpvar_110;
  tmpvar_110.w = 1.0;
  tmpvar_110.xyz = color_76;
  c_1.w = tmpvar_110.w;
  c_1.xyz = color_76;
  mediump vec4 xlat_varoutput_111;
  xlat_varoutput_111.xyz = c_1.xyz;
  xlat_varoutput_111.w = 1.0;
  gl_FragData[0] = xlat_varoutput_111;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bool u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
float u_xlat16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat16_2 = u_xlat1.y * u_xlat1.y;
    u_xlat16_2 = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp float u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
lowp vec4 u_xlat10_9;
vec3 u_xlat10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_11;
bvec3 u_xlatb12;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec3 u_xlat15;
vec3 u_xlat18;
mediump vec3 u_xlat16_18;
lowp float u_xlat10_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
mediump vec3 u_xlat16_22;
float u_xlat28;
float u_xlat29;
float u_xlat42;
bool u_xlatb42;
float u_xlat43;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
mediump float u_xlat16_49;
mediump float u_xlat16_50;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat18.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat18.x = dot(u_xlat18.xyz, u_xlat18.xyz);
    u_xlat18.x = sqrt(u_xlat18.x);
    u_xlat18.x = (-u_xlat4.x) + u_xlat18.x;
    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat18.x + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_18 = texture(_ShadowMapTexture, u_xlat18.xy).x;
    u_xlat16_45 = u_xlat4.x + u_xlat10_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_45 = min(max(u_xlat16_45, 0.0), 1.0);
#else
    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);
#endif
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;
    u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;
    u_xlat4.x = (-_Glossiness) + 1.0;
    u_xlat16_20.x = dot(u_xlat15.xyz, u_xlat0.xyz);
    u_xlat16_20.x = u_xlat16_20.x + u_xlat16_20.x;
    u_xlat16_20.xyz = u_xlat0.xyz * (-u_xlat16_20.xxx) + u_xlat15.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_45) * _LightColor0.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_18.xyz = log2(u_xlat16_8.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb42){
        u_xlat16_45 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
        u_xlat16_45 = inversesqrt(u_xlat16_45);
        u_xlat16_8.xyz = vec3(u_xlat16_45) * u_xlat16_20.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_8.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat16_8.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyzx).xyz;
        u_xlat16_11.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat9.x;
        u_xlat16_11.y = (u_xlatb10.y) ? u_xlat5.y : u_xlat9.y;
        u_xlat16_11.z = (u_xlatb10.z) ? u_xlat5.z : u_xlat9.z;
        u_xlat16_45 = min(u_xlat16_11.y, u_xlat16_11.x);
        u_xlat16_45 = min(u_xlat16_11.z, u_xlat16_45);
        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat5.xyz = u_xlat16_8.xyz * vec3(u_xlat16_45) + u_xlat5.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat16_20.xyz;
    //ENDIF
    }
    u_xlat16_45 = (-u_xlat4.x) * 0.699999988 + 1.70000005;
    u_xlat16_45 = u_xlat16_45 * u_xlat4.x;
    u_xlat16_45 = u_xlat16_45 * 6.0;
    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_45);
    u_xlat16_49 = u_xlat10_5.w + -1.0;
    u_xlat16_49 = unity_SpecCube0_HDR.w * u_xlat16_49 + 1.0;
    u_xlat16_49 = u_xlat16_49 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(u_xlat16_49);
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb42){
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb42){
            u_xlat16_50 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
            u_xlat16_50 = inversesqrt(u_xlat16_50);
            u_xlat16_11.xyz = u_xlat16_20.xyz * vec3(u_xlat16_50);
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_11.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat16_11.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_11.xyzx).xyz;
            u_xlat16_13.x = (u_xlatb12.x) ? u_xlat9.x : u_xlat10.x;
            u_xlat16_13.y = (u_xlatb12.y) ? u_xlat9.y : u_xlat10.y;
            u_xlat16_13.z = (u_xlatb12.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat16_50 = min(u_xlat16_13.y, u_xlat16_13.x);
            u_xlat16_50 = min(u_xlat16_13.z, u_xlat16_50);
            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat20.xyz = u_xlat16_11.xyz * vec3(u_xlat16_50) + u_xlat9.xyz;
            u_xlat16_20.xyz = u_xlat20.xyz;
        //ENDIF
        }
        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat16_20.xyz, u_xlat16_45);
        u_xlat16_45 = u_xlat10_9.w + -1.0;
        u_xlat16_45 = unity_SpecCube1_HDR.w * u_xlat16_45 + 1.0;
        u_xlat16_45 = u_xlat16_45 * unity_SpecCube1_HDR.x;
        u_xlat16_20.xyz = u_xlat10_9.xyz * vec3(u_xlat16_45);
        u_xlat16_9.xyz = vec3(u_xlat16_49) * u_xlat10_5.xyz + (-u_xlat16_20.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_9.xyz + u_xlat16_20.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_20.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat9.xyz = vec3(u_xlat42) * u_xlat9.xyz;
    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_45 = u_xlat14 + u_xlat14;
    u_xlat16_45 = u_xlat14 * u_xlat16_45;
    u_xlat16_45 = u_xlat16_45 * u_xlat4.x + -0.5;
    u_xlat16_49 = (-u_xlat1.x) + 1.0;
    u_xlat16_8.x = u_xlat16_49 * u_xlat16_49;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_8.x;
    u_xlat16_49 = u_xlat16_45 * u_xlat16_49 + 1.0;
    u_xlat16_8.x = -abs(u_xlat42) + 1.0;
    u_xlat16_22.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_22.x;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_8.x + 1.0;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_49;
    u_xlat28 = u_xlat1.x * u_xlat16_45;
    u_xlat15.x = u_xlat4.x * u_xlat4.x;
    u_xlat15.x = max(u_xlat15.x, 0.00200000009);
    u_xlat29 = (-u_xlat15.x) + 1.0;
    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;
    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;
    u_xlat42 = abs(u_xlat42) * u_xlat29;
    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat29 = u_xlat15.x * u_xlat15.x;
    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);
    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;
    u_xlat29 = u_xlat29 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat29 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat42;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat42 = u_xlat15.x * u_xlat4.x;
    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;
    u_xlat16_45 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_45!=0.0);
#else
    u_xlatb1 = u_xlat16_45!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_44 = (-u_xlat16_44) + 1.0;
    u_xlat16_44 = u_xlat16_44 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
    u_xlat16_22.xyz = vec3(u_xlat28) * u_xlat16_7.xyz;
    u_xlat16_22.xyz = u_xlat16_18.xyz * u_xlat16_6.xxx + u_xlat16_22.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_45 = (-u_xlat14) + 1.0;
    u_xlat16_6.x = u_xlat16_45 * u_xlat16_45;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_6.x;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_22.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_20.xyz * vec3(u_xlat42);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);
    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL _EMISSION 
-- Vertex shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL _EMISSION VERTEXLIGHT_ON 
-- Vertex shader for "gles":
// Stats: 52 math, 5 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  tmpvar_13 = tmpvar_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_25 + (tmpvar_39.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat16;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
void main()
{
    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat16_1 = u_xlat0.x * u_xlat16_1;
    u_xlat16_1 = u_xlat16_1 * 6.0;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;
    u_xlat16_9.xyz = u_xlat2.xyz * (-u_xlat16_9.xxx) + vs_TEXCOORD1.xyz;
    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_1);
    u_xlat16_3.x = u_xlat10_1.w + -1.0;
    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
    u_xlat10_0.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);
    u_xlat16 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat4.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.y = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.yw).w;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat16_27 = (-u_xlat16) + 1.0;
    u_xlat16_8 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_8 = u_xlat16_27 * u_xlat16_8;
    u_xlat16_8 = u_xlat16_27 * u_xlat16_8;
    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_29 = (-u_xlat16_27) + 1.0;
    u_xlat16_29 = u_xlat16_29 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_7.xyz = vec3(u_xlat16_29) + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_8) * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_2.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;
    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles":
// Stats: 50 math, 4 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  tmpvar_13 = tmpvar_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  c_1.xyz = color_25;
  mediump vec4 xlat_varoutput_39;
  xlat_varoutput_39.xyz = c_1.xyz;
  xlat_varoutput_39.w = 1.0;
  gl_FragData[0] = xlat_varoutput_39;
}


#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat16;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
void main()
{
    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat16_1 = u_xlat0.x * u_xlat16_1;
    u_xlat16_1 = u_xlat16_1 * 6.0;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;
    u_xlat16_9.xyz = u_xlat2.xyz * (-u_xlat16_9.xxx) + vs_TEXCOORD1.xyz;
    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_1);
    u_xlat16_3.x = u_xlat10_1.w + -1.0;
    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
    u_xlat10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_3.xyz = vec3(u_xlat10_0) * u_xlat16_3.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);
    u_xlat16 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat4.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.y = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.yw).w;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat16_27 = (-u_xlat16) + 1.0;
    u_xlat16_8 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_8 = u_xlat16_27 * u_xlat16_8;
    u_xlat16_8 = u_xlat16_27 * u_xlat16_8;
    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_29 = (-u_xlat16_27) + 1.0;
    u_xlat16_29 = u_xlat16_29 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_7.xyz = vec3(u_xlat16_29) + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_8) * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_2.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL LIGHTPROBE_SH _EMISSION VERTEXLIGHT_ON 
-- Vertex shader for "gles":
// Stats: 55 math, 5 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  tmpvar_13 = tmpvar_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_17;
  mediump vec4 ambientOrLightmapUV_19;
  ambientOrLightmapUV_19.w = 0.0;
  highp vec3 lightColor0_20;
  lightColor0_20 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_21;
  lightColor1_21 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_22;
  lightColor2_22 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_23;
  lightColor3_23 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_24;
  lightAttenSq_24 = unity_4LightAtten0;
  highp vec3 normal_25;
  normal_25 = normalWorld_18;
  highp vec3 col_26;
  highp vec4 ndotl_27;
  highp vec4 lengthSq_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosX0 - tmpvar_8.x);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosY0 - tmpvar_8.y);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_28 = (tmpvar_29 * tmpvar_29);
  lengthSq_28 = (lengthSq_28 + (tmpvar_30 * tmpvar_30));
  lengthSq_28 = (lengthSq_28 + (tmpvar_31 * tmpvar_31));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (lengthSq_28, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_28 = tmpvar_32;
  ndotl_27 = (tmpvar_29 * normal_25.x);
  ndotl_27 = (ndotl_27 + (tmpvar_30 * normal_25.y));
  ndotl_27 = (ndotl_27 + (tmpvar_31 * normal_25.z));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_27 * inversesqrt(tmpvar_32)));
  ndotl_27 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (tmpvar_33 * (1.0/((1.0 + 
    (tmpvar_32 * lightAttenSq_24)
  ))));
  col_26 = (lightColor0_20 * tmpvar_34.x);
  col_26 = (col_26 + (lightColor1_21 * tmpvar_34.y));
  col_26 = (col_26 + (lightColor2_22 * tmpvar_34.z));
  col_26 = (col_26 + (lightColor3_23 * tmpvar_34.w));
  ambientOrLightmapUV_19.xyz = col_26;
  mediump vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = normalWorld_18;
  mediump vec3 res_36;
  mediump vec3 x_37;
  x_37.x = dot (unity_SHAr, tmpvar_35);
  x_37.y = dot (unity_SHAg, tmpvar_35);
  x_37.z = dot (unity_SHAb, tmpvar_35);
  mediump vec3 x1_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = (normalWorld_18.xyzz * normalWorld_18.yzzx);
  x1_38.x = dot (unity_SHBr, tmpvar_39);
  x1_38.y = dot (unity_SHBg, tmpvar_39);
  x1_38.z = dot (unity_SHBb, tmpvar_39);
  res_36 = (x_37 + (x1_38 + (unity_SHC.xyz * 
    ((normalWorld_18.x * normalWorld_18.x) - (normalWorld_18.y * normalWorld_18.y))
  )));
  mediump vec3 tmpvar_40;
  tmpvar_40 = max (((1.055 * 
    pow (max (res_36, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_36 = tmpvar_40;
  ambientOrLightmapUV_19.xyz = (ambientOrLightmapUV_19.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_40));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_19;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_26 + (tmpvar_40.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = c_1.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    vs_TEXCOORD1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD4.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat2 * u_xlat0;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat16_5.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_10;
mediump vec3 u_xlat16_11;
float u_xlat20;
mediump float u_xlat16_33;
mediump float u_xlat16_34;
void main()
{
    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat16_1 = u_xlat0.x * u_xlat16_1;
    u_xlat16_1 = u_xlat16_1 * 6.0;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_11.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;
    u_xlat16_11.xyz = u_xlat2.xyz * (-u_xlat16_11.xxx) + vs_TEXCOORD1.xyz;
    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_1);
    u_xlat16_3.x = u_xlat10_1.w + -1.0;
    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
    u_xlat10_0.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * vs_TEXCOORD5.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);
    u_xlat20 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.y = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.yw).w;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat16_33 = (-u_xlat20) + 1.0;
    u_xlat16_10 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_10 = u_xlat16_33 * u_xlat16_10;
    u_xlat16_10 = u_xlat16_33 * u_xlat16_10;
    u_xlat16_33 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_34 = (-u_xlat16_33) + 1.0;
    u_xlat16_34 = u_xlat16_34 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_33) * u_xlat16_2.xyz;
    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = vec3(u_xlat16_34) + (-u_xlat16_7.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles":
// Stats: 53 math, 4 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  tmpvar_13 = tmpvar_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_17;
  mediump vec4 ambientOrLightmapUV_19;
  ambientOrLightmapUV_19.w = 0.0;
  highp vec3 lightColor0_20;
  lightColor0_20 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_21;
  lightColor1_21 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_22;
  lightColor2_22 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_23;
  lightColor3_23 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_24;
  lightAttenSq_24 = unity_4LightAtten0;
  highp vec3 normal_25;
  normal_25 = normalWorld_18;
  highp vec3 col_26;
  highp vec4 ndotl_27;
  highp vec4 lengthSq_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosX0 - tmpvar_8.x);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosY0 - tmpvar_8.y);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_28 = (tmpvar_29 * tmpvar_29);
  lengthSq_28 = (lengthSq_28 + (tmpvar_30 * tmpvar_30));
  lengthSq_28 = (lengthSq_28 + (tmpvar_31 * tmpvar_31));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (lengthSq_28, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_28 = tmpvar_32;
  ndotl_27 = (tmpvar_29 * normal_25.x);
  ndotl_27 = (ndotl_27 + (tmpvar_30 * normal_25.y));
  ndotl_27 = (ndotl_27 + (tmpvar_31 * normal_25.z));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_27 * inversesqrt(tmpvar_32)));
  ndotl_27 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (tmpvar_33 * (1.0/((1.0 + 
    (tmpvar_32 * lightAttenSq_24)
  ))));
  col_26 = (lightColor0_20 * tmpvar_34.x);
  col_26 = (col_26 + (lightColor1_21 * tmpvar_34.y));
  col_26 = (col_26 + (lightColor2_22 * tmpvar_34.z));
  col_26 = (col_26 + (lightColor3_23 * tmpvar_34.w));
  ambientOrLightmapUV_19.xyz = col_26;
  mediump vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = normalWorld_18;
  mediump vec3 res_36;
  mediump vec3 x_37;
  x_37.x = dot (unity_SHAr, tmpvar_35);
  x_37.y = dot (unity_SHAg, tmpvar_35);
  x_37.z = dot (unity_SHAb, tmpvar_35);
  mediump vec3 x1_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = (normalWorld_18.xyzz * normalWorld_18.yzzx);
  x1_38.x = dot (unity_SHBr, tmpvar_39);
  x1_38.y = dot (unity_SHBg, tmpvar_39);
  x1_38.z = dot (unity_SHBb, tmpvar_39);
  res_36 = (x_37 + (x1_38 + (unity_SHC.xyz * 
    ((normalWorld_18.x * normalWorld_18.x) - (normalWorld_18.y * normalWorld_18.y))
  )));
  mediump vec3 tmpvar_40;
  tmpvar_40 = max (((1.055 * 
    pow (max (res_36, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_36 = tmpvar_40;
  ambientOrLightmapUV_19.xyz = (ambientOrLightmapUV_19.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_40));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_19;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  c_1.xyz = color_26;
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    vs_TEXCOORD1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD4.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat2 * u_xlat0;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat16_5.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_10;
mediump vec3 u_xlat16_11;
float u_xlat20;
mediump float u_xlat16_33;
mediump float u_xlat16_34;
void main()
{
    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat16_1 = u_xlat0.x * u_xlat16_1;
    u_xlat16_1 = u_xlat16_1 * 6.0;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_11.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;
    u_xlat16_11.xyz = u_xlat2.xyz * (-u_xlat16_11.xxx) + vs_TEXCOORD1.xyz;
    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_1);
    u_xlat16_3.x = u_xlat10_1.w + -1.0;
    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
    u_xlat10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_3.xyz = vec3(u_xlat10_0) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = vec3(u_xlat10_0) * vs_TEXCOORD5.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);
    u_xlat20 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.y = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.yw).w;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat16_33 = (-u_xlat20) + 1.0;
    u_xlat16_10 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_10 = u_xlat16_33 * u_xlat16_10;
    u_xlat16_10 = u_xlat16_33 * u_xlat16_10;
    u_xlat16_33 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_34 = (-u_xlat16_33) + 1.0;
    u_xlat16_34 = u_xlat16_34 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_33) * u_xlat16_2.xyz;
    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = vec3(u_xlat16_34) + (-u_xlat16_7.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN _EMISSION VERTEXLIGHT_ON 
-- Vertex shader for "gles":
// Stats: 177 math, 6 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_9.zw;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = o_17;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  mediump float tmpvar_10;
  tmpvar_10 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_8 = (tmpvar_7 * tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_3 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - tmpvar_3), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_14 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  atten_2 = tmpvar_20;
  mediump float occ_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_21 = tmpvar_22;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump float occlusion_24;
  occlusion_24 = ((1.0 - _OcclusionStrength) + (occ_21 * _OcclusionStrength));
  highp vec4 tmpvar_25;
  highp vec4 tmpvar_26;
  tmpvar_25 = unity_SpecCube0_HDR;
  tmpvar_26 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_27;
  worldViewDir_27 = -(tmpvar_12);
  mediump vec3 Normal_28;
  Normal_28 = tmpvar_11;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  tmpvar_29 = tmpvar_30;
  mediump vec3 I_32;
  I_32 = -(worldViewDir_27);
  mediump vec3 tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_33 = (tmpvar_13 * atten_23);
  tmpvar_34 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_35;
  tmpvar_35 = (I_32 - (2.0 * (
    dot (Normal_28, I_32)
   * Normal_28)));
  mediump vec3 originalReflUVW_36;
  mediump vec3 specular_37;
  originalReflUVW_36 = tmpvar_35;
  mediump vec3 worldRefl_38;
  worldRefl_38 = tmpvar_35;
  highp vec3 worldPos_39;
  worldPos_39 = tmpvar_3;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_40;
    mediump vec3 rbmax_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = normalize(tmpvar_35);
    highp vec3 tmpvar_43;
    tmpvar_43 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_3) / tmpvar_42);
    rbmax_41 = tmpvar_43;
    highp vec3 tmpvar_44;
    tmpvar_44 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_3) / tmpvar_42);
    rbmin_40 = tmpvar_44;
    bvec3 tmpvar_45;
    tmpvar_45 = greaterThan (tmpvar_42, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_46;
    if (tmpvar_45.x) {
      tmpvar_46 = rbmax_41.x;
    } else {
      tmpvar_46 = rbmin_40.x;
    };
    mediump float tmpvar_47;
    if (tmpvar_45.y) {
      tmpvar_47 = rbmax_41.y;
    } else {
      tmpvar_47 = rbmin_40.y;
    };
    mediump float tmpvar_48;
    if (tmpvar_45.z) {
      tmpvar_48 = rbmax_41.z;
    } else {
      tmpvar_48 = rbmin_40.z;
    };
    worldPos_39 = (tmpvar_3 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_38 = (worldPos_39 + (tmpvar_42 * min (
      min (tmpvar_46, tmpvar_47)
    , tmpvar_48)));
  };
  tmpvar_35 = worldRefl_38;
  mediump vec4 hdr_49;
  hdr_49 = tmpvar_25;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = worldRefl_38;
  tmpvar_50.w = ((tmpvar_29 * (1.7 - 
    (0.7 * tmpvar_29)
  )) * 6.0);
  lowp vec4 tmpvar_51;
  tmpvar_51 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_38, tmpvar_50.w);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec3 tmpvar_53;
  tmpvar_53 = ((hdr_49.x * (
    (hdr_49.w * (tmpvar_52.w - 1.0))
   + 1.0)) * tmpvar_52.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_54;
    worldRefl_54 = originalReflUVW_36;
    highp vec3 worldPos_55;
    worldPos_55 = tmpvar_3;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_56;
      mediump vec3 rbmax_57;
      mediump vec3 tmpvar_58;
      tmpvar_58 = normalize(originalReflUVW_36);
      highp vec3 tmpvar_59;
      tmpvar_59 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_3) / tmpvar_58);
      rbmax_57 = tmpvar_59;
      highp vec3 tmpvar_60;
      tmpvar_60 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_3) / tmpvar_58);
      rbmin_56 = tmpvar_60;
      bvec3 tmpvar_61;
      tmpvar_61 = greaterThan (tmpvar_58, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_62;
      if (tmpvar_61.x) {
        tmpvar_62 = rbmax_57.x;
      } else {
        tmpvar_62 = rbmin_56.x;
      };
      mediump float tmpvar_63;
      if (tmpvar_61.y) {
        tmpvar_63 = rbmax_57.y;
      } else {
        tmpvar_63 = rbmin_56.y;
      };
      mediump float tmpvar_64;
      if (tmpvar_61.z) {
        tmpvar_64 = rbmax_57.z;
      } else {
        tmpvar_64 = rbmin_56.z;
      };
      worldPos_55 = (tmpvar_3 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_54 = (worldPos_55 + (tmpvar_58 * min (
        min (tmpvar_62, tmpvar_63)
      , tmpvar_64)));
    };
    tmpvar_35 = worldRefl_54;
    mediump vec4 hdr_65;
    hdr_65 = tmpvar_26;
    mediump vec4 tmpvar_66;
    tmpvar_66.xyz = worldRefl_54;
    tmpvar_66.w = ((tmpvar_29 * (1.7 - 
      (0.7 * tmpvar_29)
    )) * 6.0);
    lowp vec4 tmpvar_67;
    tmpvar_67 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_54, tmpvar_66.w);
    mediump vec4 tmpvar_68;
    tmpvar_68 = tmpvar_67;
    mediump vec3 tmpvar_69;
    tmpvar_69 = ((hdr_65.x * (
      (hdr_65.w * (tmpvar_68.w - 1.0))
     + 1.0)) * tmpvar_68.xyz);
    highp vec3 tmpvar_70;
    tmpvar_70 = mix (tmpvar_69, tmpvar_53, unity_SpecCube0_BoxMin.www);
    specular_37 = tmpvar_70;
  } else {
    specular_37 = tmpvar_53;
  };
  tmpvar_34 = (specular_37 * occlusion_24);
  highp vec3 viewDir_71;
  viewDir_71 = -(tmpvar_12);
  mediump vec3 color_72;
  mediump float surfaceReduction_73;
  highp float specularTerm_74;
  mediump float diffuseTerm_75;
  mediump float nv_76;
  highp float tmpvar_77;
  highp float smoothness_78;
  smoothness_78 = tmpvar_6;
  tmpvar_77 = (1.0 - smoothness_78);
  highp vec3 tmpvar_79;
  highp vec3 inVec_80;
  inVec_80 = (_WorldSpaceLightPos0.xyz + viewDir_71);
  tmpvar_79 = (inVec_80 * inversesqrt(max (0.001, 
    dot (inVec_80, inVec_80)
  )));
  highp float tmpvar_81;
  tmpvar_81 = abs(dot (tmpvar_11, viewDir_71));
  nv_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (tmpvar_11, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_11, tmpvar_79), 0.0, 1.0);
  mediump float tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_79), 0.0, 1.0);
  tmpvar_84 = tmpvar_85;
  mediump float tmpvar_86;
  mediump float NdotL_87;
  NdotL_87 = tmpvar_82;
  mediump float perceptualRoughness_88;
  perceptualRoughness_88 = tmpvar_77;
  mediump float tmpvar_89;
  tmpvar_89 = (0.5 + ((2.0 * tmpvar_84) * (tmpvar_84 * perceptualRoughness_88)));
  mediump float x_90;
  x_90 = (1.0 - NdotL_87);
  mediump float x_91;
  x_91 = (1.0 - nv_76);
  tmpvar_86 = ((1.0 + (
    (tmpvar_89 - 1.0)
   * 
    ((x_90 * x_90) * ((x_90 * x_90) * x_90))
  )) * (1.0 + (
    (tmpvar_89 - 1.0)
   * 
    ((x_91 * x_91) * ((x_91 * x_91) * x_91))
  )));
  highp float tmpvar_92;
  tmpvar_92 = (tmpvar_86 * tmpvar_82);
  diffuseTerm_75 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = max ((tmpvar_77 * tmpvar_77), 0.002);
  highp float NdotV_94;
  NdotV_94 = nv_76;
  highp float tmpvar_95;
  tmpvar_95 = (tmpvar_93 * tmpvar_93);
  highp float tmpvar_96;
  tmpvar_96 = (((
    (tmpvar_83 * tmpvar_95)
   - tmpvar_83) * tmpvar_83) + 1.0);
  highp float tmpvar_97;
  tmpvar_97 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_82 * (
        (NdotV_94 * (1.0 - tmpvar_93))
       + tmpvar_93)) + (NdotV_94 * (
        (tmpvar_82 * (1.0 - tmpvar_93))
       + tmpvar_93))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_95)
     / 
      ((tmpvar_96 * tmpvar_96) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_82));
  specularTerm_74 = tmpvar_97;
  surfaceReduction_73 = (1.0 - ((0.28 * tmpvar_93) * tmpvar_77));
  bvec3 tmpvar_98;
  tmpvar_98 = bvec3(tmpvar_9);
  bool tmpvar_99;
  tmpvar_99 = any(tmpvar_98);
  highp float tmpvar_100;
  if (tmpvar_99) {
    tmpvar_100 = 1.0;
  } else {
    tmpvar_100 = 0.0;
  };
  specularTerm_74 = (tmpvar_97 * tmpvar_100);
  mediump vec3 tmpvar_101;
  mediump float x_102;
  x_102 = (1.0 - tmpvar_84);
  tmpvar_101 = (tmpvar_9 + ((1.0 - tmpvar_9) * (
    (x_102 * x_102)
   * 
    ((x_102 * x_102) * x_102)
  )));
  mediump float x_103;
  x_103 = (1.0 - nv_76);
  mediump vec3 tmpvar_104;
  tmpvar_104 = mix (tmpvar_9, vec3(clamp ((mg_5.y + 
    (1.0 - tmpvar_10)
  ), 0.0, 1.0)), vec3(((x_103 * x_103) * (
    (x_103 * x_103)
   * x_103))));
  highp vec3 tmpvar_105;
  tmpvar_105 = (((tmpvar_8 * 
    (tmpvar_33 * diffuseTerm_75)
  ) + (
    (specularTerm_74 * tmpvar_33)
   * tmpvar_101)) + ((surfaceReduction_73 * tmpvar_34) * tmpvar_104));
  color_72 = tmpvar_105;
  mediump vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = color_72;
  c_1.w = tmpvar_106.w;
  lowp vec4 tmpvar_107;
  tmpvar_107 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_72 + (tmpvar_107.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_108;
  xlat_varoutput_108.xyz = c_1.xyz;
  xlat_varoutput_108.w = 1.0;
  gl_FragData[0] = xlat_varoutput_108;
}


#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bvec3 u_xlatb9;
mediump vec3 u_xlat16_10;
bvec3 u_xlatb11;
mediump vec3 u_xlat16_12;
float u_xlat13;
float u_xlat14;
vec3 u_xlat19;
mediump vec3 u_xlat16_19;
float u_xlat26;
float u_xlat27;
float u_xlat39;
float u_xlat40;
lowp float u_xlat10_40;
mediump float u_xlat16_41;
mediump float u_xlat16_42;
mediump float u_xlat16_45;
mediump float u_xlat16_46;
mediump float u_xlat16_47;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = (-u_xlat40) + u_xlat4.x;
    u_xlat40 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat40;
    u_xlat40 = u_xlat40 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat40 = min(max(u_xlat40, 0.0), 1.0);
#else
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4.x = texture(_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat16_42 = u_xlat40 + u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_42 = min(max(u_xlat16_42, 0.0), 1.0);
#else
    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);
#endif
    u_xlat10_40 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;
    u_xlat16_6.x = u_xlat10_40 * _OcclusionStrength + u_xlat16_6.x;
    u_xlat40 = (-_Glossiness) + 1.0;
    u_xlat16_19.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;
    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat1.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb4){
        u_xlat16_42 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);
        u_xlat16_42 = inversesqrt(u_xlat16_42);
        u_xlat16_8.xyz = vec3(u_xlat16_42) * u_xlat16_19.xyz;
        u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat4.xyz = u_xlat4.xyz / u_xlat16_8.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_8.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyzx).xyz;
        u_xlat16_10.x = (u_xlatb9.x) ? u_xlat4.x : u_xlat5.x;
        u_xlat16_10.y = (u_xlatb9.y) ? u_xlat4.y : u_xlat5.y;
        u_xlat16_10.z = (u_xlatb9.z) ? u_xlat4.z : u_xlat5.z;
        u_xlat16_42 = min(u_xlat16_10.y, u_xlat16_10.x);
        u_xlat16_42 = min(u_xlat16_10.z, u_xlat16_42);
        u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat4.xyz = u_xlat16_8.xyz * vec3(u_xlat16_42) + u_xlat4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_4.xyz = u_xlat16_19.xyz;
    //ENDIF
    }
    u_xlat16_42 = (-u_xlat40) * 0.699999988 + 1.70000005;
    u_xlat16_42 = u_xlat40 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * 6.0;
    u_xlat10_4 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_42);
    u_xlat16_46 = u_xlat10_4.w + -1.0;
    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;
    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_46);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb5 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb5 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb5){
            u_xlat16_47 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);
            u_xlat16_47 = inversesqrt(u_xlat16_47);
            u_xlat16_10.xyz = u_xlat16_19.xyz * vec3(u_xlat16_47);
            u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat5.xyz = u_xlat5.xyz / u_xlat16_10.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_10.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_10.xyzx).xyz;
            u_xlat16_12.x = (u_xlatb11.x) ? u_xlat5.x : u_xlat9.x;
            u_xlat16_12.y = (u_xlatb11.y) ? u_xlat5.y : u_xlat9.y;
            u_xlat16_12.z = (u_xlatb11.z) ? u_xlat5.z : u_xlat9.z;
            u_xlat16_47 = min(u_xlat16_12.y, u_xlat16_12.x);
            u_xlat16_47 = min(u_xlat16_12.z, u_xlat16_47);
            u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat19.xyz = u_xlat16_10.xyz * vec3(u_xlat16_47) + u_xlat5.xyz;
            u_xlat16_19.xyz = u_xlat19.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat16_19.xyz, u_xlat16_42);
        u_xlat16_42 = u_xlat10_5.w + -1.0;
        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;
        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;
        u_xlat16_19.xyz = u_xlat10_5.xyz * vec3(u_xlat16_42);
        u_xlat16_5.xyz = vec3(u_xlat16_46) * u_xlat10_4.xyz + (-u_xlat16_19.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_19.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;
    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;
    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_42 = u_xlat13 + u_xlat13;
    u_xlat16_42 = u_xlat13 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;
    u_xlat16_45 = (-u_xlat1.x) + 1.0;
    u_xlat16_46 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_46;
    u_xlat16_45 = u_xlat16_42 * u_xlat16_45 + 1.0;
    u_xlat16_46 = -abs(u_xlat39) + 1.0;
    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_46 + 1.0;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_45;
    u_xlat26 = u_xlat1.x * u_xlat16_42;
    u_xlat14 = u_xlat40 * u_xlat40;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat27 = (-u_xlat14) + 1.0;
    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;
    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;
    u_xlat39 = abs(u_xlat39) * u_xlat27;
    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat27 = u_xlat14 * u_xlat14;
    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);
    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;
    u_xlat27 = u_xlat27 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat27 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat39;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat39 = u_xlat14 * u_xlat40;
    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;
    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_42!=0.0);
#else
    u_xlatb1 = u_xlat16_42!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_41 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_41 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_42 = (-u_xlat13) + 1.0;
    u_xlat16_45 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_45;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat39);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);
    u_xlat16_2.xyz = vec3(u_xlat16_46) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat10_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles":
// Stats: 175 math, 5 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_9.zw;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = o_17;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  mediump float tmpvar_10;
  tmpvar_10 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_8 = (tmpvar_7 * tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_3 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - tmpvar_3), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_14 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  atten_2 = tmpvar_20;
  mediump float occ_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_21 = tmpvar_22;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump float occlusion_24;
  occlusion_24 = ((1.0 - _OcclusionStrength) + (occ_21 * _OcclusionStrength));
  highp vec4 tmpvar_25;
  highp vec4 tmpvar_26;
  tmpvar_25 = unity_SpecCube0_HDR;
  tmpvar_26 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_27;
  worldViewDir_27 = -(tmpvar_12);
  mediump vec3 Normal_28;
  Normal_28 = tmpvar_11;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  tmpvar_29 = tmpvar_30;
  mediump vec3 I_32;
  I_32 = -(worldViewDir_27);
  mediump vec3 tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_33 = (tmpvar_13 * atten_23);
  tmpvar_34 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_35;
  tmpvar_35 = (I_32 - (2.0 * (
    dot (Normal_28, I_32)
   * Normal_28)));
  mediump vec3 originalReflUVW_36;
  mediump vec3 specular_37;
  originalReflUVW_36 = tmpvar_35;
  mediump vec3 worldRefl_38;
  worldRefl_38 = tmpvar_35;
  highp vec3 worldPos_39;
  worldPos_39 = tmpvar_3;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_40;
    mediump vec3 rbmax_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = normalize(tmpvar_35);
    highp vec3 tmpvar_43;
    tmpvar_43 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_3) / tmpvar_42);
    rbmax_41 = tmpvar_43;
    highp vec3 tmpvar_44;
    tmpvar_44 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_3) / tmpvar_42);
    rbmin_40 = tmpvar_44;
    bvec3 tmpvar_45;
    tmpvar_45 = greaterThan (tmpvar_42, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_46;
    if (tmpvar_45.x) {
      tmpvar_46 = rbmax_41.x;
    } else {
      tmpvar_46 = rbmin_40.x;
    };
    mediump float tmpvar_47;
    if (tmpvar_45.y) {
      tmpvar_47 = rbmax_41.y;
    } else {
      tmpvar_47 = rbmin_40.y;
    };
    mediump float tmpvar_48;
    if (tmpvar_45.z) {
      tmpvar_48 = rbmax_41.z;
    } else {
      tmpvar_48 = rbmin_40.z;
    };
    worldPos_39 = (tmpvar_3 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_38 = (worldPos_39 + (tmpvar_42 * min (
      min (tmpvar_46, tmpvar_47)
    , tmpvar_48)));
  };
  tmpvar_35 = worldRefl_38;
  mediump vec4 hdr_49;
  hdr_49 = tmpvar_25;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = worldRefl_38;
  tmpvar_50.w = ((tmpvar_29 * (1.7 - 
    (0.7 * tmpvar_29)
  )) * 6.0);
  lowp vec4 tmpvar_51;
  tmpvar_51 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_38, tmpvar_50.w);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec3 tmpvar_53;
  tmpvar_53 = ((hdr_49.x * (
    (hdr_49.w * (tmpvar_52.w - 1.0))
   + 1.0)) * tmpvar_52.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_54;
    worldRefl_54 = originalReflUVW_36;
    highp vec3 worldPos_55;
    worldPos_55 = tmpvar_3;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_56;
      mediump vec3 rbmax_57;
      mediump vec3 tmpvar_58;
      tmpvar_58 = normalize(originalReflUVW_36);
      highp vec3 tmpvar_59;
      tmpvar_59 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_3) / tmpvar_58);
      rbmax_57 = tmpvar_59;
      highp vec3 tmpvar_60;
      tmpvar_60 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_3) / tmpvar_58);
      rbmin_56 = tmpvar_60;
      bvec3 tmpvar_61;
      tmpvar_61 = greaterThan (tmpvar_58, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_62;
      if (tmpvar_61.x) {
        tmpvar_62 = rbmax_57.x;
      } else {
        tmpvar_62 = rbmin_56.x;
      };
      mediump float tmpvar_63;
      if (tmpvar_61.y) {
        tmpvar_63 = rbmax_57.y;
      } else {
        tmpvar_63 = rbmin_56.y;
      };
      mediump float tmpvar_64;
      if (tmpvar_61.z) {
        tmpvar_64 = rbmax_57.z;
      } else {
        tmpvar_64 = rbmin_56.z;
      };
      worldPos_55 = (tmpvar_3 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_54 = (worldPos_55 + (tmpvar_58 * min (
        min (tmpvar_62, tmpvar_63)
      , tmpvar_64)));
    };
    tmpvar_35 = worldRefl_54;
    mediump vec4 hdr_65;
    hdr_65 = tmpvar_26;
    mediump vec4 tmpvar_66;
    tmpvar_66.xyz = worldRefl_54;
    tmpvar_66.w = ((tmpvar_29 * (1.7 - 
      (0.7 * tmpvar_29)
    )) * 6.0);
    lowp vec4 tmpvar_67;
    tmpvar_67 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_54, tmpvar_66.w);
    mediump vec4 tmpvar_68;
    tmpvar_68 = tmpvar_67;
    mediump vec3 tmpvar_69;
    tmpvar_69 = ((hdr_65.x * (
      (hdr_65.w * (tmpvar_68.w - 1.0))
     + 1.0)) * tmpvar_68.xyz);
    highp vec3 tmpvar_70;
    tmpvar_70 = mix (tmpvar_69, tmpvar_53, unity_SpecCube0_BoxMin.www);
    specular_37 = tmpvar_70;
  } else {
    specular_37 = tmpvar_53;
  };
  tmpvar_34 = (specular_37 * occlusion_24);
  highp vec3 viewDir_71;
  viewDir_71 = -(tmpvar_12);
  mediump vec3 color_72;
  mediump float surfaceReduction_73;
  highp float specularTerm_74;
  mediump float diffuseTerm_75;
  mediump float nv_76;
  highp float tmpvar_77;
  highp float smoothness_78;
  smoothness_78 = tmpvar_6;
  tmpvar_77 = (1.0 - smoothness_78);
  highp vec3 tmpvar_79;
  highp vec3 inVec_80;
  inVec_80 = (_WorldSpaceLightPos0.xyz + viewDir_71);
  tmpvar_79 = (inVec_80 * inversesqrt(max (0.001, 
    dot (inVec_80, inVec_80)
  )));
  highp float tmpvar_81;
  tmpvar_81 = abs(dot (tmpvar_11, viewDir_71));
  nv_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (tmpvar_11, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_11, tmpvar_79), 0.0, 1.0);
  mediump float tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_79), 0.0, 1.0);
  tmpvar_84 = tmpvar_85;
  mediump float tmpvar_86;
  mediump float NdotL_87;
  NdotL_87 = tmpvar_82;
  mediump float perceptualRoughness_88;
  perceptualRoughness_88 = tmpvar_77;
  mediump float tmpvar_89;
  tmpvar_89 = (0.5 + ((2.0 * tmpvar_84) * (tmpvar_84 * perceptualRoughness_88)));
  mediump float x_90;
  x_90 = (1.0 - NdotL_87);
  mediump float x_91;
  x_91 = (1.0 - nv_76);
  tmpvar_86 = ((1.0 + (
    (tmpvar_89 - 1.0)
   * 
    ((x_90 * x_90) * ((x_90 * x_90) * x_90))
  )) * (1.0 + (
    (tmpvar_89 - 1.0)
   * 
    ((x_91 * x_91) * ((x_91 * x_91) * x_91))
  )));
  highp float tmpvar_92;
  tmpvar_92 = (tmpvar_86 * tmpvar_82);
  diffuseTerm_75 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = max ((tmpvar_77 * tmpvar_77), 0.002);
  highp float NdotV_94;
  NdotV_94 = nv_76;
  highp float tmpvar_95;
  tmpvar_95 = (tmpvar_93 * tmpvar_93);
  highp float tmpvar_96;
  tmpvar_96 = (((
    (tmpvar_83 * tmpvar_95)
   - tmpvar_83) * tmpvar_83) + 1.0);
  highp float tmpvar_97;
  tmpvar_97 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_82 * (
        (NdotV_94 * (1.0 - tmpvar_93))
       + tmpvar_93)) + (NdotV_94 * (
        (tmpvar_82 * (1.0 - tmpvar_93))
       + tmpvar_93))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_95)
     / 
      ((tmpvar_96 * tmpvar_96) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_82));
  specularTerm_74 = tmpvar_97;
  surfaceReduction_73 = (1.0 - ((0.28 * tmpvar_93) * tmpvar_77));
  bvec3 tmpvar_98;
  tmpvar_98 = bvec3(tmpvar_9);
  bool tmpvar_99;
  tmpvar_99 = any(tmpvar_98);
  highp float tmpvar_100;
  if (tmpvar_99) {
    tmpvar_100 = 1.0;
  } else {
    tmpvar_100 = 0.0;
  };
  specularTerm_74 = (tmpvar_97 * tmpvar_100);
  mediump vec3 tmpvar_101;
  mediump float x_102;
  x_102 = (1.0 - tmpvar_84);
  tmpvar_101 = (tmpvar_9 + ((1.0 - tmpvar_9) * (
    (x_102 * x_102)
   * 
    ((x_102 * x_102) * x_102)
  )));
  mediump float x_103;
  x_103 = (1.0 - nv_76);
  mediump vec3 tmpvar_104;
  tmpvar_104 = mix (tmpvar_9, vec3(clamp ((mg_5.y + 
    (1.0 - tmpvar_10)
  ), 0.0, 1.0)), vec3(((x_103 * x_103) * (
    (x_103 * x_103)
   * x_103))));
  highp vec3 tmpvar_105;
  tmpvar_105 = (((tmpvar_8 * 
    (tmpvar_33 * diffuseTerm_75)
  ) + (
    (specularTerm_74 * tmpvar_33)
   * tmpvar_101)) + ((surfaceReduction_73 * tmpvar_34) * tmpvar_104));
  color_72 = tmpvar_105;
  mediump vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = color_72;
  c_1.w = tmpvar_106.w;
  c_1.xyz = color_72;
  mediump vec4 xlat_varoutput_107;
  xlat_varoutput_107.xyz = c_1.xyz;
  xlat_varoutput_107.w = 1.0;
  gl_FragData[0] = xlat_varoutput_107;
}


#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bvec3 u_xlatb9;
mediump vec3 u_xlat16_10;
bvec3 u_xlatb11;
mediump vec3 u_xlat16_12;
float u_xlat13;
float u_xlat14;
vec3 u_xlat19;
mediump vec3 u_xlat16_19;
float u_xlat26;
float u_xlat27;
float u_xlat39;
float u_xlat40;
lowp float u_xlat10_40;
mediump float u_xlat16_41;
mediump float u_xlat16_42;
mediump float u_xlat16_45;
mediump float u_xlat16_46;
mediump float u_xlat16_47;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = (-u_xlat40) + u_xlat4.x;
    u_xlat40 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat40;
    u_xlat40 = u_xlat40 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat40 = min(max(u_xlat40, 0.0), 1.0);
#else
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4.x = texture(_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat16_42 = u_xlat40 + u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_42 = min(max(u_xlat16_42, 0.0), 1.0);
#else
    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);
#endif
    u_xlat10_40 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;
    u_xlat16_6.x = u_xlat10_40 * _OcclusionStrength + u_xlat16_6.x;
    u_xlat40 = (-_Glossiness) + 1.0;
    u_xlat16_19.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;
    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat1.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb4){
        u_xlat16_42 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);
        u_xlat16_42 = inversesqrt(u_xlat16_42);
        u_xlat16_8.xyz = vec3(u_xlat16_42) * u_xlat16_19.xyz;
        u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat4.xyz = u_xlat4.xyz / u_xlat16_8.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_8.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyzx).xyz;
        u_xlat16_10.x = (u_xlatb9.x) ? u_xlat4.x : u_xlat5.x;
        u_xlat16_10.y = (u_xlatb9.y) ? u_xlat4.y : u_xlat5.y;
        u_xlat16_10.z = (u_xlatb9.z) ? u_xlat4.z : u_xlat5.z;
        u_xlat16_42 = min(u_xlat16_10.y, u_xlat16_10.x);
        u_xlat16_42 = min(u_xlat16_10.z, u_xlat16_42);
        u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat4.xyz = u_xlat16_8.xyz * vec3(u_xlat16_42) + u_xlat4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_4.xyz = u_xlat16_19.xyz;
    //ENDIF
    }
    u_xlat16_42 = (-u_xlat40) * 0.699999988 + 1.70000005;
    u_xlat16_42 = u_xlat40 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * 6.0;
    u_xlat10_4 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_42);
    u_xlat16_46 = u_xlat10_4.w + -1.0;
    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;
    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_46);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb5 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb5 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb5){
            u_xlat16_47 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);
            u_xlat16_47 = inversesqrt(u_xlat16_47);
            u_xlat16_10.xyz = u_xlat16_19.xyz * vec3(u_xlat16_47);
            u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat5.xyz = u_xlat5.xyz / u_xlat16_10.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_10.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_10.xyzx).xyz;
            u_xlat16_12.x = (u_xlatb11.x) ? u_xlat5.x : u_xlat9.x;
            u_xlat16_12.y = (u_xlatb11.y) ? u_xlat5.y : u_xlat9.y;
            u_xlat16_12.z = (u_xlatb11.z) ? u_xlat5.z : u_xlat9.z;
            u_xlat16_47 = min(u_xlat16_12.y, u_xlat16_12.x);
            u_xlat16_47 = min(u_xlat16_12.z, u_xlat16_47);
            u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat19.xyz = u_xlat16_10.xyz * vec3(u_xlat16_47) + u_xlat5.xyz;
            u_xlat16_19.xyz = u_xlat19.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat16_19.xyz, u_xlat16_42);
        u_xlat16_42 = u_xlat10_5.w + -1.0;
        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;
        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;
        u_xlat16_19.xyz = u_xlat10_5.xyz * vec3(u_xlat16_42);
        u_xlat16_5.xyz = vec3(u_xlat16_46) * u_xlat10_4.xyz + (-u_xlat16_19.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_19.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;
    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;
    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_42 = u_xlat13 + u_xlat13;
    u_xlat16_42 = u_xlat13 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;
    u_xlat16_45 = (-u_xlat1.x) + 1.0;
    u_xlat16_46 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_46;
    u_xlat16_45 = u_xlat16_42 * u_xlat16_45 + 1.0;
    u_xlat16_46 = -abs(u_xlat39) + 1.0;
    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_46 + 1.0;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_45;
    u_xlat26 = u_xlat1.x * u_xlat16_42;
    u_xlat14 = u_xlat40 * u_xlat40;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat27 = (-u_xlat14) + 1.0;
    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;
    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;
    u_xlat39 = abs(u_xlat39) * u_xlat27;
    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat27 = u_xlat14 * u_xlat14;
    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);
    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;
    u_xlat27 = u_xlat27 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat27 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat39;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat39 = u_xlat14 * u_xlat40;
    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;
    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_42!=0.0);
#else
    u_xlatb1 = u_xlat16_42!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_41 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_41 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_42 = (-u_xlat13) + 1.0;
    u_xlat16_45 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_45;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat39);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);
    u_xlat16_2.xyz = vec3(u_xlat16_46) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN LIGHTPROBE_SH _EMISSION VERTEXLIGHT_ON 
-- Vertex shader for "gles":
// Stats: 189 math, 6 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_9.zw;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_17;
  mediump vec4 ambientOrLightmapUV_22;
  ambientOrLightmapUV_22.w = 0.0;
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 normal_28;
  normal_28 = normalWorld_21;
  highp vec3 col_29;
  highp vec4 ndotl_30;
  highp vec4 lengthSq_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_8.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_8.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_31 = (tmpvar_32 * tmpvar_32);
  lengthSq_31 = (lengthSq_31 + (tmpvar_33 * tmpvar_33));
  lengthSq_31 = (lengthSq_31 + (tmpvar_34 * tmpvar_34));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (lengthSq_31, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_31 = tmpvar_35;
  ndotl_30 = (tmpvar_32 * normal_28.x);
  ndotl_30 = (ndotl_30 + (tmpvar_33 * normal_28.y));
  ndotl_30 = (ndotl_30 + (tmpvar_34 * normal_28.z));
  highp vec4 tmpvar_36;
  tmpvar_36 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_30 * inversesqrt(tmpvar_35)));
  ndotl_30 = tmpvar_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (tmpvar_36 * (1.0/((1.0 + 
    (tmpvar_35 * lightAttenSq_27)
  ))));
  col_29 = (lightColor0_23 * tmpvar_37.x);
  col_29 = (col_29 + (lightColor1_24 * tmpvar_37.y));
  col_29 = (col_29 + (lightColor2_25 * tmpvar_37.z));
  col_29 = (col_29 + (lightColor3_26 * tmpvar_37.w));
  ambientOrLightmapUV_22.xyz = col_29;
  mediump vec3 x1_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = (normalWorld_21.xyzz * normalWorld_21.yzzx);
  x1_38.x = dot (unity_SHBr, tmpvar_39);
  x1_38.y = dot (unity_SHBg, tmpvar_39);
  x1_38.z = dot (unity_SHBb, tmpvar_39);
  ambientOrLightmapUV_22.xyz = ((ambientOrLightmapUV_22.xyz * (
    (ambientOrLightmapUV_22.xyz * ((ambientOrLightmapUV_22.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_38 + (unity_SHC.xyz * 
    ((normalWorld_21.x * normalWorld_21.x) - (normalWorld_21.y * normalWorld_21.y))
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_22;
  xlv_TEXCOORD6 = o_18;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  mediump float tmpvar_10;
  tmpvar_10 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_8 = (tmpvar_7 * tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_3 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - tmpvar_3), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_14 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  atten_2 = tmpvar_20;
  mediump float occ_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_21 = tmpvar_22;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump float occlusion_24;
  occlusion_24 = ((1.0 - _OcclusionStrength) + (occ_21 * _OcclusionStrength));
  highp vec4 tmpvar_25;
  highp vec4 tmpvar_26;
  tmpvar_25 = unity_SpecCube0_HDR;
  tmpvar_26 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_27;
  worldViewDir_27 = -(tmpvar_12);
  mediump vec3 Normal_28;
  Normal_28 = tmpvar_11;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  tmpvar_29 = tmpvar_30;
  mediump vec3 I_32;
  I_32 = -(worldViewDir_27);
  mediump vec3 normalWorld_33;
  normalWorld_33 = tmpvar_11;
  mediump vec3 tmpvar_34;
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = normalWorld_33;
  mediump vec3 x_38;
  x_38.x = dot (unity_SHAr, tmpvar_37);
  x_38.y = dot (unity_SHAg, tmpvar_37);
  x_38.z = dot (unity_SHAb, tmpvar_37);
  tmpvar_34 = (tmpvar_13 * atten_23);
  tmpvar_35 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_38)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_24);
  tmpvar_36 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (I_32 - (2.0 * (
    dot (Normal_28, I_32)
   * Normal_28)));
  mediump vec3 originalReflUVW_40;
  mediump vec3 specular_41;
  originalReflUVW_40 = tmpvar_39;
  mediump vec3 worldRefl_42;
  worldRefl_42 = tmpvar_39;
  highp vec3 worldPos_43;
  worldPos_43 = tmpvar_3;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_44;
    mediump vec3 rbmax_45;
    mediump vec3 tmpvar_46;
    tmpvar_46 = normalize(tmpvar_39);
    highp vec3 tmpvar_47;
    tmpvar_47 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_3) / tmpvar_46);
    rbmax_45 = tmpvar_47;
    highp vec3 tmpvar_48;
    tmpvar_48 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_3) / tmpvar_46);
    rbmin_44 = tmpvar_48;
    bvec3 tmpvar_49;
    tmpvar_49 = greaterThan (tmpvar_46, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_50;
    if (tmpvar_49.x) {
      tmpvar_50 = rbmax_45.x;
    } else {
      tmpvar_50 = rbmin_44.x;
    };
    mediump float tmpvar_51;
    if (tmpvar_49.y) {
      tmpvar_51 = rbmax_45.y;
    } else {
      tmpvar_51 = rbmin_44.y;
    };
    mediump float tmpvar_52;
    if (tmpvar_49.z) {
      tmpvar_52 = rbmax_45.z;
    } else {
      tmpvar_52 = rbmin_44.z;
    };
    worldPos_43 = (tmpvar_3 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_42 = (worldPos_43 + (tmpvar_46 * min (
      min (tmpvar_50, tmpvar_51)
    , tmpvar_52)));
  };
  tmpvar_39 = worldRefl_42;
  mediump vec4 hdr_53;
  hdr_53 = tmpvar_25;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = worldRefl_42;
  tmpvar_54.w = ((tmpvar_29 * (1.7 - 
    (0.7 * tmpvar_29)
  )) * 6.0);
  lowp vec4 tmpvar_55;
  tmpvar_55 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_42, tmpvar_54.w);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec3 tmpvar_57;
  tmpvar_57 = ((hdr_53.x * (
    (hdr_53.w * (tmpvar_56.w - 1.0))
   + 1.0)) * tmpvar_56.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_58;
    worldRefl_58 = originalReflUVW_40;
    highp vec3 worldPos_59;
    worldPos_59 = tmpvar_3;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_60;
      mediump vec3 rbmax_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(originalReflUVW_40);
      highp vec3 tmpvar_63;
      tmpvar_63 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_3) / tmpvar_62);
      rbmax_61 = tmpvar_63;
      highp vec3 tmpvar_64;
      tmpvar_64 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_3) / tmpvar_62);
      rbmin_60 = tmpvar_64;
      bvec3 tmpvar_65;
      tmpvar_65 = greaterThan (tmpvar_62, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_66;
      if (tmpvar_65.x) {
        tmpvar_66 = rbmax_61.x;
      } else {
        tmpvar_66 = rbmin_60.x;
      };
      mediump float tmpvar_67;
      if (tmpvar_65.y) {
        tmpvar_67 = rbmax_61.y;
      } else {
        tmpvar_67 = rbmin_60.y;
      };
      mediump float tmpvar_68;
      if (tmpvar_65.z) {
        tmpvar_68 = rbmax_61.z;
      } else {
        tmpvar_68 = rbmin_60.z;
      };
      worldPos_59 = (tmpvar_3 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_58 = (worldPos_59 + (tmpvar_62 * min (
        min (tmpvar_66, tmpvar_67)
      , tmpvar_68)));
    };
    tmpvar_39 = worldRefl_58;
    mediump vec4 hdr_69;
    hdr_69 = tmpvar_26;
    mediump vec4 tmpvar_70;
    tmpvar_70.xyz = worldRefl_58;
    tmpvar_70.w = ((tmpvar_29 * (1.7 - 
      (0.7 * tmpvar_29)
    )) * 6.0);
    lowp vec4 tmpvar_71;
    tmpvar_71 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_58, tmpvar_70.w);
    mediump vec4 tmpvar_72;
    tmpvar_72 = tmpvar_71;
    mediump vec3 tmpvar_73;
    tmpvar_73 = ((hdr_69.x * (
      (hdr_69.w * (tmpvar_72.w - 1.0))
     + 1.0)) * tmpvar_72.xyz);
    highp vec3 tmpvar_74;
    tmpvar_74 = mix (tmpvar_73, tmpvar_57, unity_SpecCube0_BoxMin.www);
    specular_41 = tmpvar_74;
  } else {
    specular_41 = tmpvar_57;
  };
  tmpvar_36 = (specular_41 * occlusion_24);
  highp vec3 viewDir_75;
  viewDir_75 = -(tmpvar_12);
  mediump vec3 color_76;
  mediump float surfaceReduction_77;
  highp float specularTerm_78;
  mediump float diffuseTerm_79;
  mediump float nv_80;
  highp float tmpvar_81;
  highp float smoothness_82;
  smoothness_82 = tmpvar_6;
  tmpvar_81 = (1.0 - smoothness_82);
  highp vec3 tmpvar_83;
  highp vec3 inVec_84;
  inVec_84 = (_WorldSpaceLightPos0.xyz + viewDir_75);
  tmpvar_83 = (inVec_84 * inversesqrt(max (0.001, 
    dot (inVec_84, inVec_84)
  )));
  highp float tmpvar_85;
  tmpvar_85 = abs(dot (tmpvar_11, viewDir_75));
  nv_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (tmpvar_11, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_87;
  tmpvar_87 = clamp (dot (tmpvar_11, tmpvar_83), 0.0, 1.0);
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_83), 0.0, 1.0);
  tmpvar_88 = tmpvar_89;
  mediump float tmpvar_90;
  mediump float NdotL_91;
  NdotL_91 = tmpvar_86;
  mediump float perceptualRoughness_92;
  perceptualRoughness_92 = tmpvar_81;
  mediump float tmpvar_93;
  tmpvar_93 = (0.5 + ((2.0 * tmpvar_88) * (tmpvar_88 * perceptualRoughness_92)));
  mediump float x_94;
  x_94 = (1.0 - NdotL_91);
  mediump float x_95;
  x_95 = (1.0 - nv_80);
  tmpvar_90 = ((1.0 + (
    (tmpvar_93 - 1.0)
   * 
    ((x_94 * x_94) * ((x_94 * x_94) * x_94))
  )) * (1.0 + (
    (tmpvar_93 - 1.0)
   * 
    ((x_95 * x_95) * ((x_95 * x_95) * x_95))
  )));
  highp float tmpvar_96;
  tmpvar_96 = (tmpvar_90 * tmpvar_86);
  diffuseTerm_79 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = max ((tmpvar_81 * tmpvar_81), 0.002);
  highp float NdotV_98;
  NdotV_98 = nv_80;
  highp float tmpvar_99;
  tmpvar_99 = (tmpvar_97 * tmpvar_97);
  highp float tmpvar_100;
  tmpvar_100 = (((
    (tmpvar_87 * tmpvar_99)
   - tmpvar_87) * tmpvar_87) + 1.0);
  highp float tmpvar_101;
  tmpvar_101 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_86 * (
        (NdotV_98 * (1.0 - tmpvar_97))
       + tmpvar_97)) + (NdotV_98 * (
        (tmpvar_86 * (1.0 - tmpvar_97))
       + tmpvar_97))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_99)
     / 
      ((tmpvar_100 * tmpvar_100) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_86));
  specularTerm_78 = tmpvar_101;
  surfaceReduction_77 = (1.0 - ((0.28 * tmpvar_97) * tmpvar_81));
  bvec3 tmpvar_102;
  tmpvar_102 = bvec3(tmpvar_9);
  bool tmpvar_103;
  tmpvar_103 = any(tmpvar_102);
  highp float tmpvar_104;
  if (tmpvar_103) {
    tmpvar_104 = 1.0;
  } else {
    tmpvar_104 = 0.0;
  };
  specularTerm_78 = (tmpvar_101 * tmpvar_104);
  mediump vec3 tmpvar_105;
  mediump float x_106;
  x_106 = (1.0 - tmpvar_88);
  tmpvar_105 = (tmpvar_9 + ((1.0 - tmpvar_9) * (
    (x_106 * x_106)
   * 
    ((x_106 * x_106) * x_106)
  )));
  mediump float x_107;
  x_107 = (1.0 - nv_80);
  mediump vec3 tmpvar_108;
  tmpvar_108 = mix (tmpvar_9, vec3(clamp ((mg_5.y + 
    (1.0 - tmpvar_10)
  ), 0.0, 1.0)), vec3(((x_107 * x_107) * (
    (x_107 * x_107)
   * x_107))));
  highp vec3 tmpvar_109;
  tmpvar_109 = (((tmpvar_8 * 
    (tmpvar_35 + (tmpvar_34 * diffuseTerm_79))
  ) + (
    (specularTerm_78 * tmpvar_34)
   * tmpvar_105)) + ((surfaceReduction_77 * tmpvar_36) * tmpvar_108));
  color_76 = tmpvar_109;
  mediump vec4 tmpvar_110;
  tmpvar_110.w = 1.0;
  tmpvar_110.xyz = color_76;
  c_1.w = tmpvar_110.w;
  lowp vec4 tmpvar_111;
  tmpvar_111 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_76 + (tmpvar_111.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_112;
  xlat_varoutput_112.xyz = c_1.xyz;
  xlat_varoutput_112.w = 1.0;
  gl_FragData[0] = xlat_varoutput_112;
}


#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD4.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = inversesqrt(u_xlat3);
    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat4;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat3 * u_xlat1;
    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_6.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_6.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_6.x);
    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp float u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
lowp vec4 u_xlat10_9;
vec3 u_xlat10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_11;
bvec3 u_xlatb12;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec3 u_xlat15;
vec3 u_xlat18;
mediump vec3 u_xlat16_18;
lowp float u_xlat10_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
mediump vec3 u_xlat16_22;
float u_xlat28;
float u_xlat29;
float u_xlat42;
bool u_xlatb42;
float u_xlat43;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
mediump float u_xlat16_49;
mediump float u_xlat16_50;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat18.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat18.x = dot(u_xlat18.xyz, u_xlat18.xyz);
    u_xlat18.x = sqrt(u_xlat18.x);
    u_xlat18.x = (-u_xlat4.x) + u_xlat18.x;
    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat18.x + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_18 = texture(_ShadowMapTexture, u_xlat18.xy).x;
    u_xlat16_45 = u_xlat4.x + u_xlat10_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_45 = min(max(u_xlat16_45, 0.0), 1.0);
#else
    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);
#endif
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;
    u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;
    u_xlat4.x = (-_Glossiness) + 1.0;
    u_xlat16_20.x = dot(u_xlat15.xyz, u_xlat0.xyz);
    u_xlat16_20.x = u_xlat16_20.x + u_xlat16_20.x;
    u_xlat16_20.xyz = u_xlat0.xyz * (-u_xlat16_20.xxx) + u_xlat15.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_45) * _LightColor0.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_18.xyz = log2(u_xlat16_8.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb42){
        u_xlat16_45 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
        u_xlat16_45 = inversesqrt(u_xlat16_45);
        u_xlat16_8.xyz = vec3(u_xlat16_45) * u_xlat16_20.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_8.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat16_8.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyzx).xyz;
        u_xlat16_11.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat9.x;
        u_xlat16_11.y = (u_xlatb10.y) ? u_xlat5.y : u_xlat9.y;
        u_xlat16_11.z = (u_xlatb10.z) ? u_xlat5.z : u_xlat9.z;
        u_xlat16_45 = min(u_xlat16_11.y, u_xlat16_11.x);
        u_xlat16_45 = min(u_xlat16_11.z, u_xlat16_45);
        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat5.xyz = u_xlat16_8.xyz * vec3(u_xlat16_45) + u_xlat5.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat16_20.xyz;
    //ENDIF
    }
    u_xlat16_45 = (-u_xlat4.x) * 0.699999988 + 1.70000005;
    u_xlat16_45 = u_xlat16_45 * u_xlat4.x;
    u_xlat16_45 = u_xlat16_45 * 6.0;
    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_45);
    u_xlat16_49 = u_xlat10_5.w + -1.0;
    u_xlat16_49 = unity_SpecCube0_HDR.w * u_xlat16_49 + 1.0;
    u_xlat16_49 = u_xlat16_49 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(u_xlat16_49);
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb42){
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb42){
            u_xlat16_50 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
            u_xlat16_50 = inversesqrt(u_xlat16_50);
            u_xlat16_11.xyz = u_xlat16_20.xyz * vec3(u_xlat16_50);
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_11.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat16_11.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_11.xyzx).xyz;
            u_xlat16_13.x = (u_xlatb12.x) ? u_xlat9.x : u_xlat10.x;
            u_xlat16_13.y = (u_xlatb12.y) ? u_xlat9.y : u_xlat10.y;
            u_xlat16_13.z = (u_xlatb12.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat16_50 = min(u_xlat16_13.y, u_xlat16_13.x);
            u_xlat16_50 = min(u_xlat16_13.z, u_xlat16_50);
            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat20.xyz = u_xlat16_11.xyz * vec3(u_xlat16_50) + u_xlat9.xyz;
            u_xlat16_20.xyz = u_xlat20.xyz;
        //ENDIF
        }
        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat16_20.xyz, u_xlat16_45);
        u_xlat16_45 = u_xlat10_9.w + -1.0;
        u_xlat16_45 = unity_SpecCube1_HDR.w * u_xlat16_45 + 1.0;
        u_xlat16_45 = u_xlat16_45 * unity_SpecCube1_HDR.x;
        u_xlat16_20.xyz = u_xlat10_9.xyz * vec3(u_xlat16_45);
        u_xlat16_9.xyz = vec3(u_xlat16_49) * u_xlat10_5.xyz + (-u_xlat16_20.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_9.xyz + u_xlat16_20.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_20.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat9.xyz = vec3(u_xlat42) * u_xlat9.xyz;
    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_45 = u_xlat14 + u_xlat14;
    u_xlat16_45 = u_xlat14 * u_xlat16_45;
    u_xlat16_45 = u_xlat16_45 * u_xlat4.x + -0.5;
    u_xlat16_49 = (-u_xlat1.x) + 1.0;
    u_xlat16_8.x = u_xlat16_49 * u_xlat16_49;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_8.x;
    u_xlat16_49 = u_xlat16_45 * u_xlat16_49 + 1.0;
    u_xlat16_8.x = -abs(u_xlat42) + 1.0;
    u_xlat16_22.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_22.x;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_8.x + 1.0;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_49;
    u_xlat28 = u_xlat1.x * u_xlat16_45;
    u_xlat15.x = u_xlat4.x * u_xlat4.x;
    u_xlat15.x = max(u_xlat15.x, 0.00200000009);
    u_xlat29 = (-u_xlat15.x) + 1.0;
    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;
    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;
    u_xlat42 = abs(u_xlat42) * u_xlat29;
    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat29 = u_xlat15.x * u_xlat15.x;
    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);
    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;
    u_xlat29 = u_xlat29 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat29 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat42;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat42 = u_xlat15.x * u_xlat4.x;
    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;
    u_xlat16_45 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_45!=0.0);
#else
    u_xlatb1 = u_xlat16_45!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_44 = (-u_xlat16_44) + 1.0;
    u_xlat16_44 = u_xlat16_44 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
    u_xlat16_22.xyz = vec3(u_xlat28) * u_xlat16_7.xyz;
    u_xlat16_22.xyz = u_xlat16_18.xyz * u_xlat16_6.xxx + u_xlat16_22.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_45 = (-u_xlat14) + 1.0;
    u_xlat16_6.x = u_xlat16_45 * u_xlat16_45;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_6.x;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_22.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_20.xyz * vec3(u_xlat42);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);
    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat10_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles":
// Stats: 187 math, 5 textures, 10 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_9.zw;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_17;
  mediump vec4 ambientOrLightmapUV_22;
  ambientOrLightmapUV_22.w = 0.0;
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 normal_28;
  normal_28 = normalWorld_21;
  highp vec3 col_29;
  highp vec4 ndotl_30;
  highp vec4 lengthSq_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_8.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_8.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_31 = (tmpvar_32 * tmpvar_32);
  lengthSq_31 = (lengthSq_31 + (tmpvar_33 * tmpvar_33));
  lengthSq_31 = (lengthSq_31 + (tmpvar_34 * tmpvar_34));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (lengthSq_31, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_31 = tmpvar_35;
  ndotl_30 = (tmpvar_32 * normal_28.x);
  ndotl_30 = (ndotl_30 + (tmpvar_33 * normal_28.y));
  ndotl_30 = (ndotl_30 + (tmpvar_34 * normal_28.z));
  highp vec4 tmpvar_36;
  tmpvar_36 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_30 * inversesqrt(tmpvar_35)));
  ndotl_30 = tmpvar_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (tmpvar_36 * (1.0/((1.0 + 
    (tmpvar_35 * lightAttenSq_27)
  ))));
  col_29 = (lightColor0_23 * tmpvar_37.x);
  col_29 = (col_29 + (lightColor1_24 * tmpvar_37.y));
  col_29 = (col_29 + (lightColor2_25 * tmpvar_37.z));
  col_29 = (col_29 + (lightColor3_26 * tmpvar_37.w));
  ambientOrLightmapUV_22.xyz = col_29;
  mediump vec3 x1_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = (normalWorld_21.xyzz * normalWorld_21.yzzx);
  x1_38.x = dot (unity_SHBr, tmpvar_39);
  x1_38.y = dot (unity_SHBg, tmpvar_39);
  x1_38.z = dot (unity_SHBb, tmpvar_39);
  ambientOrLightmapUV_22.xyz = ((ambientOrLightmapUV_22.xyz * (
    (ambientOrLightmapUV_22.xyz * ((ambientOrLightmapUV_22.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_38 + (unity_SHC.xyz * 
    ((normalWorld_21.x * normalWorld_21.x) - (normalWorld_21.y * normalWorld_21.y))
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_22;
  xlv_TEXCOORD6 = o_18;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  mediump float tmpvar_10;
  tmpvar_10 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_8 = (tmpvar_7 * tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_3 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - tmpvar_3), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_14 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  atten_2 = tmpvar_20;
  mediump float occ_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_21 = tmpvar_22;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump float occlusion_24;
  occlusion_24 = ((1.0 - _OcclusionStrength) + (occ_21 * _OcclusionStrength));
  highp vec4 tmpvar_25;
  highp vec4 tmpvar_26;
  tmpvar_25 = unity_SpecCube0_HDR;
  tmpvar_26 = unity_SpecCube1_HDR;
  mediump vec3 worldViewDir_27;
  worldViewDir_27 = -(tmpvar_12);
  mediump vec3 Normal_28;
  Normal_28 = tmpvar_11;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  tmpvar_29 = tmpvar_30;
  mediump vec3 I_32;
  I_32 = -(worldViewDir_27);
  mediump vec3 normalWorld_33;
  normalWorld_33 = tmpvar_11;
  mediump vec3 tmpvar_34;
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = normalWorld_33;
  mediump vec3 x_38;
  x_38.x = dot (unity_SHAr, tmpvar_37);
  x_38.y = dot (unity_SHAg, tmpvar_37);
  x_38.z = dot (unity_SHAb, tmpvar_37);
  tmpvar_34 = (tmpvar_13 * atten_23);
  tmpvar_35 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_38)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_24);
  tmpvar_36 = vec3(0.0, 0.0, 0.0);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (I_32 - (2.0 * (
    dot (Normal_28, I_32)
   * Normal_28)));
  mediump vec3 originalReflUVW_40;
  mediump vec3 specular_41;
  originalReflUVW_40 = tmpvar_39;
  mediump vec3 worldRefl_42;
  worldRefl_42 = tmpvar_39;
  highp vec3 worldPos_43;
  worldPos_43 = tmpvar_3;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    mediump vec3 rbmin_44;
    mediump vec3 rbmax_45;
    mediump vec3 tmpvar_46;
    tmpvar_46 = normalize(tmpvar_39);
    highp vec3 tmpvar_47;
    tmpvar_47 = ((unity_SpecCube0_BoxMax.xyz - tmpvar_3) / tmpvar_46);
    rbmax_45 = tmpvar_47;
    highp vec3 tmpvar_48;
    tmpvar_48 = ((unity_SpecCube0_BoxMin.xyz - tmpvar_3) / tmpvar_46);
    rbmin_44 = tmpvar_48;
    bvec3 tmpvar_49;
    tmpvar_49 = greaterThan (tmpvar_46, vec3(0.0, 0.0, 0.0));
    mediump float tmpvar_50;
    if (tmpvar_49.x) {
      tmpvar_50 = rbmax_45.x;
    } else {
      tmpvar_50 = rbmin_44.x;
    };
    mediump float tmpvar_51;
    if (tmpvar_49.y) {
      tmpvar_51 = rbmax_45.y;
    } else {
      tmpvar_51 = rbmin_44.y;
    };
    mediump float tmpvar_52;
    if (tmpvar_49.z) {
      tmpvar_52 = rbmax_45.z;
    } else {
      tmpvar_52 = rbmin_44.z;
    };
    worldPos_43 = (tmpvar_3 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_42 = (worldPos_43 + (tmpvar_46 * min (
      min (tmpvar_50, tmpvar_51)
    , tmpvar_52)));
  };
  tmpvar_39 = worldRefl_42;
  mediump vec4 hdr_53;
  hdr_53 = tmpvar_25;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = worldRefl_42;
  tmpvar_54.w = ((tmpvar_29 * (1.7 - 
    (0.7 * tmpvar_29)
  )) * 6.0);
  lowp vec4 tmpvar_55;
  tmpvar_55 = impl_low_textureCubeLodEXT (unity_SpecCube0, worldRefl_42, tmpvar_54.w);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec3 tmpvar_57;
  tmpvar_57 = ((hdr_53.x * (
    (hdr_53.w * (tmpvar_56.w - 1.0))
   + 1.0)) * tmpvar_56.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    mediump vec3 worldRefl_58;
    worldRefl_58 = originalReflUVW_40;
    highp vec3 worldPos_59;
    worldPos_59 = tmpvar_3;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      mediump vec3 rbmin_60;
      mediump vec3 rbmax_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(originalReflUVW_40);
      highp vec3 tmpvar_63;
      tmpvar_63 = ((unity_SpecCube1_BoxMax.xyz - tmpvar_3) / tmpvar_62);
      rbmax_61 = tmpvar_63;
      highp vec3 tmpvar_64;
      tmpvar_64 = ((unity_SpecCube1_BoxMin.xyz - tmpvar_3) / tmpvar_62);
      rbmin_60 = tmpvar_64;
      bvec3 tmpvar_65;
      tmpvar_65 = greaterThan (tmpvar_62, vec3(0.0, 0.0, 0.0));
      mediump float tmpvar_66;
      if (tmpvar_65.x) {
        tmpvar_66 = rbmax_61.x;
      } else {
        tmpvar_66 = rbmin_60.x;
      };
      mediump float tmpvar_67;
      if (tmpvar_65.y) {
        tmpvar_67 = rbmax_61.y;
      } else {
        tmpvar_67 = rbmin_60.y;
      };
      mediump float tmpvar_68;
      if (tmpvar_65.z) {
        tmpvar_68 = rbmax_61.z;
      } else {
        tmpvar_68 = rbmin_60.z;
      };
      worldPos_59 = (tmpvar_3 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_58 = (worldPos_59 + (tmpvar_62 * min (
        min (tmpvar_66, tmpvar_67)
      , tmpvar_68)));
    };
    tmpvar_39 = worldRefl_58;
    mediump vec4 hdr_69;
    hdr_69 = tmpvar_26;
    mediump vec4 tmpvar_70;
    tmpvar_70.xyz = worldRefl_58;
    tmpvar_70.w = ((tmpvar_29 * (1.7 - 
      (0.7 * tmpvar_29)
    )) * 6.0);
    lowp vec4 tmpvar_71;
    tmpvar_71 = impl_low_textureCubeLodEXT (unity_SpecCube1, worldRefl_58, tmpvar_70.w);
    mediump vec4 tmpvar_72;
    tmpvar_72 = tmpvar_71;
    mediump vec3 tmpvar_73;
    tmpvar_73 = ((hdr_69.x * (
      (hdr_69.w * (tmpvar_72.w - 1.0))
     + 1.0)) * tmpvar_72.xyz);
    highp vec3 tmpvar_74;
    tmpvar_74 = mix (tmpvar_73, tmpvar_57, unity_SpecCube0_BoxMin.www);
    specular_41 = tmpvar_74;
  } else {
    specular_41 = tmpvar_57;
  };
  tmpvar_36 = (specular_41 * occlusion_24);
  highp vec3 viewDir_75;
  viewDir_75 = -(tmpvar_12);
  mediump vec3 color_76;
  mediump float surfaceReduction_77;
  highp float specularTerm_78;
  mediump float diffuseTerm_79;
  mediump float nv_80;
  highp float tmpvar_81;
  highp float smoothness_82;
  smoothness_82 = tmpvar_6;
  tmpvar_81 = (1.0 - smoothness_82);
  highp vec3 tmpvar_83;
  highp vec3 inVec_84;
  inVec_84 = (_WorldSpaceLightPos0.xyz + viewDir_75);
  tmpvar_83 = (inVec_84 * inversesqrt(max (0.001, 
    dot (inVec_84, inVec_84)
  )));
  highp float tmpvar_85;
  tmpvar_85 = abs(dot (tmpvar_11, viewDir_75));
  nv_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (tmpvar_11, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  highp float tmpvar_87;
  tmpvar_87 = clamp (dot (tmpvar_11, tmpvar_83), 0.0, 1.0);
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_83), 0.0, 1.0);
  tmpvar_88 = tmpvar_89;
  mediump float tmpvar_90;
  mediump float NdotL_91;
  NdotL_91 = tmpvar_86;
  mediump float perceptualRoughness_92;
  perceptualRoughness_92 = tmpvar_81;
  mediump float tmpvar_93;
  tmpvar_93 = (0.5 + ((2.0 * tmpvar_88) * (tmpvar_88 * perceptualRoughness_92)));
  mediump float x_94;
  x_94 = (1.0 - NdotL_91);
  mediump float x_95;
  x_95 = (1.0 - nv_80);
  tmpvar_90 = ((1.0 + (
    (tmpvar_93 - 1.0)
   * 
    ((x_94 * x_94) * ((x_94 * x_94) * x_94))
  )) * (1.0 + (
    (tmpvar_93 - 1.0)
   * 
    ((x_95 * x_95) * ((x_95 * x_95) * x_95))
  )));
  highp float tmpvar_96;
  tmpvar_96 = (tmpvar_90 * tmpvar_86);
  diffuseTerm_79 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = max ((tmpvar_81 * tmpvar_81), 0.002);
  highp float NdotV_98;
  NdotV_98 = nv_80;
  highp float tmpvar_99;
  tmpvar_99 = (tmpvar_97 * tmpvar_97);
  highp float tmpvar_100;
  tmpvar_100 = (((
    (tmpvar_87 * tmpvar_99)
   - tmpvar_87) * tmpvar_87) + 1.0);
  highp float tmpvar_101;
  tmpvar_101 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_86 * (
        (NdotV_98 * (1.0 - tmpvar_97))
       + tmpvar_97)) + (NdotV_98 * (
        (tmpvar_86 * (1.0 - tmpvar_97))
       + tmpvar_97))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_99)
     / 
      ((tmpvar_100 * tmpvar_100) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_86));
  specularTerm_78 = tmpvar_101;
  surfaceReduction_77 = (1.0 - ((0.28 * tmpvar_97) * tmpvar_81));
  bvec3 tmpvar_102;
  tmpvar_102 = bvec3(tmpvar_9);
  bool tmpvar_103;
  tmpvar_103 = any(tmpvar_102);
  highp float tmpvar_104;
  if (tmpvar_103) {
    tmpvar_104 = 1.0;
  } else {
    tmpvar_104 = 0.0;
  };
  specularTerm_78 = (tmpvar_101 * tmpvar_104);
  mediump vec3 tmpvar_105;
  mediump float x_106;
  x_106 = (1.0 - tmpvar_88);
  tmpvar_105 = (tmpvar_9 + ((1.0 - tmpvar_9) * (
    (x_106 * x_106)
   * 
    ((x_106 * x_106) * x_106)
  )));
  mediump float x_107;
  x_107 = (1.0 - nv_80);
  mediump vec3 tmpvar_108;
  tmpvar_108 = mix (tmpvar_9, vec3(clamp ((mg_5.y + 
    (1.0 - tmpvar_10)
  ), 0.0, 1.0)), vec3(((x_107 * x_107) * (
    (x_107 * x_107)
   * x_107))));
  highp vec3 tmpvar_109;
  tmpvar_109 = (((tmpvar_8 * 
    (tmpvar_35 + (tmpvar_34 * diffuseTerm_79))
  ) + (
    (specularTerm_78 * tmpvar_34)
   * tmpvar_105)) + ((surfaceReduction_77 * tmpvar_36) * tmpvar_108));
  color_76 = tmpvar_109;
  mediump vec4 tmpvar_110;
  tmpvar_110.w = 1.0;
  tmpvar_110.xyz = color_76;
  c_1.w = tmpvar_110.w;
  c_1.xyz = color_76;
  mediump vec4 xlat_varoutput_111;
  xlat_varoutput_111.xyz = c_1.xyz;
  xlat_varoutput_111.w = 1.0;
  gl_FragData[0] = xlat_varoutput_111;
}


#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD4.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = inversesqrt(u_xlat3);
    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat4;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat3 * u_xlat1;
    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_6.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_6.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_6.x);
    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp samplerCube unity_SpecCube1;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp float u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
lowp vec4 u_xlat10_9;
vec3 u_xlat10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_11;
bvec3 u_xlatb12;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec3 u_xlat15;
vec3 u_xlat18;
mediump vec3 u_xlat16_18;
lowp float u_xlat10_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
mediump vec3 u_xlat16_22;
float u_xlat28;
float u_xlat29;
float u_xlat42;
bool u_xlatb42;
float u_xlat43;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
mediump float u_xlat16_49;
mediump float u_xlat16_50;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat18.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat18.x = dot(u_xlat18.xyz, u_xlat18.xyz);
    u_xlat18.x = sqrt(u_xlat18.x);
    u_xlat18.x = (-u_xlat4.x) + u_xlat18.x;
    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat18.x + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_18 = texture(_ShadowMapTexture, u_xlat18.xy).x;
    u_xlat16_45 = u_xlat4.x + u_xlat10_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_45 = min(max(u_xlat16_45, 0.0), 1.0);
#else
    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);
#endif
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;
    u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;
    u_xlat4.x = (-_Glossiness) + 1.0;
    u_xlat16_20.x = dot(u_xlat15.xyz, u_xlat0.xyz);
    u_xlat16_20.x = u_xlat16_20.x + u_xlat16_20.x;
    u_xlat16_20.xyz = u_xlat0.xyz * (-u_xlat16_20.xxx) + u_xlat15.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_45) * _LightColor0.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_18.xyz = log2(u_xlat16_8.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(0.0<unity_SpecCube0_ProbePosition.w);
#else
    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
#endif
    if(u_xlatb42){
        u_xlat16_45 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
        u_xlat16_45 = inversesqrt(u_xlat16_45);
        u_xlat16_8.xyz = vec3(u_xlat16_45) * u_xlat16_20.xyz;
        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat16_8.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat16_8.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyzx).xyz;
        u_xlat16_11.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat9.x;
        u_xlat16_11.y = (u_xlatb10.y) ? u_xlat5.y : u_xlat9.y;
        u_xlat16_11.z = (u_xlatb10.z) ? u_xlat5.z : u_xlat9.z;
        u_xlat16_45 = min(u_xlat16_11.y, u_xlat16_11.x);
        u_xlat16_45 = min(u_xlat16_11.z, u_xlat16_45);
        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat5.xyz = u_xlat16_8.xyz * vec3(u_xlat16_45) + u_xlat5.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat16_20.xyz;
    //ENDIF
    }
    u_xlat16_45 = (-u_xlat4.x) * 0.699999988 + 1.70000005;
    u_xlat16_45 = u_xlat16_45 * u_xlat4.x;
    u_xlat16_45 = u_xlat16_45 * 6.0;
    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_45);
    u_xlat16_49 = u_xlat10_5.w + -1.0;
    u_xlat16_49 = unity_SpecCube0_HDR.w * u_xlat16_49 + 1.0;
    u_xlat16_49 = u_xlat16_49 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(u_xlat16_49);
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_SpecCube0_BoxMin.w<0.999989986);
#else
    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
#endif
    if(u_xlatb42){
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(0.0<unity_SpecCube1_ProbePosition.w);
#else
        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
#endif
        if(u_xlatb42){
            u_xlat16_50 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
            u_xlat16_50 = inversesqrt(u_xlat16_50);
            u_xlat16_11.xyz = u_xlat16_20.xyz * vec3(u_xlat16_50);
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat16_11.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat16_11.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_11.xyzx).xyz;
            u_xlat16_13.x = (u_xlatb12.x) ? u_xlat9.x : u_xlat10.x;
            u_xlat16_13.y = (u_xlatb12.y) ? u_xlat9.y : u_xlat10.y;
            u_xlat16_13.z = (u_xlatb12.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat16_50 = min(u_xlat16_13.y, u_xlat16_13.x);
            u_xlat16_50 = min(u_xlat16_13.z, u_xlat16_50);
            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat20.xyz = u_xlat16_11.xyz * vec3(u_xlat16_50) + u_xlat9.xyz;
            u_xlat16_20.xyz = u_xlat20.xyz;
        //ENDIF
        }
        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat16_20.xyz, u_xlat16_45);
        u_xlat16_45 = u_xlat10_9.w + -1.0;
        u_xlat16_45 = unity_SpecCube1_HDR.w * u_xlat16_45 + 1.0;
        u_xlat16_45 = u_xlat16_45 * unity_SpecCube1_HDR.x;
        u_xlat16_20.xyz = u_xlat10_9.xyz * vec3(u_xlat16_45);
        u_xlat16_9.xyz = vec3(u_xlat16_49) * u_xlat10_5.xyz + (-u_xlat16_20.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_9.xyz + u_xlat16_20.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_20.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat9.xyz = vec3(u_xlat42) * u_xlat9.xyz;
    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));
    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_45 = u_xlat14 + u_xlat14;
    u_xlat16_45 = u_xlat14 * u_xlat16_45;
    u_xlat16_45 = u_xlat16_45 * u_xlat4.x + -0.5;
    u_xlat16_49 = (-u_xlat1.x) + 1.0;
    u_xlat16_8.x = u_xlat16_49 * u_xlat16_49;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_8.x;
    u_xlat16_49 = u_xlat16_45 * u_xlat16_49 + 1.0;
    u_xlat16_8.x = -abs(u_xlat42) + 1.0;
    u_xlat16_22.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_22.x;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_8.x + 1.0;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_49;
    u_xlat28 = u_xlat1.x * u_xlat16_45;
    u_xlat15.x = u_xlat4.x * u_xlat4.x;
    u_xlat15.x = max(u_xlat15.x, 0.00200000009);
    u_xlat29 = (-u_xlat15.x) + 1.0;
    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;
    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;
    u_xlat42 = abs(u_xlat42) * u_xlat29;
    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat29 = u_xlat15.x * u_xlat15.x;
    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);
    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;
    u_xlat29 = u_xlat29 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat29 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat42;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat42 = u_xlat15.x * u_xlat4.x;
    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;
    u_xlat16_45 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_45!=0.0);
#else
    u_xlatb1 = u_xlat16_45!=0.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat16_44 = (-u_xlat16_44) + 1.0;
    u_xlat16_44 = u_xlat16_44 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
    u_xlat16_22.xyz = vec3(u_xlat28) * u_xlat16_7.xyz;
    u_xlat16_22.xyz = u_xlat16_18.xyz * u_xlat16_6.xxx + u_xlat16_22.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_45 = (-u_xlat14) + 1.0;
    u_xlat16_6.x = u_xlat16_45 * u_xlat16_45;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_6.x;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_22.xyz + u_xlat0.xyz;
    u_xlat16_3.xyz = u_xlat16_20.xyz * vec3(u_xlat42);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);
    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles":
// Stats: 52 math, 5 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5.w = tmpvar_8.x;
  tmpvar_6.w = tmpvar_8.y;
  tmpvar_7.w = tmpvar_8.z;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  tmpvar_13 = tmpvar_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_25 + (tmpvar_39.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat16;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
void main()
{
    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat16_1 = u_xlat0.x * u_xlat16_1;
    u_xlat16_1 = u_xlat16_1 * 6.0;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;
    u_xlat16_9.xyz = u_xlat2.xyz * (-u_xlat16_9.xxx) + vs_TEXCOORD1.xyz;
    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_1);
    u_xlat16_3.x = u_xlat10_1.w + -1.0;
    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
    u_xlat10_0.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);
    u_xlat16 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat4.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.y = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.yw).w;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat16_27 = (-u_xlat16) + 1.0;
    u_xlat16_8 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_8 = u_xlat16_27 * u_xlat16_8;
    u_xlat16_8 = u_xlat16_27 * u_xlat16_8;
    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_29 = (-u_xlat16_27) + 1.0;
    u_xlat16_29 = u_xlat16_29 + _Glossiness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_7.xyz = vec3(u_xlat16_29) + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_8) * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_2.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;
    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles":
// No shader variant for this keyword set. The closest match will be used instead.

 }


 // Stats for Vertex shader:
 //         gles: 50 avg math (28..107), 3 avg texture (2..5), 0 avg branch (0..1)
 Pass {
  Name "FORWARD_DELTA"
  Tags { "LIGHTMODE"="FORWARDADD" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite Off
  Blend [_SrcBlend] One
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords set in this variant: POINT 
-- Vertex shader for "gles":
// Stats: 32 math, 3 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  mediump vec3 tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_18 = tmpvar_19;
  lightDir_4 = tmpvar_18;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = xlv_TEXCOORD5;
  lightCoord_2 = (unity_WorldToLight * tmpvar_8).xyz;
  highp float tmpvar_9;
  tmpvar_9 = texture2D (_LightTexture0, vec2(dot (lightCoord_2, lightCoord_2))).w;
  atten_1 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_11;
  lightDir_11 = tmpvar_10;
  mediump float atten_12;
  atten_12 = atten_1;
  mediump vec3 tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_13 = _LightColor0.xyz;
  highp vec3 n_15;
  n_15 = lightDir_11;
  tmpvar_14 = n_15;
  tmpvar_13 = (tmpvar_13 * atten_12);
  highp vec3 viewDir_16;
  viewDir_16 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_17;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (dot (tmpvar_7, tmpvar_14), 0.0, 1.0);
  tmpvar_18 = tmpvar_19;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (dot (tmpvar_7, viewDir_16), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22.x = dot ((viewDir_16 - (2.0 * 
    (dot (tmpvar_7, viewDir_16) * tmpvar_7)
  )), tmpvar_14);
  tmpvar_22.y = (1.0 - tmpvar_20);
  highp vec2 tmpvar_23;
  tmpvar_23 = ((tmpvar_22 * tmpvar_22) * (tmpvar_22 * tmpvar_22));
  rlPow4AndFresnelTerm_17 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = rlPow4AndFresnelTerm_17.x;
  mediump float specular_25;
  highp float smoothness_26;
  smoothness_26 = tmpvar_5;
  highp vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = (1.0 - smoothness_26);
  highp float tmpvar_28;
  tmpvar_28 = (texture2D (unity_NHxRoughness, tmpvar_27).w * 16.0);
  specular_25 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_25 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * (tmpvar_13 * tmpvar_18));
  mediump vec4 xlat_varoutput_30;
  xlat_varoutput_30.xyz = tmpvar_29.xyz;
  xlat_varoutput_30.w = 1.0;
  gl_FragData[0] = xlat_varoutput_30;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat15;
mediump float u_xlat16_18;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat15 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat15 = u_xlat15 + u_xlat15;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat15 * u_xlat15;
    u_xlat1.x = u_xlat5.x * u_xlat5.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat5.x = texture(unity_NHxRoughness, u_xlat1.xy).w;
    u_xlat5.x = u_xlat5.x * 16.0;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;
    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;
    u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = texture(_LightTexture0, u_xlat5.xx).w;
    u_xlat16_4.xyz = u_xlat5.xxx * _LightColor0.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// Stats: 28 math, 2 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  tmpvar_13 = tmpvar_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump float tmpvar_3;
  tmpvar_3 = mg_2.y;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_1.xyz);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_7;
  lightDir_7 = tmpvar_6;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  highp vec3 viewDir_9;
  viewDir_9 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_5, lightDir_7), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  mediump float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (dot (tmpvar_5, viewDir_9), 0.0, 1.0);
  tmpvar_13 = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = dot ((viewDir_9 - (2.0 * 
    (dot (tmpvar_5, viewDir_9) * tmpvar_5)
  )), lightDir_7);
  tmpvar_15.y = (1.0 - tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * tmpvar_15) * (tmpvar_15 * tmpvar_15));
  rlPow4AndFresnelTerm_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = rlPow4AndFresnelTerm_10.x;
  mediump float specular_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_3;
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_17;
  tmpvar_20.y = (1.0 - smoothness_19);
  highp float tmpvar_21;
  tmpvar_21 = (texture2D (unity_NHxRoughness, tmpvar_20).w * 16.0);
  specular_18 = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = (((tmpvar_4 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_18 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic))
  )) * (tmpvar_8 * tmpvar_11));
  mediump vec4 xlat_varoutput_23;
  xlat_varoutput_23.xyz = tmpvar_22.xyz;
  xlat_varoutput_23.w = 1.0;
  gl_FragData[0] = xlat_varoutput_23;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform lowp sampler2D _MainTex;
uniform highp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_5;
float u_xlat15;
mediump float u_xlat16_18;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat15 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat15 = u_xlat15 + u_xlat15;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.x = u_xlat15 * u_xlat15;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.y = (-_Glossiness) + 1.0;
    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).w;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = _Color.xyz * u_xlat10_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_5.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_18) + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// Stats: 38 math, 4 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  mediump vec3 tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_18 = tmpvar_19;
  lightDir_4 = tmpvar_18;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec4 lightCoord_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = xlv_TEXCOORD5;
  lightCoord_2 = (unity_WorldToLight * tmpvar_8);
  lowp float tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_LightTexture0, ((lightCoord_2.xy / lightCoord_2.w) + 0.5));
  tmpvar_9 = tmpvar_10.w;
  lowp float tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_LightTextureB0, vec2(dot (lightCoord_2.xyz, lightCoord_2.xyz)));
  tmpvar_11 = tmpvar_12.w;
  highp float tmpvar_13;
  tmpvar_13 = ((float(
    (lightCoord_2.z > 0.0)
  ) * tmpvar_9) * tmpvar_11);
  atten_1 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = xlv_TEXCOORD2.w;
  tmpvar_14.y = xlv_TEXCOORD2_1.w;
  tmpvar_14.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_15;
  lightDir_15 = tmpvar_14;
  mediump float atten_16;
  atten_16 = atten_1;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_17 = _LightColor0.xyz;
  highp vec3 n_19;
  n_19 = lightDir_15;
  tmpvar_18 = n_19;
  tmpvar_17 = (tmpvar_17 * atten_16);
  highp vec3 viewDir_20;
  viewDir_20 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_21;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (dot (tmpvar_7, tmpvar_18), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  mediump float tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (dot (tmpvar_7, viewDir_20), 0.0, 1.0);
  tmpvar_24 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26.x = dot ((viewDir_20 - (2.0 * 
    (dot (tmpvar_7, viewDir_20) * tmpvar_7)
  )), tmpvar_18);
  tmpvar_26.y = (1.0 - tmpvar_24);
  highp vec2 tmpvar_27;
  tmpvar_27 = ((tmpvar_26 * tmpvar_26) * (tmpvar_26 * tmpvar_26));
  rlPow4AndFresnelTerm_21 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = rlPow4AndFresnelTerm_21.x;
  mediump float specular_29;
  highp float smoothness_30;
  smoothness_30 = tmpvar_5;
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_28;
  tmpvar_31.y = (1.0 - smoothness_30);
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (unity_NHxRoughness, tmpvar_31).w * 16.0);
  specular_29 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_29 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * (tmpvar_17 * tmpvar_22));
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb10;
float u_xlat15;
mediump float u_xlat16_18;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat15 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat15 = u_xlat15 + u_xlat15;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat15 * u_xlat15;
    u_xlat1.x = u_xlat5.x * u_xlat5.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat5.x = texture(unity_NHxRoughness, u_xlat1.xy).w;
    u_xlat5.x = u_xlat5.x * 16.0;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;
    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;
    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat5.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.x = texture(_LightTexture0, u_xlat5.xy).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.0<u_xlat1.z);
#else
    u_xlatb10 = 0.0<u_xlat1.z;
#endif
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat16_18 = (u_xlatb10) ? 1.0 : 0.0;
    u_xlat16_18 = u_xlat5.x * u_xlat16_18;
    u_xlat16_18 = u_xlat15 * u_xlat16_18;
    u_xlat16_4.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: POINT_COOKIE 
-- Vertex shader for "gles":
// Stats: 33 math, 4 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  mediump vec3 tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_18 = tmpvar_19;
  lightDir_4 = tmpvar_18;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = xlv_TEXCOORD5;
  lightCoord_2 = (unity_WorldToLight * tmpvar_8).xyz;
  highp float tmpvar_9;
  tmpvar_9 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_2, lightCoord_2))).w * textureCube (_LightTexture0, lightCoord_2).w);
  atten_1 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_11;
  lightDir_11 = tmpvar_10;
  mediump float atten_12;
  atten_12 = atten_1;
  mediump vec3 tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_13 = _LightColor0.xyz;
  highp vec3 n_15;
  n_15 = lightDir_11;
  tmpvar_14 = n_15;
  tmpvar_13 = (tmpvar_13 * atten_12);
  highp vec3 viewDir_16;
  viewDir_16 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_17;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (dot (tmpvar_7, tmpvar_14), 0.0, 1.0);
  tmpvar_18 = tmpvar_19;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (dot (tmpvar_7, viewDir_16), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22.x = dot ((viewDir_16 - (2.0 * 
    (dot (tmpvar_7, viewDir_16) * tmpvar_7)
  )), tmpvar_14);
  tmpvar_22.y = (1.0 - tmpvar_20);
  highp vec2 tmpvar_23;
  tmpvar_23 = ((tmpvar_22 * tmpvar_22) * (tmpvar_22 * tmpvar_22));
  rlPow4AndFresnelTerm_17 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = rlPow4AndFresnelTerm_17.x;
  mediump float specular_25;
  highp float smoothness_26;
  smoothness_26 = tmpvar_5;
  highp vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = (1.0 - smoothness_26);
  highp float tmpvar_28;
  tmpvar_28 = (texture2D (unity_NHxRoughness, tmpvar_27).w * 16.0);
  specular_25 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_25 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * (tmpvar_13 * tmpvar_18));
  mediump vec4 xlat_varoutput_30;
  xlat_varoutput_30.xyz = tmpvar_29.xyz;
  xlat_varoutput_30.w = 1.0;
  gl_FragData[0] = xlat_varoutput_30;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform highp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat10;
float u_xlat15;
mediump float u_xlat16_18;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat15 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat15 = u_xlat15 + u_xlat15;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat15 * u_xlat15;
    u_xlat1.x = u_xlat5.x * u_xlat5.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat5.x = texture(unity_NHxRoughness, u_xlat1.xy).w;
    u_xlat5.x = u_xlat5.x * 16.0;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;
    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;
    u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = texture(_LightTexture0, u_xlat5.xyz).w;
    u_xlat10 = texture(_LightTextureB0, u_xlat1.xx).w;
    u_xlat5.x = u_xlat5.x * u_xlat10;
    u_xlat16_4.xyz = u_xlat5.xxx * _LightColor0.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles":
// Stats: 31 math, 3 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  tmpvar_13 = tmpvar_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = xlv_TEXCOORD5;
  highp float tmpvar_8;
  tmpvar_8 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_7).xy).w;
  atten_1 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_10;
  lightDir_10 = tmpvar_9;
  mediump float atten_11;
  atten_11 = atten_1;
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  tmpvar_12 = (tmpvar_12 * atten_11);
  highp vec3 viewDir_13;
  viewDir_13 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_14;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (dot (tmpvar_6, lightDir_10), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (tmpvar_6, viewDir_13), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19.x = dot ((viewDir_13 - (2.0 * 
    (dot (tmpvar_6, viewDir_13) * tmpvar_6)
  )), lightDir_10);
  tmpvar_19.y = (1.0 - tmpvar_17);
  highp vec2 tmpvar_20;
  tmpvar_20 = ((tmpvar_19 * tmpvar_19) * (tmpvar_19 * tmpvar_19));
  rlPow4AndFresnelTerm_14 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = rlPow4AndFresnelTerm_14.x;
  mediump float specular_22;
  highp float smoothness_23;
  smoothness_23 = tmpvar_4;
  highp vec2 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = (1.0 - smoothness_23);
  highp float tmpvar_25;
  tmpvar_25 = (texture2D (unity_NHxRoughness, tmpvar_24).w * 16.0);
  specular_22 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = (((tmpvar_5 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_22 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic))
  )) * (tmpvar_12 * tmpvar_15));
  mediump vec4 xlat_varoutput_27;
  xlat_varoutput_27.xyz = tmpvar_26.xyz;
  xlat_varoutput_27.w = 1.0;
  gl_FragData[0] = xlat_varoutput_27;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
float u_xlat15;
mediump float u_xlat16_18;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat15 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat15 = u_xlat15 + u_xlat15;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat15 * u_xlat15;
    u_xlat1.x = u_xlat5.x * u_xlat5.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat5.x = texture(unity_NHxRoughness, u_xlat1.xy).w;
    u_xlat5.x = u_xlat5.x * 16.0;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;
    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;
    u_xlat5.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat5.xy;
    u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat5.xy;
    u_xlat5.xy = u_xlat5.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat5.x = texture(_LightTexture0, u_xlat5.xy).w;
    u_xlat16_4.xyz = u_xlat5.xxx * _LightColor0.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: SPOT SHADOWS_DEPTH 
-- Vertex shader for "gles":
// Stats: 45 math, 5 textures, 1 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_10.xyz - _WorldSpaceCameraPos));
  tmpvar_15 = tmpvar_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_19 = tmpvar_20;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform highp sampler2D _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec4 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_11);
  mediump float realtimeShadowAttenuation_12;
  realtimeShadowAttenuation_12 = 1.0;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_WorldToShadow[0] * tmpvar_13);
  lowp float tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = texture2DProj (_ShadowMapTexture, tmpvar_14);
  mediump float tmpvar_17;
  if ((tmpvar_16.x < (tmpvar_14.z / tmpvar_14.w))) {
    tmpvar_17 = _LightShadowData.x;
  } else {
    tmpvar_17 = 1.0;
  };
  tmpvar_15 = tmpvar_17;
  realtimeShadowAttenuation_12 = tmpvar_15;
  shadow_2 = realtimeShadowAttenuation_12;
  lowp float tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((lightCoord_3.xy / lightCoord_3.w) + 0.5));
  tmpvar_18 = tmpvar_19.w;
  lowp float tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(dot (lightCoord_3.xyz, lightCoord_3.xyz)));
  tmpvar_20 = tmpvar_21.w;
  highp float tmpvar_22;
  tmpvar_22 = (((
    float((lightCoord_3.z > 0.0))
   * tmpvar_18) * tmpvar_20) * shadow_2);
  atten_1 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23.x = xlv_TEXCOORD2.w;
  tmpvar_23.y = xlv_TEXCOORD2_1.w;
  tmpvar_23.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_24;
  lightDir_24 = tmpvar_23;
  mediump float atten_25;
  atten_25 = atten_1;
  mediump vec3 tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_26 = _LightColor0.xyz;
  highp vec3 n_28;
  n_28 = lightDir_24;
  tmpvar_27 = n_28;
  tmpvar_26 = (tmpvar_26 * atten_25);
  highp vec3 viewDir_29;
  viewDir_29 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_30;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (dot (tmpvar_10, tmpvar_27), 0.0, 1.0);
  tmpvar_31 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (dot (tmpvar_10, viewDir_29), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35.x = dot ((viewDir_29 - (2.0 * 
    (dot (tmpvar_10, viewDir_29) * tmpvar_10)
  )), tmpvar_27);
  tmpvar_35.y = (1.0 - tmpvar_33);
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35 * tmpvar_35) * (tmpvar_35 * tmpvar_35));
  rlPow4AndFresnelTerm_30 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = rlPow4AndFresnelTerm_30.x;
  mediump float specular_38;
  highp float smoothness_39;
  smoothness_39 = tmpvar_6;
  highp vec2 tmpvar_40;
  tmpvar_40.x = tmpvar_37;
  tmpvar_40.y = (1.0 - smoothness_39);
  highp float tmpvar_41;
  tmpvar_41 = (texture2D (unity_NHxRoughness, tmpvar_40).w * 16.0);
  specular_38 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = ((tmpvar_8 + (specular_38 * tmpvar_9)) * (tmpvar_26 * tmpvar_31));
  mediump vec4 xlat_varoutput_43;
  xlat_varoutput_43.xyz = tmpvar_42.xyz;
  xlat_varoutput_43.w = 1.0;
  gl_FragData[0] = xlat_varoutput_43;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_4;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
    u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat0.z);
#else
    u_xlatb1 = 0.0<u_xlat0.z;
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).w;
    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_4.x = (-_LightShadowData.x) + 1.0;
    u_xlat16_0 = u_xlat10_0 * u_xlat16_4.x + _LightShadowData.x;
    u_xlat16_2.x = u_xlat16_0 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = vec3(u_xlat12) * u_xlat16_2.xyz;
    u_xlat12 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.y = (-_Glossiness) + 1.0;
    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).w;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
    u_xlat16_14 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_14) + u_xlat16_3.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN 
-- Vertex shader for "gles":
// Stats: 104 math, 2 textures, 1 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_9.zw;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_20.x;
  tmpvar_6.w = tmpvar_20.y;
  tmpvar_7.w = tmpvar_20.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
  xlv_TEXCOORD6 = o_17;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float atten_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  tmpvar_6 = (tmpvar_5 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump float realtimeShadowAttenuation_9;
  highp vec4 v_10;
  v_10.x = unity_MatrixV[0].z;
  v_10.y = unity_MatrixV[1].z;
  v_10.z = unity_MatrixV[2].z;
  v_10.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_10.xyz), sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_12 = tmpvar_13;
  lowp float tmpvar_14;
  tmpvar_14 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_9 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = clamp ((realtimeShadowAttenuation_9 + tmpvar_12), 0.0, 1.0);
  atten_1 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = xlv_TEXCOORD2.w;
  tmpvar_16.y = xlv_TEXCOORD2_1.w;
  tmpvar_16.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_17;
  lightDir_17 = tmpvar_16;
  mediump float atten_18;
  atten_18 = atten_1;
  mediump vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_19 = (tmpvar_19 * atten_18);
  highp vec3 viewDir_20;
  viewDir_20 = -(normalize(xlv_TEXCOORD1));
  mediump vec3 color_21;
  highp float specularTerm_22;
  mediump float diffuseTerm_23;
  mediump float nv_24;
  highp float tmpvar_25;
  highp float smoothness_26;
  smoothness_26 = tmpvar_4;
  tmpvar_25 = (1.0 - smoothness_26);
  highp vec3 tmpvar_27;
  highp vec3 inVec_28;
  inVec_28 = (lightDir_17 + viewDir_20);
  tmpvar_27 = (inVec_28 * inversesqrt(max (0.001, 
    dot (inVec_28, inVec_28)
  )));
  highp float tmpvar_29;
  tmpvar_29 = abs(dot (tmpvar_8, viewDir_20));
  nv_24 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, lightDir_17), 0.0, 1.0);
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_8, tmpvar_27), 0.0, 1.0);
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (dot (lightDir_17, tmpvar_27), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  mediump float tmpvar_34;
  mediump float NdotL_35;
  NdotL_35 = tmpvar_30;
  mediump float perceptualRoughness_36;
  perceptualRoughness_36 = tmpvar_25;
  mediump float tmpvar_37;
  tmpvar_37 = (0.5 + ((2.0 * tmpvar_32) * (tmpvar_32 * perceptualRoughness_36)));
  mediump float x_38;
  x_38 = (1.0 - NdotL_35);
  mediump float x_39;
  x_39 = (1.0 - nv_24);
  tmpvar_34 = ((1.0 + (
    (tmpvar_37 - 1.0)
   * 
    ((x_38 * x_38) * ((x_38 * x_38) * x_38))
  )) * (1.0 + (
    (tmpvar_37 - 1.0)
   * 
    ((x_39 * x_39) * ((x_39 * x_39) * x_39))
  )));
  highp float tmpvar_40;
  tmpvar_40 = (tmpvar_34 * tmpvar_30);
  diffuseTerm_23 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = max ((tmpvar_25 * tmpvar_25), 0.002);
  highp float NdotV_42;
  NdotV_42 = nv_24;
  highp float tmpvar_43;
  tmpvar_43 = (tmpvar_41 * tmpvar_41);
  highp float tmpvar_44;
  tmpvar_44 = (((
    (tmpvar_31 * tmpvar_43)
   - tmpvar_31) * tmpvar_31) + 1.0);
  highp float tmpvar_45;
  tmpvar_45 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_30 * (
        (NdotV_42 * (1.0 - tmpvar_41))
       + tmpvar_41)) + (NdotV_42 * (
        (tmpvar_30 * (1.0 - tmpvar_41))
       + tmpvar_41))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_43)
     / 
      ((tmpvar_44 * tmpvar_44) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_30));
  specularTerm_22 = tmpvar_45;
  bvec3 tmpvar_46;
  tmpvar_46 = bvec3(tmpvar_7);
  bool tmpvar_47;
  tmpvar_47 = any(tmpvar_46);
  highp float tmpvar_48;
  if (tmpvar_47) {
    tmpvar_48 = 1.0;
  } else {
    tmpvar_48 = 0.0;
  };
  specularTerm_22 = (tmpvar_45 * tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump float x_50;
  x_50 = (1.0 - tmpvar_32);
  tmpvar_49 = (tmpvar_7 + ((1.0 - tmpvar_7) * (
    (x_50 * x_50)
   * 
    ((x_50 * x_50) * x_50)
  )));
  highp vec3 tmpvar_51;
  tmpvar_51 = ((tmpvar_6 * (tmpvar_19 * diffuseTerm_23)) + ((specularTerm_22 * tmpvar_19) * tmpvar_49));
  color_21 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = color_21;
  mediump vec4 xlat_varoutput_53;
  xlat_varoutput_53.xyz = tmpvar_52.xyz;
  xlat_varoutput_53.w = 1.0;
  gl_FragData[0] = xlat_varoutput_53;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.w = 0.0;
    vs_TEXCOORD2 = u_xlat2.wwwx;
    vs_TEXCOORD3 = u_xlat2.wwwy;
    vs_TEXCOORD4.w = u_xlat2.z;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp float u_xlat10_7;
float u_xlat8;
mediump float u_xlat16_12;
float u_xlat14;
float u_xlat15;
mediump float u_xlat16_19;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_7 = texture(_ShadowMapTexture, u_xlat7.xy).x;
    u_xlat16_2.x = u_xlat0.x + u_xlat10_7;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat4.xyz));
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = max(u_xlat22, 0.00100000005);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;
    u_xlat22 = dot(u_xlat0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat14 = (-_Glossiness) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = max(u_xlat1.x, 0.00200000009);
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);
    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;
    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat8 = u_xlat8 / u_xlat15;
    u_xlat15 = (-u_xlat1.x) + 1.0;
    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;
    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;
    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;
    u_xlat16_23 = -abs(u_xlat21) + 1.0;
    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat21 = u_xlat8 * u_xlat21;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = max(u_xlat21, 9.99999975e-05);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat0.x * u_xlat21;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_26!=0.0);
#else
    u_xlatb22 = u_xlat16_26!=0.0;
#endif
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat21);
    u_xlat16_26 = (-u_xlat7.x) + 1.0;
    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;
    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat7.x + u_xlat7.x;
    u_xlat16_5.x = u_xlat7.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat14 + -0.5;
    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;
    u_xlat16_12 = (-u_xlat0.x) + 1.0;
    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_23;
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23);
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL_COOKIE SHADOWS_SCREEN 
-- Vertex shader for "gles":
// Stats: 107 math, 3 textures, 1 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_9.zw;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_20.x;
  tmpvar_6.w = tmpvar_20.y;
  tmpvar_7.w = tmpvar_20.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
  xlv_TEXCOORD6 = o_17;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD5;
  mediump float realtimeShadowAttenuation_11;
  highp vec4 v_12;
  v_12.x = unity_MatrixV[0].z;
  v_12.y = unity_MatrixV[1].z;
  v_12.z = unity_MatrixV[2].z;
  v_12.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_14 = tmpvar_15;
  lowp float tmpvar_16;
  tmpvar_16 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  realtimeShadowAttenuation_11 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = clamp ((realtimeShadowAttenuation_11 + tmpvar_14), 0.0, 1.0);
  shadow_2 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_10).xy).w * shadow_2);
  atten_1 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19.x = xlv_TEXCOORD2.w;
  tmpvar_19.y = xlv_TEXCOORD2_1.w;
  tmpvar_19.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_20;
  lightDir_20 = tmpvar_19;
  mediump float atten_21;
  atten_21 = atten_1;
  mediump vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_22 = (tmpvar_22 * atten_21);
  highp vec3 viewDir_23;
  viewDir_23 = -(normalize(xlv_TEXCOORD1));
  mediump vec3 color_24;
  highp float specularTerm_25;
  mediump float diffuseTerm_26;
  mediump float nv_27;
  highp float tmpvar_28;
  highp float smoothness_29;
  smoothness_29 = tmpvar_5;
  tmpvar_28 = (1.0 - smoothness_29);
  highp vec3 tmpvar_30;
  highp vec3 inVec_31;
  inVec_31 = (lightDir_20 + viewDir_23);
  tmpvar_30 = (inVec_31 * inversesqrt(max (0.001, 
    dot (inVec_31, inVec_31)
  )));
  highp float tmpvar_32;
  tmpvar_32 = abs(dot (tmpvar_9, viewDir_23));
  nv_27 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (dot (tmpvar_9, lightDir_20), 0.0, 1.0);
  highp float tmpvar_34;
  tmpvar_34 = clamp (dot (tmpvar_9, tmpvar_30), 0.0, 1.0);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (dot (lightDir_20, tmpvar_30), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float NdotL_38;
  NdotL_38 = tmpvar_33;
  mediump float perceptualRoughness_39;
  perceptualRoughness_39 = tmpvar_28;
  mediump float tmpvar_40;
  tmpvar_40 = (0.5 + ((2.0 * tmpvar_35) * (tmpvar_35 * perceptualRoughness_39)));
  mediump float x_41;
  x_41 = (1.0 - NdotL_38);
  mediump float x_42;
  x_42 = (1.0 - nv_27);
  tmpvar_37 = ((1.0 + (
    (tmpvar_40 - 1.0)
   * 
    ((x_41 * x_41) * ((x_41 * x_41) * x_41))
  )) * (1.0 + (
    (tmpvar_40 - 1.0)
   * 
    ((x_42 * x_42) * ((x_42 * x_42) * x_42))
  )));
  highp float tmpvar_43;
  tmpvar_43 = (tmpvar_37 * tmpvar_33);
  diffuseTerm_26 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = max ((tmpvar_28 * tmpvar_28), 0.002);
  highp float NdotV_45;
  NdotV_45 = nv_27;
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_44 * tmpvar_44);
  highp float tmpvar_47;
  tmpvar_47 = (((
    (tmpvar_34 * tmpvar_46)
   - tmpvar_34) * tmpvar_34) + 1.0);
  highp float tmpvar_48;
  tmpvar_48 = max (0.0, (sqrt(
    max (0.0001, (((0.5 / 
      (((tmpvar_33 * (
        (NdotV_45 * (1.0 - tmpvar_44))
       + tmpvar_44)) + (NdotV_45 * (
        (tmpvar_33 * (1.0 - tmpvar_44))
       + tmpvar_44))) + 1e-05)
    ) * (
      (0.3183099 * tmpvar_46)
     / 
      ((tmpvar_47 * tmpvar_47) + 1e-07)
    )) * 3.141593))
  ) * tmpvar_33));
  specularTerm_25 = tmpvar_48;
  bvec3 tmpvar_49;
  tmpvar_49 = bvec3(tmpvar_8);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  highp float tmpvar_51;
  if (tmpvar_50) {
    tmpvar_51 = 1.0;
  } else {
    tmpvar_51 = 0.0;
  };
  specularTerm_25 = (tmpvar_48 * tmpvar_51);
  mediump vec3 tmpvar_52;
  mediump float x_53;
  x_53 = (1.0 - tmpvar_35);
  tmpvar_52 = (tmpvar_8 + ((1.0 - tmpvar_8) * (
    (x_53 * x_53)
   * 
    ((x_53 * x_53) * x_53)
  )));
  highp vec3 tmpvar_54;
  tmpvar_54 = ((tmpvar_7 * (tmpvar_22 * diffuseTerm_26)) + ((specularTerm_25 * tmpvar_22) * tmpvar_52));
  color_24 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_24;
  mediump vec4 xlat_varoutput_56;
  xlat_varoutput_56.xyz = tmpvar_55.xyz;
  xlat_varoutput_56.w = 1.0;
  gl_FragData[0] = xlat_varoutput_56;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UVSec==0.0);
#else
    u_xlatb1 = _UVSec==0.0;
#endif
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.w = 0.0;
    vs_TEXCOORD2 = u_xlat2.wwwx;
    vs_TEXCOORD3 = u_xlat2.wwwy;
    vs_TEXCOORD4.w = u_xlat2.z;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp float u_xlat10_7;
float u_xlat8;
mediump float u_xlat16_12;
float u_xlat14;
float u_xlat15;
mediump float u_xlat16_19;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_7 = texture(_ShadowMapTexture, u_xlat7.xy).x;
    u_xlat16_2.x = u_xlat0.x + u_xlat10_7;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat4.xyz));
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = max(u_xlat22, 0.00100000005);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;
    u_xlat22 = dot(u_xlat0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat14 = (-_Glossiness) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = max(u_xlat1.x, 0.00200000009);
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);
    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;
    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat8 = u_xlat8 / u_xlat15;
    u_xlat15 = (-u_xlat1.x) + 1.0;
    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;
    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;
    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;
    u_xlat16_23 = -abs(u_xlat21) + 1.0;
    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat21 = u_xlat8 * u_xlat21;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = max(u_xlat21, 9.99999975e-05);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat0.x * u_xlat21;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_26!=0.0);
#else
    u_xlatb22 = u_xlat16_26!=0.0;
#endif
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat21);
    u_xlat16_26 = (-u_xlat7.x) + 1.0;
    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;
    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat7.x + u_xlat7.x;
    u_xlat16_5.x = u_xlat7.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat14 + -0.5;
    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;
    u_xlat16_12 = (-u_xlat0.x) + 1.0;
    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_23;
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23);
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: POINT SHADOWS_CUBE 
-- Vertex shader for "gles":
// Stats: 41 math, 4 textures, 1 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_10.xyz - _WorldSpaceCameraPos));
  tmpvar_15 = tmpvar_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_19 = tmpvar_20;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec3 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_11).xyz;
  highp vec3 vec_12;
  vec_12 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_13;
  highp float mydist_14;
  mydist_14 = ((sqrt(
    dot (vec_12, vec_12)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureCube (_ShadowMapTexture, vec_12);
  highp vec4 vals_16;
  vals_16 = tmpvar_15;
  highp float tmpvar_17;
  tmpvar_17 = dot (vals_16, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_13 = tmpvar_17;
  mediump float tmpvar_18;
  if ((shadowVal_13 < mydist_14)) {
    tmpvar_18 = _LightShadowData.x;
  } else {
    tmpvar_18 = 1.0;
  };
  shadow_2 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTexture0, vec2(dot (lightCoord_3, lightCoord_3))).w * shadow_2);
  atten_1 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20.x = xlv_TEXCOORD2.w;
  tmpvar_20.y = xlv_TEXCOORD2_1.w;
  tmpvar_20.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_21;
  lightDir_21 = tmpvar_20;
  mediump float atten_22;
  atten_22 = atten_1;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_23 = _LightColor0.xyz;
  highp vec3 n_25;
  n_25 = lightDir_21;
  tmpvar_24 = n_25;
  tmpvar_23 = (tmpvar_23 * atten_22);
  highp vec3 viewDir_26;
  viewDir_26 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_10, tmpvar_24), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_10, viewDir_26), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((viewDir_26 - (2.0 * 
    (dot (tmpvar_10, viewDir_26) * tmpvar_10)
  )), tmpvar_24);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_6;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = ((tmpvar_8 + (specular_35 * tmpvar_9)) * (tmpvar_23 * tmpvar_28));
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = tmpvar_39.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
float u_xlat10;
float u_xlat15;
mediump float u_xlat16_18;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat15 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat15 = u_xlat15 + u_xlat15;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat15 * u_xlat15;
    u_xlat1.x = u_xlat5.x * u_xlat5.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat5.x = texture(unity_NHxRoughness, u_xlat1.xy).w;
    u_xlat5.x = u_xlat5.x * 16.0;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;
    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat5.xyz);
    u_xlat5.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat10 = sqrt(u_xlat1.x);
    u_xlat10 = u_xlat10 * _LightPositionRange.w;
    u_xlat10 = u_xlat10 * _LightProjectionParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5.x<u_xlat10);
#else
    u_xlatb5 = u_xlat5.x<u_xlat10;
#endif
    u_xlat16_18 = (u_xlatb5) ? _LightShadowData.x : 1.0;
    u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = texture(_LightTexture0, u_xlat5.xx).w;
    u_xlat5.x = u_xlat16_18 * u_xlat5.x;
    u_xlat16_4.xyz = u_xlat5.xxx * _LightColor0.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: POINT_COOKIE SHADOWS_CUBE 
-- Vertex shader for "gles":
// Stats: 42 math, 5 textures, 1 branches
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_10.xyz - _WorldSpaceCameraPos));
  tmpvar_15 = tmpvar_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_19 = tmpvar_20;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec3 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_11).xyz;
  highp vec3 vec_12;
  vec_12 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_13;
  highp float mydist_14;
  mydist_14 = ((sqrt(
    dot (vec_12, vec_12)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureCube (_ShadowMapTexture, vec_12);
  highp vec4 vals_16;
  vals_16 = tmpvar_15;
  highp float tmpvar_17;
  tmpvar_17 = dot (vals_16, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_13 = tmpvar_17;
  mediump float tmpvar_18;
  if ((shadowVal_13 < mydist_14)) {
    tmpvar_18 = _LightShadowData.x;
  } else {
    tmpvar_18 = 1.0;
  };
  shadow_2 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_3, lightCoord_3))).w * textureCube (_LightTexture0, lightCoord_3).w) * shadow_2);
  atten_1 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20.x = xlv_TEXCOORD2.w;
  tmpvar_20.y = xlv_TEXCOORD2_1.w;
  tmpvar_20.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_21;
  lightDir_21 = tmpvar_20;
  mediump float atten_22;
  atten_22 = atten_1;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_23 = _LightColor0.xyz;
  highp vec3 n_25;
  n_25 = lightDir_21;
  tmpvar_24 = n_25;
  tmpvar_23 = (tmpvar_23 * atten_22);
  highp vec3 viewDir_26;
  viewDir_26 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_10, tmpvar_24), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_10, viewDir_26), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((viewDir_26 - (2.0 * 
    (dot (tmpvar_10, viewDir_26) * tmpvar_10)
  )), tmpvar_24);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_6;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = ((tmpvar_8 + (specular_35 * tmpvar_9)) * (tmpvar_23 * tmpvar_28));
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = tmpvar_39.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _UVSec;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_UVSec==0.0);
#else
    u_xlatb0 = _UVSec==0.0;
#endif
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _MainTex;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_4;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat4 = sqrt(u_xlat12);
    u_xlat4 = u_xlat4 * _LightPositionRange.w;
    u_xlat4 = u_xlat4 * _LightProjectionParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat4);
#else
    u_xlatb0 = u_xlat0.x<u_xlat4;
#endif
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat12)).w;
    u_xlat0.x = u_xlat0.x * u_xlat4;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = vec3(u_xlat12) * u_xlat16_2.xyz;
    u_xlat12 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.y = (-_Glossiness) + 1.0;
    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).w;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
    u_xlat16_14 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_14) + u_xlat16_3.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

 }


 // Stats for Vertex shader:
 //         gles: 5 avg math (1..9)
 Pass {
  Name "SHADOWCASTER"
  Tags { "LIGHTMODE"="SHADOWCASTER" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords set in this variant: SHADOWS_DEPTH 
-- Vertex shader for "gles":
// Stats: 1 math
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 wPos_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
  wPos_2 = tmpvar_3;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp mat3 tmpvar_4;
    tmpvar_4[0] = unity_WorldToObject[0].xyz;
    tmpvar_4[1] = unity_WorldToObject[1].xyz;
    tmpvar_4[2] = unity_WorldToObject[2].xyz;
    highp vec3 tmpvar_5;
    tmpvar_5 = normalize((_glesNormal * tmpvar_4));
    highp float tmpvar_6;
    tmpvar_6 = dot (tmpvar_5, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_3.xyz * _WorldSpaceLightPos0.w)
    )));
    wPos_2.xyz = (tmpvar_3.xyz - (tmpvar_5 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_6 * tmpvar_6)))
    )));
  };
  tmpvar_1 = (unity_MatrixVP * wPos_2);
  highp vec4 clipPos_7;
  clipPos_7.xyw = tmpvar_1.xyw;
  clipPos_7.z = (tmpvar_1.z + clamp ((unity_LightShadowBias.x / tmpvar_1.w), 0.0, 1.0));
  clipPos_7.z = mix (clipPos_7.z, max (clipPos_7.z, -(tmpvar_1.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_7;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat6;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
#else
    u_xlatb9 = unity_LightShadowBias.z!=0.0;
#endif
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: SHADOWS_CUBE 
-- Vertex shader for "gles":
// Stats: 9 math
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((unity_ObjectToWorld * _glesVertex).xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_LightShadowBias;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec4 enc_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    ((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) + unity_LightShadowBias.x) * _LightPositionRange.w)
  , 0.999)));
  enc_2 = (tmpvar_3 - (tmpvar_3.yzww * 0.003921569));
  tmpvar_1 = enc_2;
  gl_FragData[0] = tmpvar_1;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec3 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_LightShadowBias;
in highp vec3 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = min(u_xlat0.x, 0.999000013);
    u_xlat0 = u_xlat0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    u_xlat0 = fract(u_xlat0);
    u_xlat0 = (-u_xlat0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

 }
}
CustomEditor "StandardShaderGUI"
Fallback "VertexLit"
}